#+TITLE: init.el
#+AUTHOR: Lishuzhi
#+STARTUP: content

* headers
** common
The following line turns on lexical binding for performance reasons.
#+name: lexical-binding
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
#+end_src
* early-init.el
:PROPERTIES:
:HEADER-ARGS: :tangle early-init.el
:END:

https://remacs.cc/

#+BEGIN_SRC emacs-lisp
  ;;; early-init.el --- Emacs pre-initialization config -*- lexical-binding: t -*-
  ;;; Commentary:

  ;;; Code:

  ;; 设置垃圾回收参数
  (setq gc-cons-threshold most-positive-fixnum)
  (setq gc-cons-percentage 0.6)

  ;; 启动早期不加载`package.el'包管理器
  (setq package-enable-at-startup nil)
  ;; 不从包缓存中加载
  (setq package-quickstart nil)

  ;; 禁止展示菜单栏、工具栏和纵向滚动条
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

  ;; 禁止自动缩放窗口先
  (setq frame-inhibit-implied-resize t)

  ;; 禁止菜单栏、工具栏、滚动条模式，禁止启动屏幕和文件对话框
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-splash-screen t)
  (setq use-file-dialog nil)

  ;; 在这个阶段不编译
  (setq comp-deferred-compilation nil)
#+END_SRC
** frame
#+begin_src emacs-lisp
  ;;(add-hook 'window-setup-hook #'toggle-frame-maximized t)
  
  (setq-default inhibit-redisplay t
                inhibit-message t)
  (defun reset-inhibit-vars ()
    (setq-default inhibit-redisplay nil
                  inhibit-message nil)
    (redraw-frame))
  (add-hook 'window-setup-hook #'reset-inhibit-vars)
  (define-advice startup--load-user-init-file (:after (&rest _) reset-inhibit-vars)
    (and init-file-had-error (reset-inhibit-vars)))
#+end_src

** Constants
#+begin_src emacs-lisp
  (defconst windows? "are we on windows" (memq system-type '(cygwin windows-nt ms-dos)))
  (defconst macos? "are we on macos" (eq system-type 'darwin))
  (defconst linux? "are we on linux" (memq system-type '(gnu gnu/linux gnu/kfreebds berkeley-unix)))
  (defconst bsd? "are we on bsd" (memq system-type '(darwin berkeley-unix gnu/kfreebsd)))
  (defconst wsl? "are we on wsl" (and linux? (string-match-p "microsoft" operating-system-release)))
#+end_src

* init.el
:PROPERTIES:
:HEADER-ARGS: :tangle init.el
:END:
** Header
#+begin_src emacs-lisp
  ;;; init.el --- The main init entry for Emacs -*- lexical-binding: t -*-
  ;;; Commentary:

  ;;; Code:
#+end_src

** Variables
#+begin_src emacs-lisp
  (defvar emacy-directory "~/Emacy")
  (defvar user-local-directory (expand-file-name ".local" "~"))
#+end_src

** profiling
#+begin_src emacs-lisp
  (add-hook 'elpaca-after-init-hook
          (lambda ()
            (message "Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract (current-time) before-init-time)))
                     gcs-done)))

 (profiler-start 'cpu+mem)
(add-hook 'elpaca-after-init-hook (lambda () (profiler-stop) (profiler-report))) 
#+end_src

** package manager
*** elpaca
[[https://github.com/progfolio/elpaca][elpaca]]

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.3)
  (defvar elpaca-directory (expand-file-name "elpaca/" (if wsl? user-local-directory user-emacs-directory)))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "libraries/" emacy-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil
                                :files (:defaults (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (call-process "git" nil buffer t "clone"
                                         (plist-get order :repo) repo)))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (kill-buffer buffer)
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

**** elpaca enable use-package
#+begin_src emacs-lisp
  ;; (elpaca use-package)

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t)
    )
  
  ;; Block until current queue processed.
  (elpaca-wait)
#+end_src

**** elpaca disable package.el
#+begin_src emacs-lisp :tangle early-init.el
  (setq package-enable-at-startup nil)
#+end_src

**** elpaca custom menus
#+begin_src emacs-lisp
    (defun elpaca-menu-emacy (_)
      "Emacy custom menu"
      '((mind-wave :source "AI tools" :recipe (mind-wave :host github :repo "manateelazycat/mind-wave" :files (:defaults "*.py")))
        (lsp-bridge :source "Lsp Bridge" :recipe (mind-wave :host github :repo "manateelazycat/lsp-bridge" :files ("*")))))

    ;; (push 'elpaca-menu-emacy elpaca-menu-functions)
    (add-to-list 'elpaca-menu-functions 'elpaca-menu-emacy)
#+end_src

** require lisps
#+begin_src emacs-lisp
  ;; 将lisp目录放到加载路径的前面以加快启动速度
  (let ((dir (locate-user-emacs-file "lisp")))
    (add-to-list 'load-path (file-name-as-directory dir)))

  ;; 加载各模块化配置
  ;; 不要在`*message*'缓冲区显示加载模块化配置的信息
  (with-temp-message ""
    (require 'init-ui)                    ; 加载UI交互的模块化配置文件
    (require 'init-org)
    (require 'init-edit)
    (require 'init-misc)
    (require 'init-ide)
    (require 'init-completion)
    )
#+end_src

* init-ui.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-ui.el :mkdirp yes
:END:
** Misc
#+begin_src emacs-lisp
  ;; 禁用一些GUI特性
  (setq use-dialog-box nil)               ; 鼠标操作不使用对话框
  ;;(setq inhibit-default-init t)           ; 不加载 `default' 库
  ;;(setq inhibit-startup-screen t)         ; 不加载启动画面
  ;;(setq inhibit-startup-message t)        ; 不加载启动消息
  ;;(setq inhibit-startup-buffer-menu t)    ; 不显示缓冲区列表

  ;; 草稿缓冲区默认文字设置
  (setq initial-scratch-message (concat ";; Happy hacking, "
					(capitalize user-login-name) " - Emacs ♥ you!\n\n"))

  ;; 设置缓冲区的文字方向为从左到右
  (setq bidi-paragraph-direction 'left-to-right)
  ;; 禁止使用双向括号算法
  ;; (setq bidi-inhibit-bpa t)

  ;; 设置自动折行宽度为80个字符，默认值为70
  (setq-default fill-column 80)

  ;; 设置大文件阈值为100MB，默认10MB
  (setq large-file-warning-threshold 100000000)

  ;; 以16进制显示字节数
  (setq display-raw-bytes-as-hex t)
  ;; 有输入时禁止 `fontification' 相关的函数钩子，能让滚动更顺滑
  (setq redisplay-skip-fontification-on-input t)

  ;; 禁止响铃
  (setq ring-bell-function 'ignore)

  ;; 禁止闪烁光标
  (blink-cursor-mode -1)

  ;; 在光标处而非鼠标所在位置粘贴
  (setq mouse-yank-at-point t)

  ;; 拷贝粘贴设置
  (setq select-enable-primary nil)        ; 选择文字时不拷贝
  (setq select-enable-clipboard t)        ; 拷贝时使用剪贴板

  ;; 鼠标滚动设置
  (setq scroll-step 2)
  (setq scroll-margin 2)
  (setq hscroll-step 2)
  (setq hscroll-margin 2)
  (setq scroll-conservatively 101)
  (setq scroll-up-aggressively 0.01)
  (setq scroll-down-aggressively 0.01)
  (setq scroll-preserve-screen-position 'always)

  ;; 对于高的行禁止自动垂直滚动
  (setq auto-window-vscroll nil)

  ;; 设置新分屏打开的位置的阈值
  (setq split-width-threshold (assoc-default 'width default-frame-alist))
  (setq split-height-threshold nil)

  ;; TAB键设置，在Emacs里不使用TAB键，所有的TAB默认为4个空格
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  ;; yes或no提示设置，通过下面这个函数设置当缓冲区名字匹配到预设的字符串时自动回答yes
  (setq original-y-or-n-p 'y-or-n-p)
  (defalias 'original-y-or-n-p (symbol-function 'y-or-n-p))
  (defun default-yes-sometimes (prompt)
    "automatically say y when buffer name match following string"
    (if (or
	     (string-match "has a running process" prompt)
	     (string-match "does not exist; create" prompt)
	     (string-match "modified; kill anyway" prompt)
	     (string-match "Delete buffer using" prompt)
	     (string-match "Kill buffer of" prompt)
	     (string-match "still connected.  Kill it?" prompt)
	     (string-match "Shutdown the client's kernel" prompt)
	     (string-match "kill them and exit anyway" prompt)
	     (string-match "Revert buffer from file" prompt)
	     (string-match "Kill Dired buffer of" prompt)
	     (string-match "delete buffer using" prompt)
	 (string-match "Kill all pass entry" prompt)
	 (string-match "for all cursors" prompt)
	     (string-match "Do you want edit the entry" prompt))
	    t
      (original-y-or-n-p prompt)))
  (defalias 'yes-or-no-p 'default-yes-sometimes)
  (defalias 'y-or-n-p 'default-yes-sometimes)

  ;; 设置剪贴板历史长度300，默认为60
  (setq kill-ring-max 200)

  ;; 在剪贴板里不存储重复内容
  (setq kill-do-not-save-duplicates t)

  ;; 设置位置记录长度为6，默认为16
  ;; 可以使用 `counsel-mark-ring' or `consult-mark' (C-x j) 来访问光标位置记录
  ;; 使用 C-x C-SPC 执行 `pop-global-mark' 直接跳转到上一个全局位置处
  ;; 使用 C-u C-SPC 跳转到本地位置处
  (setq mark-ring-max 6)
  (setq global-mark-ring-max 6)

  ;; 设置 emacs-lisp 的限制
  (setq max-lisp-eval-depth 10000)        ; 默认值为 800
  (setq max-specpdl-size 10000)           ; 默认值为 1600

  ;; 启用 `list-timers', `list-threads' 这两个命令
  (put 'list-timers 'disabled nil)
  (put 'list-threads 'disabled nil)

  ;; 在命令行里支持鼠标
  (xterm-mouse-mode 1)

  ;; 退出Emacs时进行确认
  ;;(setq confirm-kill-emacs 'y-or-n-p)

  ;; 在模式栏上显示当前光标的列号
  (column-number-mode t)

  ;; 配置所有的编码为UTF-8，参考：
  ;; https://thraxys.wordpress.com/2016/01/13/utf-8-in-emacs-everywhere-forever/
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-language-environment 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

** Theme
#+begin_src emacs-lisp
  (use-package ef-themes
    :ensure t
    :bind ("C-c t" . ef-themes-toggle)
    :init
    ;; set two specific themes and switch between them
    (setq ef-themes-to-toggle '(ef-summer ef-winter))
    ;; set org headings and function syntax
    (setq ef-themes-headings
      '((0 . (bold 1))
        (1 . (bold 1))
        (2 . (rainbow bold 1))
        (3 . (rainbow bold 1))
        (4 . (rainbow bold 1))
        (t . (rainbow bold 1))))
    (setq ef-themes-region '(intense no-extend neutral))
    ;; Disable all other themes to avoid awkward blending:
    (mapc #'disable-theme custom-enabled-themes)

    ;; Load the theme of choice:
    ;; The themes we provide are recorded in the `ef-themes-dark-themes',
    ;; `ef-themes-light-themes'.

    ;; 如果你不喜欢随机主题，也可以直接固定选择一个主题，如下：
    ;; (ef-themes-select 'ef-summer)

    ;; 随机挑选一款主题，如果是命令行打开Emacs，则随机挑选一款黑色主题
    (if (display-graphic-p)
    (ef-themes-load-random)
      (ef-themes-load-random 'dark))

    :config
    ;; auto change theme, aligning with system themes.
    (defun my/apply-theme (appearance)
      "Load theme, taking current system APPEARANCE into consideration."
      (mapc #'disable-theme custom-enabled-themes)
      (pcase appearance
    ('light (if (display-graphic-p) (ef-themes-load-random 'light) (ef-themes-load-random 'dark)))
    ('dark (ef-themes-load-random 'dark))))

    (if (eq system-type 'darwin)
    ;; only for emacs-plus
    (add-hook 'ns-system-appearance-change-functions #'my/apply-theme)
      ;;(ef-themes-select 'ef-summer)
      (ef-themes-load-random)
      )
    )
#+end_src

** Fonts
#+begin_src emacs-lisp
  (use-package fontaine
    :ensure t
    :when (display-graphic-p)
    ;; :hook (kill-emacs . fontaine-store-latest-preset)
    :config
    (setq fontaine-latest-state-file
	  (locate-user-emacs-file "etc/fontaine-latest-state.eld"))
    (setq fontaine-presets
	  '((regular
	     :default-height 140
	     :default-weight regular
	     :fixed-pitch-height 1.0
	     :variable-pitch-height 1.0
	     )
	    (large
	     :default-height 180
	     :default-weight normal
	     :fixed-pitch-height 1.0
	     :variable-pitch-height 1.05
	     )
	    (t
	     :default-family "Fira Code"
	     :fixed-pitch-family "Fira Code"
	     :variable-pitch-family "Fira Code"
	     :italic-family "Fira Code"
	     :variable-pitch-weight normal
	     :bold-weight normal
	     :italic-slant italic
	     :line-spacing 0.1)
	    ))
    ;; (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))
    (fontaine-set-preset 'regular)

    ;; set emoji font
    (set-fontset-font
     t
     (if (version< emacs-version "28.1")
	 '(#x1f300 . #x1fad0)
       'emoji)
     (cond
      ((member "Noto Emoji" (font-family-list)) "Noto Emoji")
      ((member "Symbola" (font-family-list)) "Symbola")
      ((member "Apple Color Emoji" (font-family-list)) "Apple Color Emoji")
      ((member "Noto Color Emoji" (font-family-list)) "Noto Color Emoji")
      ((member "Segoe UI Emoji" (font-family-list)) "Segoe UI Emoji")
      ))

    ;; set Chinese font
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font
       (frame-parameter nil 'font)
       charset
       (font-spec :family
		  (cond
		   ((eq system-type 'darwin)
		    (cond
		     ((member "Sarasa Mono SC Nerd" (font-family-list)) "Sarasa Mono SC Nerd")
		     ((member "PingFang SC" (font-family-list)) "PingFang SC")
		     ((member "WenQuanYi Zen Hei" (font-family-list)) "WenQuanYi Zen Hei")
		     ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")
		     ))
		   ((eq system-type 'gnu/linux)
		    (cond
		     ((member "LXGW Wenkai Mono" (font-family-list)) "LXGW Wenkai Mono")
		     ((member "WenQuanYi Micro Hei" (font-family-list)) "WenQuanYi Micro Hei")
		     ((member "WenQuanYi Zen Hei" (font-family-list)) "WenQuanYi Zen Hei")
		     ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")
		     ))
		   (t
		    (cond
		     ((member "Sarasa Mono SC Nerd" (font-family-list)) "Sarasa Mono SC Nerd")
		     ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")
		     )))
		  )))

    ;; set Chinese font scale
    (setq face-font-rescale-alist `(
				    ("Symbola"             . 1.3)
				    ("Microsoft YaHei"     . 1.2)
				    ("WenQuanYi Zen Hei"   . 1.2)
				    ("Sarasa Mono SC Nerd" . 1.2)
				    ("PingFang SC"         . 1.16)
				    ("Lantinghei SC"       . 1.16)
				    ("Kaiti SC"            . 1.16)
				    ("Yuanti SC"           . 1.16)
				    ("Apple Color Emoji"   . 0.91)
				    ))
    )
#+end_src

** OrgMode
** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :demand t
    :init
    (setq which-key-enable-extended-define-key t)
    :config
    (which-key-mode)
    :custom
    (which-key-side-window-location 'bottom)
    (which-key-sort-order 'which-key-key-order-alpha)
    (which-key-side-window-max-width 0.33)
    (which-key-idle-delay 0.05)
  :diminish which-key-mode)
#+end_src
** Frame
#+begin_src emacs-lisp
  ;; 设置窗口大小，仅仅在图形界面需要设置
  (when (display-graphic-p)
    (let ((top    0)                                     ; 顶不留空
      (left   (/ (x-display-pixel-width) 10))        ; 左边空10%
      (height (round (* 0.8                          ; 窗体高度为0.8倍的显示高度
                (/ (x-display-pixel-height)
                   (frame-char-height))))))
      (let ((width  (round (* 2.5 height))))             ; 窗体宽度为2.5倍高度
    (setq default-frame-alist nil)
    (add-to-list 'default-frame-alist (cons 'top top))
    (add-to-list 'default-frame-alist (cons 'left left))
    (add-to-list 'default-frame-alist (cons 'height height))
    (add-to-list 'default-frame-alist (cons 'width width)))))
#+end_src

** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (elpaca-after-init . doom-modeline-mode)
    :custom
    (doom-modeline-irc nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-gnus nil)
    (doom-modeline-github nil)
    (doom-modeline-buffer-file-name-style 'truncate-upto-root) ; : auto
    (doom-modeline-persp-name nil)
    (doom-modeline-unicode-fallback t)
    (doom-modeline-enable-word-count nil))

  
  ;; [[https://github.com/tarsius/minions][minions]] 插件能让模式栏变得清爽，将次要模式隐藏起来。

  (use-package minions
    :ensure t
    :hook (elpaca-after-init . minions-mode))

  (use-package keycast
    :ensure t
    :hook (elpaca-after-init . keycast-mode)
    ;; :custom-face
    ;; (keycast-key ((t (:background "#0030b4" :weight bold))))
    ;; (keycast-command ((t (:foreground "#0030b4" :weight bold))))
    :config
    ;; set for doom-modeline support
    ;; With the latest change 72d9add, mode-line-keycast needs to be modified to keycast-mode-line.
    (define-minor-mode keycast-mode
      "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
      :global t
      (if keycast-mode
      (progn
	(add-hook 'pre-command-hook 'keycast--update t)
	(add-to-list 'global-mode-string '("" keycast-mode-line "  ")))
    (remove-hook 'pre-command-hook 'keycast--update)
    (setq global-mode-string (delete '("" keycast-mode-line "  ") global-mode-string))
    ))

    (dolist (input '(self-insert-command
	     org-self-insert-command))
      (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

    (dolist (event '(mouse-event-p
	     mouse-movement-p
	     mwheel-scroll))
      (add-to-list 'keycast-substitute-alist `(,event nil)))

    (setq keycast-log-format "%-20K%C\n")
    (setq keycast-log-frame-alist
      '((minibuffer . nil)))
    (setq keycast-log-newest-first t)
    )
#+end_src
** Footer
#+begin_src emacs-lisp
  (provide 'init-ui)
#+end_src

* init-org.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-org.el :mkdirp yes
:END:
** Misc
#+begin_src emacs-lisp
  (use-package org-auto-tangle
  :ensure t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t)
  )
#+end_src
** org-config
#+begin_src emacs-lisp
  (setq org-directory  "~/Notes"
        org-archive-location (concat org-directory "/archive/%s::")
        org-contacts-files (list (concat org-directory "/archive/contacts.org"))
        org-agenda-files (list org-directory)
        deft-directory org-directory
        org-roam-directory org-directory
        org-brain-path org-directory
        org-roam-file-exclude-regexp ".*/bak/.*"
        org-brain-visualize-default-choices 'all
        rmh-elfeed-org-files (list (concat org-directory "/feeds.org")))

  (setq org-fontify-whole-heading-line t
        org-fontify-quote-and-verse-blocks t
        org-hide-macro-markers t
        org-startup-indented t
        org-adapt-indentation t
        org-startup-with-inline-images t
        org-startup-with-latex-preview t)

  (setq deft-recursive t
        deft-recursive-ignore-dir-regexp (rx (or "." ".." "logseq") eol))

  (setq org-agenda-archives-mode t)
  (setq org-export-select-tags '("Publish" "Public" "export")
        org-publish-project-alist
        '(("content"
           :base-directory "~/Notes/content"
           :publishing-directory "~/Notes/publish"
           ;; :publishing-function (org-org-publish-to-org org-md-publish-to-md)
           :publishing-function org-org-publish-to-org
           :select-tags ("Publish" "Public" "Export" "export" "publish" "public")
           :exclude-tags ("Private" "Secret" "noexport")
           :recursive t
           :with-broken-links t
           :with-toc nil)))

  (setq org-log-done 'time)
  ;; (setq org-priority-lowest ?E)
  (setq org-contacts-icon-use-gravatar nil)
  (setq org-superstar-headline-bullets-list '("☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷"))
  (setq org-todo-keywords
        '((sequence "NEXT(n)" "TODO(t)" "PEND(p)" "WILL(w@/!)" "|" "DONE(d)" "QUIT(q@)")
          (sequence "[-](N)" "[ ](T)" "[:](P)" "[?](W)" "|" "[X](D)" "[Q](Q)")))
  (setq org-todo-keyword-faces
        '(("TODO" :foreground "orange"       :weight bold)
          ("[ ]"  :foreground "orange"       :weight bold)
          ("NEXT" :foreground "yellow"       :weight bold)
          ("[-]"  :foreground "yellow"       :weight bold)
          ("PEND" :foreground "pink"         :weight bold)
          ("[:]"  :foreground "pink"         :weight bold)
          ("WILL" :foreground "purple"       :weight bold)
          ("[?]"  :foreground "purple"       :weight bold)
          ("DONE" :foreground "forest green" :weight bold)
          ("[X]"  :foreground "forest green" :weight bold)
          ("QUIT" :foreground "grey"         :weight bold)
          ("[Q]"  :foreground "grey"         :weight bold)))

  (use-package org-contrib)
#+end_src
** org-modern
#+begin_src emacs-lisp
  (use-package org-modern
    :ensure t
    :hook (elpaca-after-init . (lambda ()
                          (setq org-modern-hide-stars 'leading)
                          (global-org-modern-mode t)))
    :config
    ;; 标题行型号字符
    (setq org-modern-star ["☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷"])
    ;; 额外的行间距，0.1表示10%，1表示1px
    (setq-default line-spacing 0.1)
    ;; tag边框宽度，还可以设置为 `auto' 即自动计算
    (setq org-modern-label-border 1)
    ;; 设置表格竖线宽度，默认为3
    (setq org-modern-table-vertical 2)
    ;; 设置表格横线为0，默认为0.1
    (setq org-modern-table-horizontal 0)
    ;; 复选框美化
    (setq org-modern-checkbox
          '((?X . #("▢✓" 0 2 (composition ((2)))))
            (?- . #("▢–" 0 2 (composition ((2)))))
            (?\s . #("▢" 0 1 (composition ((1)))))))
    ;; 列表符号美化
    (setq org-modern-list
          '((?- . "•")
            (?+ . "◦")
            (?* . "▹")))
    ;; 代码块左边加上一条竖边线（需要Org mode顶头，如果启用了 `visual-fill-column-mode' 会很难看）
    (setq org-modern-block-fringe t)
    ;; 代码块类型美化，我们使用了 `prettify-symbols-mode'
    (setq org-modern-block-name nil)
    ;; #+关键字美化，我们使用了 `prettify-symbols-mode'
    (setq org-modern-keyword nil)
    )
#+end_src
** org-appear
#+begin_src emacs-lisp
 (use-package org-appear
  :ensure t
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autolinks t)
  (setq org-appear-autosubmarkers t)
  (setq org-appear-autoentities t)
  (setq org-appear-autokeywords t)
  (setq org-appear-inside-latex t)
  ) 
#+end_src

** footer
#+begin_src emacs-lisp
  (provide 'init-org)
#+end_src

* init-edit.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-edit.el :mkdirp yes
:END:
** base
#+begin_src emacs-lisp
  ;;(use-package autorevert
  ;;  :ensure nil
  ;;  :hook (elpaca-after-init . global-auto-revert-mode)
  ;;  :bind ("s-u" . revert-buffer)
  ;;  :custom
  ;;  (auto-revert-interval 10)
  ;;  (auto-revert-avoid-polling t)
  ;;  (auto-revert-verbose nil)
  ;;  (auto-revert-remote-files t)
  ;;  (auto-revert-check-vc-info t)
  ;;  (global-auto-revert-non-file-buffers t))

  ;; Directly modify when selecting text
  ;;(use-package delsel
  ;;  :ensure nil
  ;;  :hook (elpaca-after-init . delete-selection-mode))

  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after (evil)
    :config (evil-collection-init)
    :custom
    (evil-collection-elpaca-want-g-filters nil)
    (evil-collection-setup-minibuffer t "Add evil bindings to minibuffer")
    (evil-collection-company-use-tng t))
#+end_src
** auto-revert
#+begin_src emacs-lisp
  (global-auto-revert-mode)
#+end_src

** footer
#+begin_src emacs-lisp
  (provide 'init-edit)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init.el ends here  
#+end_src

* init-ide.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-ide.el :mkdirp yes
:END:
** base
** lsp-bridge
#+begin_src emacs-lisp
  (use-package posframe)
  (use-package yasnippet
    :init
    (yas-global-mode 1))

  (use-package lsp-bridge
    :elpaca (lsp-bridge :host github :repo "manateelazycat/lsp-bridge" :files ("*"))
    :init
    (global-lsp-bridge-mode))
#+end_src
** treesit
#+begin_src emacs-lisp

  (setq treesit-language-source-alist
        '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
          (c . ("https://github.com/tree-sitter/tree-sitter-c"))
          (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
          (css . ("https://github.com/tree-sitter/tree-sitter-css"))
          (cmake . ("https://github.com/uyha/tree-sitter-cmake"))
          (csharp     . ("https://github.com/tree-sitter/tree-sitter-c-sharp.git"))
          (dockerfile . ("https://github.com/camdencheek/tree-sitter-dockerfile"))
          (elisp . ("https://github.com/Wilfred/tree-sitter-elisp"))
          (go . ("https://github.com/tree-sitter/tree-sitter-go"))
          (gomod      . ("https://github.com/camdencheek/tree-sitter-go-mod.git"))
          (html . ("https://github.com/tree-sitter/tree-sitter-html"))
          (java       . ("https://github.com/tree-sitter/tree-sitter-java.git"))
          (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
          (json . ("https://github.com/tree-sitter/tree-sitter-json"))
          (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
          (make . ("https://github.com/alemuller/tree-sitter-make"))
          (markdown . ("https://github.com/MDeiml/tree-sitter-markdown" nil "tree-sitter-markdown/src"))
          (ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml" nil "ocaml/src"))
          (org . ("https://github.com/milisims/tree-sitter-org"))
          (python . ("https://github.com/tree-sitter/tree-sitter-python"))
          (php . ("https://github.com/tree-sitter/tree-sitter-php"))
          (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "typescript/src"))
          (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "tsx/src"))
          (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
          (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
          (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
          (vue . ("https://github.com/merico-dev/tree-sitter-vue"))
          (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))
          (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
          (zig . ("https://github.com/GrayJack/tree-sitter-zig"))))

  (setq major-mode-remap-alist
        '((c-mode          . c-ts-mode)
          (c++-mode        . c++-ts-mode)
          (cmake-mode      . cmake-ts-mode)
          (conf-toml-mode  . toml-ts-mode)
          (css-mode        . css-ts-mode)
          (js-mode         . js-ts-mode)
          (js-json-mode    . json-ts-mode)
          (python-mode     . python-ts-mode)
          (sh-mode         . bash-ts-mode)
          (typescript-mode . typescript-ts-mode)))

  (add-hook 'emacs-lisp-mode-hook #'(lambda () (treesit-parser-create 'elisp)))
#+end_src
** footer
#+begin_src emacs-lisp
  (provide 'init-ide)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init.el ends here  
#+end_src

* init-misc.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-misc.el :mkdirp yes
:END:
** mind-wave
#+begin_src emacs-lisp
    ;;(use-package '(elpaca :repo "https://https://github.com/manateelazycat/mind-wave))
    (use-package mind-wave
      :elpaca (mind-wave :repo "https://github.com/manateelazycat/mind-wave" :files (:defaults "*.py"))
  )
#+end_src
** whisper
#+begin_src emacs-lisp
  (use-package whisper
    :elpaca (whisper :host github :repo "natrys/whisper.el"))

#+end_src
** footer
#+begin_src emacs-lisp
  (provide 'init-misc)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init.el ends here  
#+end_src
* init-completion
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-completion.el :mkdirp yes
:END:
** vertico
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (savehist-mode)

  ;; A few more useful configurations...
  (use-package emacs
    :elpaca nil
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src
** orderless
#+begin_src emacs-lisp
  ;; support Pinyin first character match for orderless, avy etc.
  (use-package pinyinlib
    :ensure t)

  ;; orderless ???????
  (use-package orderless
    :ensure t
    :init
    (setq completion-styles '(orderless partial-completion basic))
    (setq orderless-component-separator "[ &]") ; & is for company because space will break completion
    (setq completion-category-defaults nil)
    (setq completion-category-overrides nil)
    :config
    ;; make completion support pinyin, refer to
    ;; https://emacs-china.org/t/vertico/17913/2
    (defun completion--regex-pinyin (str)
      (orderless-regexp (pinyinlib-build-regexp-string str)))
    (add-to-list 'orderless-matching-styles 'completion--regex-pinyin)
    )
#+end_src

** marginalia
#+begin_src emacs-lisp
  ;; minibuffer helpful annotations
  (use-package marginalia
    :ensure t
    :hook (elpaca-after-init . marginalia-mode)
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+end_src

** consult
#+begin_src emacs-lisp
  (use-package consult
  :ensure t
  :after org
  :bind (([remap goto-line]                     . consult-goto-line)
         ([remap isearch-forward]               . consult-line-symbol-at-point) ; my-consult-ripgrep-or-line
         ([remap switch-to-buffer]              . consult-buffer)
         ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
         ([remap switch-to-buffer-other-frame]  . consult-buffer-other-frame)
         ([remap yank-pop]                      . consult-yank-pop)
         ([remap apropos]                       . consult-apropos)
         ([remap bookmark-jump]                 . consult-bookmark)
         ([remap goto-line]                     . consult-goto-line)
         ([remap imenu]                         . consult-imenu)
         ([remap multi-occur]                   . consult-multi-occur)
         ([remap recentf-open-files]            . consult-recent-file)
         ("C-x j"                               . consult-mark)
         ("C-c g"                               . consult-ripgrep)
         ("C-c f"                               . consult-find)
         ("\e\ef"                               . consult-locate) ; need to enable locate first
         ("C-c n h"                             . my/consult-find-org-headings)
         :map org-mode-map
         ("C-c C-j"                             . consult-org-heading)
         :map minibuffer-local-map
         ("C-r"                                 . consult-history)
         :map isearch-mode-map
         ("C-;"                                 . consult-line)
         :map prog-mode-map
         ("C-c C-j"                             . consult-outline)
         )
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; MacOS locate doesn't support `--ignore-case --existing' args.
  (setq consult-locate-args (pcase system-type
                              ('gnu/linux "locate --ignore-case --existing --regex")
                              ('darwin "mdfind -name")))
  :config
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
   :preview-key (kbd "M-."))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  (autoload 'projectile-project-root "projectile")
  (setq consult-project-root-function #'projectile-project-root)

  ;; Use `consult-ripgrep' instead of `consult-line' in large buffers
  (defun consult-line-symbol-at-point ()
    "Consult line the synbol where the point is"
    (interactive)
    (consult-line (thing-at-point 'symbol)))
  )
#+end_src

** TODO corfu
#+begin_src emacs-lisp
  (use-package corfu
    :elpaca (corfu :host github :repo "minad/corfu" :files (:defaults "extensions/*"))
    :defer 5
    :custom
    (corfu-cycle t)
    :config
    (global-corfu-mode)
    (with-eval-after-load 'evil
      (setq evil-complete-next-func (lambda (_) (completion-at-point)))))
#+end_src
** TODO cape
#+begin_src emacs-lisp
  (use-package cape
  :ensure t
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-keyword)  ; programming language keyword
  (add-to-list 'completion-at-point-functions #'cape-ispell)
  (add-to-list 'completion-at-point-functions #'cape-dict)
  (add-to-list 'completion-at-point-functions #'cape-symbol)   ; elisp symbol
  (add-to-list 'completion-at-point-functions #'cape-line)

  :config
  (setq cape-dict-file (expand-file-name "etc/hunspell_dict.txt" user-emacs-directory))

  ;; for Eshell:
  ;; ===========
  ;; Silence the pcomplete capf, no errors or messages!
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

  ;; and behaves as a pure `completion-at-point-function'.
  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)
  )
#+end_src
** footer
#+begin_src emacs-lisp
  (provide 'init-completion)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init.el ends here  
#+end_src
* Footers
** early-init.el
#+begin_src emacs-lisp :tangle early-init.el
  (provide 'early-init)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; early-init.el ends here
#+end_src

** init.el
#+begin_src emacs-lisp :tangle init.el
  (provide 'init)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init.el ends here
#+end_src
