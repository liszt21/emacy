#+TITLE: init.el
#+AUTHOR: Lishuzhi
#+STARTUP: content

* early-init.el
:PROPERTIES:
:HEADER-ARGS: :tangle early-init.el
:END:

https://remacs.cc/

#+BEGIN_SRC emacs-lisp
  ;;; early-init.el --- Emacs pre-initialization config -*- lexical-binding: t -*-
  ;;; Commentary:

  ;;; Code:

  ;; 设置垃圾回收参数
  (setq gc-cons-threshold most-positive-fixnum)
  (setq gc-cons-percentage 0.6)

  ;; 启动早期不加载`package.el'包管理器
  (setq package-enable-at-startup nil)
  ;; 不从包缓存中加载
  (setq package-quickstart nil)

  ;; 禁止展示菜单栏、工具栏和纵向滚动条
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

  ;; 禁止自动缩放窗口先
  (setq frame-inhibit-implied-resize t)

  ;; 禁止菜单栏、工具栏、滚动条模式，禁止启动屏幕和文件对话框
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-splash-screen t)
  (setq use-file-dialog nil)

  ;; 在这个阶段不编译
  (setq comp-deferred-compilation nil)


#+END_SRC

* init.el
:PROPERTIES:
:HEADER-ARGS: :tangle init.el
:END:
** Header
#+begin_src emacs-lisp
  ;;; init.el --- The main init entry for Emacs -*- lexical-binding: t -*-
  ;;; Commentary:

  ;;; Code:
#+end_src

** Variables
#+begin_src emacs-lisp
  (defvar emacy-directory "~/Emacy")
#+end_src

** 包管理配置
*** elpaca
https://github.com/progfolio/elpaca
#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.2)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" emacy-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (when-let ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	     (build (expand-file-name "elpaca/" elpaca-builds-directory))
	     (order (cdr elpaca-order))
	     ((add-to-list 'load-path (if (file-exists-p build) build repo)))
	     ((not (file-exists-p repo))))
    (condition-case-unless-debug err
	(if-let ((buffer (pop-to-buffer-same-window "*elpaca-installer*"))
		 ((zerop (call-process "git" nil buffer t "clone"
				       (plist-get order :repo) repo)))
		 (default-directory repo)
		 ((zerop (call-process "git" nil buffer t "checkout"
				       (or (plist-get order :ref) "--"))))
		 (emacs (concat invocation-directory invocation-name))
		 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
				       "--eval" "(byte-recompile-directory \".\" 0 'force)"))))
	    (progn (require 'elpaca)
		   (elpaca-generate-autoloads "elpaca" repo)
		   (kill-buffer buffer))
	  (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (require 'elpaca-autoloads)
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  (elpaca use-package)

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)
#+end_src

**** elpaca disable package.el
#+begin_src emacs-lisp :tangle early-init.el
  (setq package-enable-at-startup nil)
#+end_src

** require lisps
#+begin_src emacs-lisp
  ;; 将lisp目录放到加载路径的前面以加快启动速度
  (let ((dir (locate-user-emacs-file "lisp")))
    (add-to-list 'load-path (file-name-as-directory dir)))

  ;; 加载各模块化配置
  ;; 不要在`*message*'缓冲区显示加载模块化配置的信息
  (with-temp-message ""
    (require 'emacy-ui)                    ; 加载UI交互的模块化配置文件
    (require 'emacy-org)
    )
#+end_src
* emacy-ui.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/emacy-ui.el :mkdirp yes
:END:
** Theme
#+begin_src emacs-lisp
  (use-package ef-themes
    :ensure t
    :bind ("C-c t" . ef-themes-toggle)
    :init
    ;; set two specific themes and switch between them
    (setq ef-themes-to-toggle '(ef-summer ef-winter))
    ;; set org headings and function syntax
    (setq ef-themes-headings
	  '((0 . (bold 1))
	    (1 . (bold 1))
	    (2 . (rainbow bold 1))
	    (3 . (rainbow bold 1))
	    (4 . (rainbow bold 1))
	    (t . (rainbow bold 1))))
    (setq ef-themes-region '(intense no-extend neutral))
    ;; Disable all other themes to avoid awkward blending:
    (mapc #'disable-theme custom-enabled-themes)

    ;; Load the theme of choice:
    ;; The themes we provide are recorded in the `ef-themes-dark-themes',
    ;; `ef-themes-light-themes'.

    ;; 如果你不喜欢随机主题，也可以直接固定选择一个主题，如下：
    ;; (ef-themes-select 'ef-summer)

    ;; 随机挑选一款主题，如果是命令行打开Emacs，则随机挑选一款黑色主题
    (if (display-graphic-p)
	(ef-themes-load-random)
      (ef-themes-load-random 'dark))

    :config
    ;; auto change theme, aligning with system themes.
    (defun my/apply-theme (appearance)
      "Load theme, taking current system APPEARANCE into consideration."
      (mapc #'disable-theme custom-enabled-themes)
      (pcase appearance
	('light (if (display-graphic-p) (ef-themes-load-random 'light) (ef-themes-load-random 'dark)))
	('dark (ef-themes-load-random 'dark))))

    (if (eq system-type 'darwin)
	;; only for emacs-plus
	(add-hook 'ns-system-appearance-change-functions #'my/apply-theme)
      (ef-themes-select 'ef-summer)
      )
    )
#+end_src
** Fonts
#+begin_src emacs-lisp
  (use-package fontaine
    :ensure t
    :when (display-graphic-p)
    ;; :hook (kill-emacs . fontaine-store-latest-preset)
    :config
    (setq fontaine-latest-state-file
	  (locate-user-emacs-file "etc/fontaine-latest-state.eld"))
    (setq fontaine-presets
	  '((regular
	     :default-height 140
	     :default-weight regular
	     :fixed-pitch-height 1.0
	     :variable-pitch-height 1.0
	     )
	    (large
	     :default-height 180
	     :default-weight normal
	     :fixed-pitch-height 1.0
	     :variable-pitch-height 1.05
	     )
	    (t
	     :default-family "Fira Code"
	     :fixed-pitch-family "Fira Code"
	     :variable-pitch-family "Fira Code"
	     :italic-family "Fira Code"
	     :variable-pitch-weight normal
	     :bold-weight normal
	     :italic-slant italic
	     :line-spacing 0.1)
	    ))
    ;; (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))
    (fontaine-set-preset 'regular)

    ;; set emoji font
    (set-fontset-font
     t
     (if (version< emacs-version "28.1")
	 '(#x1f300 . #x1fad0)
       'emoji)
     (cond
      ((member "Noto Emoji" (font-family-list)) "Noto Emoji")
      ((member "Symbola" (font-family-list)) "Symbola")
      ((member "Apple Color Emoji" (font-family-list)) "Apple Color Emoji")
      ((member "Noto Color Emoji" (font-family-list)) "Noto Color Emoji")
      ((member "Segoe UI Emoji" (font-family-list)) "Segoe UI Emoji")
      ))

    ;; set Chinese font
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font
       (frame-parameter nil 'font)
       charset
       (font-spec :family
		  (cond
		   ((eq system-type 'darwin)
		    (cond
		     ((member "Sarasa Mono SC Nerd" (font-family-list)) "Sarasa Mono SC Nerd")
		     ((member "PingFang SC" (font-family-list)) "PingFang SC")
		     ((member "WenQuanYi Zen Hei" (font-family-list)) "WenQuanYi Zen Hei")
		     ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")
		     ))
		   ((eq system-type 'gnu/linux)
		    (cond
		     ((member "LXGW Wenkai Mono" (font-family-list)) "LXGW Wenkai Mono")
		     ((member "WenQuanYi Micro Hei" (font-family-list)) "WenQuanYi Micro Hei")
		     ((member "WenQuanYi Zen Hei" (font-family-list)) "WenQuanYi Zen Hei")
		     ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")
		     ))
		   (t
		    (cond
		     ((member "Sarasa Mono SC Nerd" (font-family-list)) "Sarasa Mono SC Nerd")
		     ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")
		     )))
		  )))

    ;; set Chinese font scale
    (setq face-font-rescale-alist `(
				    ("Symbola"             . 1.3)
				    ("Microsoft YaHei"     . 1.2)
				    ("WenQuanYi Zen Hei"   . 1.2)
				    ("Sarasa Mono SC Nerd" . 1.2)
				    ("PingFang SC"         . 1.16)
				    ("Lantinghei SC"       . 1.16)
				    ("Kaiti SC"            . 1.16)
				    ("Yuanti SC"           . 1.16)
				    ("Apple Color Emoji"   . 0.91)
				    ))
    )
#+end_src
** OrgMode

** Edit
** Footer
#+begin_src emacs-lisp
  (provide 'emacy-ui)
#+end_src


* emacy-org.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/emacy-org.el :mkdirp yes
:END:
** Misc
#+begin_src emacs-lisp
  (use-package org-auto-tangle
  :ensure t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t)
  )
#+end_src

** footer
#+begin_src emacs-lisp
  (provide 'emacy-org)
#+end_src

* Footers
** early-init.el
#+begin_src emacs-lisp :tangle early-init.el
  (provide 'early-init)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; early-init.el ends here
#+end_src

** init.el
#+begin_src emacs-lisp :tangle init.el
  (provide 'init)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init.el ends here
#+end_src
