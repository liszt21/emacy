;-*- eval: (load-file "./lisp/init-dev.el");   -*-
#+TITLE: init.el
#+AUTHOR: lishuzhi
#+STARTUP: content
#+PROPERTY: id emacy-config
#+PROPERTY: header-args :tangle init.el :noweb yes :session init

https://remacs.cc/

* TODO Tasks
** TODO config packages
*** TODO keyfreq
[[http://blog.binchen.org/posts/how-to-be-extremely-efficient-in-emacs.html]]

#+end_src

*** tabspaces
#+header: :tangle no
#+begin_src emacs-lisp
  (use-package tabspaces
    :elpaca (:type git :host github :repo "mclear-tools/tabspaces")
    :hook (elpaca-after-init . tabspaces-mode)
    :commands (tabspaces-switch-or-create-workspace tabspaces-open-or-create-project-and-workspace)
    :custom
    (tabspaces-use-filtered-buffers-as-default t)
    (tabspaces-default-tab "Default")
    (tabspaces-remove-to-default t)
    (tabspaces-include-buffers '("*scratch*"))
    ;; sessions
    (tabspaces-session t)
    (tabspaces-session-auto-restore t)
    :general
    (tyrant-def
     "TAB"    (cons "workspaces" (make-sparse-keymap))
     "TAB 1"  'tab-bar-select-tab
     "TAB 2"  'tab-bar-select-tab
     "TAB 3"  'tab-bar-select-tab
     "TAB 4"  'tab-bar-select-tab
     "TAB 5"  'tab-bar-select-tab
     "TAB 6"  'tab-bar-select-tab
     "TAB 7"  'tab-bar-select-tab
     "TAB 8"  'tab-bar-select-tab

     "TAB C"  'tabspaces-clear-buffers
     "TAB o"  'tabspaces-open-or-create-project-and-workspace
     "TAB d"  'tabspaces-close-workspace
     "TAB s"  'tabspaces-switch-or-create-workspace
     "TAB r"  'tabspaces-remove-current-buffer
     "TAB R"  'tabspaces-remove-selected-buffer
     "TAB x"  'tabspaces-switch-buffer-and-tab
     "TAB b"  'tabspaces-switch-to-buffer))
#+end_src

*** persp-mode
#+begin_src emacs-lisp
  (use-package persp-mode
    :commands (persp-new persp-switch persp-state-save)
    :general
    (tyrant-def
      "TAB" (cons "workspace" (make-sparse-keymap))
      "TAB n" #'persp-next
      "TAB p" #'persp-prev
      "TAB s" #'persp-frame-switch
      "TAB S" #'persp-window-switch
      "TAB r" #'persp-rename
      "TAB c" #'persp-copy
      "TAB C" #'persp-kill
      "TAB z" #'persp-save-and-kill
      "TAB a" #'persp-add-buffer
      "TAB b" #'persp-switch-to-buffer
      "TAB t" #'persp-temporarily-display-buffer
      "TAB i" #'persp-import-buffers
      "TAB I" #'persp-import-win-conf
      "TAB k" #'persp-remove-buffer
      "TAB K" #'persp-kill-buffer
      "TAB w" #'persp-save-state-to-file
      "TAB W" #'persp-save-to-file-by-names
      "TAB l" #'persp-load-state-from-file
      "TAB L" #'persp-load-from-file-by-names

      "TAB x" '((lambda () (interactive) (persp-kill (persp-current-name))) :wk "kill current")
      "TAB m" '(emacy/main-workspace :wk "main"))
    :init
    (defun emacy/main-workspace ()
      "Jump to the dashboard bufer"
      (interactive)
      (persp-switch "main")
      (switch-to-buffer dashboard-buffer-name)
      (dashboard-mode)
      (dashboard-insert-startupify-lists)
      (dashboard-refersh-buffer))
    (setq persp-autokill-buffer-on-remove 'kill-weak
          persp-reset-windows-on-nil-window-conf nil
          persp-nil-hidden t
          persp-remove-buffers-from-nil-persp-behaviour nil
          persp-kill-foreign-buffer-behaviour 'kill
          persp-set-last-persp-for-new-frames t
          persp-switch-to-added-buffer nil)
    :config
    (persp-mode)
    :hook
    (kill-emacs . #'persp-state-save))

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package persp-mode-projectile-bridge
    :after (projectile persp-mode)
    :config
    (persp-mode-projectile-bridge-mode 1))
#+end_src
