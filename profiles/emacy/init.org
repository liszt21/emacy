;-*- eval: (load-file "./lisp/init-dev.el");   -*-
#+TITLE: init.el
#+AUTHOR: lishuzhi
#+STARTUP: content
#+PROPERTY: id emacy-config
#+PROPERTY: header-args :tangle init.el :noweb yes :session init

https://remacs.cc/

* TODO Tasks
** TODO line numbers width change
xxx => xxxx lead to width change
** TODO config packages
*** TODO keyfreq
[[http://blog.binchen.org/posts/how-to-be-extremely-efficient-in-emacs.html]]
** TODO init debug config
** TODO there are no known project in start                  :projectile:
* Header
** early-init.el
#+header: :tangle early-init.el :session early
#+begin_src emacs-lisp
  ;;; early-init.el --- Emacs pre-initialization config -*- lexical-binding: t -*-
  ;;; Commentary:

  ;;; Code:
#+end_src
** init.el
#+begin_src emacs-lisp
  ;;; init.el --- The main init entry for Emacs -*- lexical-binding: t -*-
  ;;; Commentary:

  ;;; Code:
#+end_src

* Basic
** defaults
#+header: :tangle early-init.el :session early
#+begin_src emacs-lisp
  ;; 设置垃圾回收参数
  (setq gc-cons-threshold most-positive-fixnum)
  (setq gc-cons-percentage 0.6)

  ;; 启动早期不加载`package.el'包管理器
  (setq package-enable-at-startup nil)
  ;; 不从包缓存中加载
  (setq package-quickstart nil)

  ;; 禁止展示菜单栏、工具栏和纵向滚动条
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

  ;; 禁止菜单栏、工具栏、滚动条模式，禁止启动屏幕和文件对话框
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-splash-screen t)
  (setq use-file-dialog nil)

  (display-time-mode)
  (toggle-frame-maximized)
  (global-auto-revert-mode)
  (global-display-line-numbers-mode)
#+end_src
** constants
#+header: :tangle early-init.el
#+begin_src emacs-lisp
(defconst windows? (memq system-type '(cygwin windows-nt ms-dos)) "are we on windows")
(defconst macos? (eq system-type 'darwin) "are we on macos")
(defconst linux? (memq system-type '(gnu gnu/linux gnu/kfreebds berkeley-unix)) "are we on linux")
(defconst bsd? (memq system-type '(darwin berkeley-unix gnu/kfreebsd)) "are we on bsd")
(defconst wsl? (and linux? (string-match-p "microsoft" operating-system-release)) "are we on wsl")
#+end_src

** variables
#+begin_src emacs-lisp
  (defvar emacy-directory "~/Emacy")
  (defvar user-local-directory "~/.local")
#+end_src

** load-path
#+begin_src emacs-lisp
  ;; 将lisp目录放到加载路径的前面以加快启动速度
  (let ((dir (locate-user-emacs-file "lisp")))
    (add-to-list 'load-path (file-name-as-directory dir)))

  (defun add-subdirs-to-load-path (dir)
  "Recursive add directories to `load-path'."
  (let ((default-directory (file-name-as-directory dir)))
    (add-to-list 'load-path dir)
    (normal-top-level-add-subdirs-to-load-path)))
  ;;(when windows? (add-subdirs-to-load-path elpaca-repos-directory))
#+end_src
** package manager
*** elpaca
[[https://github.com/progfolio/elpaca][elpaca]]
**** install elpaca 
#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.3)
  ;;(defvar elpaca-directory (expand-file-name "elpaca/" user-local-directory))
  (defvar elpaca-directory (expand-file-name "var/elpaca" (if wsl? user-local-directory user-emacs-directory)))
  (defvar elpaca-builds-directory (expand-file-name "builds" elpaca-directory))
  (defvar elpaca-cache-directory (expand-file-name "var/elpaca/menus" user-emacs-directory))
  (defvar elpaca-repos-directory (expand-file-name "libraries" emacy-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil
                                :files (:defaults (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))

  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
          (kill-buffer buffer)
          (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
        (require 'elpaca)
        (elpaca-generate-autoloads "elpaca" repo)
        (load "./elpaca-autoloads"))
    (add-hook 'after-init-hook #'elpaca-process-queues))

  (defun emacy/elpaca--link-build-files (e)
    "Link E's :files into its builds subdirectory."
    (elpaca--signal e "Linking build files" 'linking)
    (let* ((build-dir (elpaca<-build-dir e))
           (files (elpaca--files e)))
      (when (file-exists-p build-dir) (delete-directory build-dir 'recusrive))
      (make-directory build-dir 'parents)
      (dolist (spec files)
        (when-let ((file   (car spec))
                   ((file-exists-p file))
                   (link   (cdr spec)))
          (make-directory (file-name-directory link) 'parents)
          (condition-case err
             (make-symbolic-link file link 'overwrite)
             (file-already-exists nil)))))
    (elpaca--continue-build e "Build files linked"))

  (when windows? (advice-add 'elpaca--link-build-files :override 'emacy/elpaca--link-build-files))

  (elpaca `(,@elpaca-order))
  (elpaca elpaca-use-package (elpaca-use-package-mode) (setq elpaca-use-package-by-default t))

  (setq elpaca-queue-limit 21)
#+end_src
***** disable package.el
#+begin_src emacs-lisp :tangle early-init.el
  (setq package-enable-at-startup nil)
#+end_src
**** waitting
#+begin_src emacs-lisp
  (elpaca-wait)
#+end_src
** keybindings
*** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :demand t
    :init
    (setq which-key-enable-extended-define-key t)
    :config
    (which-key-mode)
    :custom
    (which-key-side-window-location 'bottom)
    (which-key-sort-order 'which-key-key-order-alpha)
    (which-key-side-window-max-width 0.33)
    (which-key-idle-delay 0.12)
    :diminish which-key-mode)
#+end_src
*** general
#+begin_src emacs-lisp :lexical t
  (use-package general
    :demand t
    :config
    (general-override-mode)
    (general-auto-unbind-keys)
    (general-evil-setup)
    <<general-configs>>)
#+end_src
**** menus
:PROPERTIES:
:HEADER-ARGS: :noweb-ref general-configs
:END:
#+begin_src emacs-lisp :lexical t
  (general-define-key
   :keymaps 'override
   :states '(insert normal visual motion operator hybrid emacs)
   :prefix-map 'emacy-map
   :prefix "SPC"
   :global-prefix "S-SPC")

  (general-create-definer emacy-definer
    :wk-full-keys nil
    :keymaps 'emacy-map)

  (emacy-definer
    "!"   'shell-command
    ":"   'eval-expression
    "."   'repeat
    "z"   '((lambda (local) (interactive "p")
              (unless repeat-mode (repeat-mode))
              (let ((local current-prefix-arg)
                    (current-prefix-arg nil))
                (call-interactively (if local #'text-scale-adjust #'global-text-scale-adjust))))
            :which-key "zoom"))

  (general-create-definer emacy-leader
    :keymaps 'override
    :states '(insert normal hybrid motion visual operator)
    :prefix "SPC m"
    :non-normal-prefix "S-SPC m"
    "" '( :ignore t
          :which-key
          (lambda (arg)
            (cons (cadr (split-string (car arg) " "))
                  (replace-regexp-in-string "-mode$" "" (symbol-name major-mode))))))

  (defmacro create-emacy-menu (name infix-key &rest body)
    "Create a definer named emacy-NAME-definer wrapping emacy-definer.
    Create prefix map: emacy-NAME-map. Prefix bindings in BODY with INFIX-KEY."
    (declare (indent 2))
    (let* ((n (concat "emacy-" name "-definer"))
           (prefix (intern (concat "emacy-" name "-map"))))
      `(progn
         (general-create-definer ,(intern n)
           :wrapping emacy-definer
           :prefix-map (quote ,prefix)
           :infix ,infix-key
           :wk-full-keys nil
           "" '(:ignore t :which-key ,name))
         (,(intern n) ,@body))))
#+end_src
***** applications
#+begin_src emacs-lisp
  (create-emacy-menu "application" "a"
    "p" '(:ignore t "elpaca")
    "pb" 'elpaca-browse
    "pr"  '((lambda () (interactive) (let ((current-prefix-arg (not current-prefix-arg))) (call-interactively #'elpaca-rebuild))) :which-key "rebuild")
    "pm" 'elpaca-manager
    "pl" 'elpaca-log
    "pi" 'elpaca-info
    "pI" '((lambda () (interactive) (info "Elpaca")) :which-key "elpaca-info")
    "ps" 'elpaca-status
    "pt" 'elpaca-try
    "pv" 'elpaca-visit)
#+end_src
***** buffers
#+begin_src emacs-lisp
  (create-emacy-menu "buffer" "b"
    "d"  'kill-current-buffer
    "o" '((lambda () (interactive) (switch-to-buffer nil)) :which-key "other-buffer")
    "p"  'previous-buffer
    "r"  'rename-buffer
    "R"  'revert-buffer
    "M" '((lambda () (interactive) (switch-to-buffer "*Messages*")) :which-key "messages-buffer")
    "n"  'next-buffer
    "s" '((lambda () (interactive) (switch-to-buffer "*scratch*")) :which-key "scratch-buffer")
    "TAB" '((lambda () (interactive) (switch-to-buffer nil)) :which-key "other-buffer"))
#+end_src
***** window
#+begin_src emacs-lisp
  (create-emacy-menu "window" "w"
    "?" 'split-window-vertically
    "=" 'balance-windows
    "/" 'split-window-horizontally
    "O" 'delete-other-windows
    "X" '((lambda () (interactive) (call-interactively #'other-window) (kill-buffer-and-window)) :which-key "kill-other-buffer-and-window")
    "d" 'delete-window
    "h" 'windmove-left
    "j" 'windmove-down
    "k" 'windmove-up
    "l" 'windmove-right
    "o" 'other-window
    "t" '((lambda () (interactive) "toggle window dedication" (set-window-dedicated-p (selected-window) (not (window-dedicated-p)))) :which-key "toggle window dedication")
    "x" 'kill-buffer-and-window)
#+end_src
***** file
#+begin_src emacs-lisp
  (create-emacy-menu "file" "f"
    "d"   '((lambda (&optional arg) (interactive "P") (let ((buffer (when arg (current-buffer)))) (diff-buffer-with-file buffer))) :which-key "diff-with-file")
    "e"   '(:ignore t :which-key "edit")
    "ed"  '((lambda () (interactive) (find-file-existing literate-file) (widen)) :which-key "dotfile")
    "eR"  '((lambda () (interactive) (load-file user-init-file)) :which-key "reload-init.el")
    "et"  '((lambda ()
              (interactive)
              (save-restriction
                (widen)
                (check-parens)
                (org-babel-tangle-file literate-file))
              (load-file "~/.emacs.d/init.el"))
            :which-key "tangle/reload-init.el")
    "l"   '((lambda (&optional arg) (interactive "P") (call-interactively (if arg #'find-library-other-window #'find-library))) :which-key "+find-library")
    "p"   'find-function-at-point
    "P"   'find-function
    "R"   'rename-file-and-buffer
    "s"   'save-buffer
    "v"   'find-variable-at-point
    "V"   'find-variable)
#+end_src
***** frame
#+begin_src emacs-lisp
(create-emacy-menu "frame" "F"
  "D" 'delete-other-frames
  "F" 'select-frame-by-name
  "O" 'other-frame-prefix
  "c" '(:ingore t :which-key "color")
  "cb" 'set-background-color
  "cc" 'set-cursor-color
  "cf" 'set-foreground-color
  "f" 'set-frame-font
  "m" 'make-frame-on-monitor
  "n" 'next-window-any-frame
  "o" 'other-frame
  "p" 'previous-window-any-frame
  "r" 'set-frame-name)
#+end_src
***** toggle
#+begin_src emacs-lisp
(create-emacy-menu "toggle" "T"
  "d" '(:ignore t :which-key "debug")
  "de" 'toggle-debug-on-error
  "dq" 'toggle-debug-on-quit
  "s" '(:ignore t :which-key "spelling"))
#+end_src
***** quit
#+begin_src emacs-lisp
(create-emacy-menu "quit" "q"
  "q" 'save-buffers-kill-emacs
  "r" 'restart-emacs
  "Q" 'kill-emacs)
#+end_src
**** waitting
#+begin_src emacs-lisp
  (elpaca-wait)
#+end_src
*** hydra
#+begin_src emacs-lisp
  (use-package hydra
    :demand t
    :config
    <<hydra-configs>>)
  (use-package use-package-hydra :ensure t)
#+end_src
**** configs
:PROPERTIES:
:HEADER-ARGS: :noweb-ref hydra-configs
:END:
#+begin_src emacs-lisp
  (defun hydra-move-split-left (arg)
    "Move window split left."
    (interactive "p")
    (if (let* ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (shrink-window-horizontally arg)
      (enlarge-window-horizontally arg)))

  (defun hydra-move-split-right (arg)
    "Move window split right."
    (interactive "p")
    (if (let* ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (enlarge-window-horizontally arg)
      (shrink-window-horizontally arg)))

  (defun hydra-move-split-up (arg)
    "Move window split up."
    (interactive "p")
    (if (let* ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (enlarge-window arg)
      (shrink-window arg)))

  (defun hydra-move-split-down (arg)
    "Move window split down."
    (interactive "p")
    (if (let* ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (shrink-window arg)
      (enlarge-window arg)))

  (defhydra emacy-hydra-window ()
    "
  Movement^^   ^Split^         ^Switch^     ^Resize^
  -----------------------------------------------------
  _h_ Left     _v_ertical                   _q_ X left
  _j_ Down     _x_ horizontal  _f_ind files _w_ X Down
  _k_ Top      _z_ undo        _a_ce 1      _e_ X Top
  _l_ Right    _Z_ reset       _s_wap       _r_ X Right
  _F_ollow     _D_elete Other  _S_ave       max_i_mize
  _SPC_ cancel _o_nly this     _d_elete
  "
    ("h" windmove-left)
    ("j" windmove-down)
    ("k" windmove-up)
    ("l" windmove-right)
    ("q" hydra-move-split-left)
    ("w" hydra-move-split-down)
    ("e" hydra-move-split-up)
    ("r" hydra-move-split-right)
    ("f" counsel-find-file)
    ("F" follow-mode)
    ("a" (ace-window 1))
    ("v" (lambda () (interactive) (split-window-right) (windmove-right)))
    ("x" (lambda () (interactive) (split-window-below) (windmove-down)))
    ("s" (ace-window 4))
    ("S" save-buffer)
    ("d" delete-window)
    ("D" (ace-window 16))
    ("o" delete-other-windows)
    ("i" ace-delete-other-windows)
    ("z" (progn (winner-undo) (setq this-command 'winner-undo)))
    ("Z" winner-redo)
    ("SPC" nil))

  (emacy-definer "w ." 'emacy-hydra-window/body)

  (defhydra hydra-dired (:hint nil :color pink)
    "
  _+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
  _C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
  _D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
  _R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
  _Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
  _S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
  _r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
  _z_ compress-file  _A_ find regexp
  _Z_ compress       _Q_ repl regexp

  T - tag prefix
  "
    ("\\" dired-do-ispell)
    ("(" dired-hide-details-mode)
    (")" dired-omit-mode)
    ("+" dired-create-directory)
    ("=" diredp-ediff)         ;; smart diff
    ("?" dired-summary)
    ("$" diredp-hide-subdir-nomove)
    ("A" dired-do-find-regexp)
    ("C" dired-do-copy)        ;; Copy all marked files
    ("D" dired-do-delete)
    ("E" dired-mark-extension)
    ("e" dired-ediff-files)
    ("F" dired-do-find-marked-files)
    ("G" dired-do-chgrp)
    ("g" revert-buffer)        ;; read all directories again (refresh)
    ("i" dired-maybe-insert-subdir)
    ("l" dired-do-redisplay)   ;; relist the marked or singel directory
    ("M" dired-do-chmod)
    ("m" dired-mark)
    ("O" dired-display-file)
    ("o" dired-find-file-other-window)
    ("Q" dired-do-find-regexp-and-replace)
    ("R" dired-do-rename)
    ("r" dired-do-rsynch)
    ("S" dired-do-symlink)
    ("s" dired-sort-toggle-or-edit)
    ("t" dired-toggle-marks)
    ("U" dired-unmark-all-marks)
    ("u" dired-unmark)
    ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
    ("w" dired-kill-subdir)
    ("Y" dired-do-relsymlink)
    ("z" diredp-compress-this-file)
    ("Z" dired-do-compress)
    ("q" nil)
    ("." nil :color blue))

  ;;(define-key dired-mode-map "." 'hydra-dired/body)
  (general-define-key
    :keymaps 'override
    :states '(normal visual motion emacs)
    :prefix-map 'dired-mode-map
    "." 'hydra-dired/body)
#+end_src
*** evil
#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :preface (setq evil-want-keybinding nil)
    :custom
    (evil-want-integration t) ;; This is optional since it's already set to t by default.
    (evil-want-C-i-jump t)
    (evil-shift-width 2 "same behavior for vim")
    (evil-complete-all-buffers nil)
    :config
    (defun +evil-kill-minibuffer () (interactive)
      (when (windowp (active-minibuffer-window))
        (evil-ex-search-exit)))

    (add-hook 'mouse-leave-buffer-hook #'+evil-kill-minibuffer)
    (evil-mode))

  (use-package evil-collection
    :after (evil)
    :config (evil-collection-init)
    :custom
    (evil-collection-elpaca-want-g-filters nil)
    (evil-collection-setup-minibuffer t "Add evil bindings to minibuffer")
    (evil-collection-company-use-tng t))

  (use-package evil-nerd-commenter
    :after (general)
    :commands (evilnc-comment-operator
               evilnc-inner-comment
               evilnc-outer-commenter)
    ;; :custom (general-define-key :state '(normal visual) "gc" 'evilnc-comment-operator)
    :general
    ([remap comment-line] #'evilnc-comment-or-uncomment-lines
     :keymaps 'prog-mode-map
     :state '(normal visual) "gc" 'evilnc-comment-operator))

  (use-package evil-matchit :config (global-evil-matchit-mode 1))
  (use-package evil-lion :elpaca (evil-lion :host github :repo "edkolev/evil-lion" :files ("*" (:exclude ".git"))) :config (evil-lion-mode))

  (use-package evil-surround :config (global-evil-surround-mode 1))
  (use-package evil-embrace
    :commands embrace-add-pair embrace-add-pair-regexp
    :after evil-surround
    :init (evil-embrace-enable-evil-surround-integration)
    :config (setq evil-embrace-show-help nil)
    :hook (org-mode . embrace-org-mode-hook)
    :hook (emace-lisp-mode . embrace-emacs-lisp-mode-hook))

  (use-package evil-escape
    :commands evil-escape
    :init
    (setq evil-escape-excluded-states '(normal visual multiedit emacs motion)
          evil-escape-excluded-major-modes '(treemacs-mode vterm-mode))
    (evil-define-key '(insert replace visual operator) 'global "\C-g" #'evil-escape))

  (use-package evil-exchange :config (evil-exchange-install))

  (use-package evil-traces :after evil :config (evil-traces-use-diff-faces) (evil-traces-mode))
#+end_src
** profile
#+begin_src emacs-lisp
(defun enable-profiler ()
  (add-hook 'elpaca-after-init-hook
    (lambda ()
      (message "Emacs loaded in %s with %d garbage collections."
               (format "%.2f seconds"
                       (float-time (time-subtract (current-time) before-init-time)))
               gcs-done)))

  (profiler-start 'cpu+mem)
  (add-hook 'elpaca-after-init-hook (lambda () (profiler-stop) (profiler-report))))

(when (member "--with-profiler" command-line-args)
  (enable-profiler)
  (remove "--with-profiler" command-line-args))
#+end_src
** config tree
#+begin_src emacs-lisp
  (use-package no-littering
               :config
               (setq suctom-file (no-littering-expand-etc-file-name "custom.el")))
#+end_src
*** TODO eln-cache
#+header: :tangle no
#+begin_src emacs-lisp
  (when (fboundp 'startup-redirect-eln-cache)
    (startup-redirect-eln-cache
     (convert-standard-filename
        (expand-file-name  "var/eln-cache/" user-emacs-directory))))
#+end_src
** layout
*** TODO shackle 
#+begin_src emacs-lisp
  (use-package shackle)
#+end_src
*** persp-mode
#+begin_src emacs-lisp
  (use-package persp-mode
    :hook (window-setup-hook . (lambda () (persp-mode 1)))
    :config (setq wg-morph-on nil
                  persp-autokill-buffer-on-remove 'kill-weak))
#+end_src
* Completion
*** vertico
#+begin_src emacs-lisp
  (use-package vertico :init (vertico-mode))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (savehist-mode)

  ;; A few more useful configurations...
  (use-package emacs
    :elpaca nil
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" "" crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq display-line-numbers-type 'relative)
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src
*** orderless
#+begin_src emacs-lisp
  ;; support Pinyin first character match for orderless, avy etc.
  (use-package pinyinlib :ensure t)

  (use-package orderless
    :ensure t
    :init
    (setq completion-styles '(orderless partial-completion basic))
    (setq orderless-component-separator "[ &]") ; & is for company because space will break completion
    (setq completion-category-defaults nil)
    (setq completion-category-overrides nil)
    :config
    (defun completion--regex-pinyin (str) (orderless-regexp (pinyinlib-build-regexp-string str)))
    (add-to-list 'orderless-matching-styles 'completion--regex-pinyin))
#+end_src

*** marginalia
#+begin_src emacs-lisp
  ;; minibuffer helpful annotations
  (use-package marginalia
    :ensure t
    :hook (elpaca-after-init . marginalia-mode)
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+end_src

*** consult
#+begin_src emacs-lisp
  (use-package consult
  :ensure t
  :after org
  :bind (([remap goto-line]                     . consult-goto-line)
         ([remap isearch-forward]               . consult-line-symbol-at-point) ; my-consult-ripgrep-or-line
         ([remap switch-to-buffer]              . consult-buffer)
         ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
         ([remap switch-to-buffer-other-frame]  . consult-buffer-other-frame)
         ([remap yank-pop]                      . consult-yank-pop)
         ([remap apropos]                       . consult-apropos)
         ([remap bookmark-jump]                 . consult-bookmark)
         ([remap goto-line]                     . consult-goto-line)
         ([remap imenu]                         . consult-imenu)
         ([remap multi-occur]                   . consult-multi-occur)
         ([remap recentf-open-files]            . consult-recent-file)
         ("C-x j"                               . consult-mark)
         ("C-c g"                               . consult-ripgrep)
         ("C-c f"                               . consult-find)
         ("\e\ef"                               . consult-locate) ; need to enable locate first
         ("C-c n h"                             . my/consult-find-org-headings)
         :map org-mode-map
         ("C-c C-j"                             . consult-org-heading)
         :map minibuffer-local-map
         ("C-r"                                 . consult-history)
         :map isearch-mode-map
         ("C-;"                                 . consult-line)
         :map prog-mode-map
         ("C-c C-j"                             . consult-outline)
         )
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; MacOS locate doesn't support `--ignore-case --existing' args.
  (setq consult-locate-args (pcase system-type
                              ('gnu/linux "locate --ignore-case --existing --regex")
                              ('darwin "mdfind -name")))
  :config
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
   :preview-key (kbd "M-."))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  (autoload 'projectile-project-root "projectile")
  (setq consult-project-root-function #'projectile-project-root)

  ;; Use `consult-ripgrep' instead of `consult-line' in large buffers
  (defun consult-line-symbol-at-point ()
    "Consult line the synbol where the point is"
    (interactive)
    (consult-line (thing-at-point 'symbol))))
#+end_src

*** embark
#+begin_src emacs-lisp
  (use-package embark
    :demand t
    :ensure t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** TODO cape
#+begin_src emacs-lisp
  (use-package cape
  :ensure t
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-keyword)  ; programming language keyword
  (add-to-list 'completion-at-point-functions #'cape-ispell)
  (add-to-list 'completion-at-point-functions #'cape-dict)
  (add-to-list 'completion-at-point-functions #'cape-symbol)   ; elisp symbol
  (add-to-list 'completion-at-point-functions #'cape-line)

  :config
  (setq cape-dict-file (expand-file-name "etc/hunspell_dict.txt" user-emacs-directory))

  ;; for Eshell:
  ;; ===========
  ;; Silence the pcomplete capf, no errors or messages!
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

  ;; and behaves as a pure `completion-at-point-function'.
  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)
  )
#+end_src

* UI
** Misc
#+begin_src emacs-lisp
  ;; 禁用一些GUI特性
  (setq use-dialog-box nil)               ; 鼠标操作不使用对话框
  ;;(setq inhibit-default-init t)           ; 不加载 `default' 库
  ;;(setq inhibit-startup-screen t)         ; 不加载启动画面
  ;;(setq inhibit-startup-message t)        ; 不加载启动消息
  ;;(setq inhibit-startup-buffer-menu t)    ; 不显示缓冲区列表

  ;; 设置自动折行宽度为80个字符，默认值为70
  (setq-default fill-column 80)

  ;; 设置大文件阈值为100MB，默认10MB
  (setq large-file-warning-threshold 100000000)

  ;; 以16进制显示字节数
  (setq display-raw-bytes-as-hex t)
  ;; 有输入时禁止 `fontification' 相关的函数钩子，能让滚动更顺滑
  (setq redisplay-skip-fontification-on-input t)

  ;; 禁止响铃
  (setq ring-bell-function 'ignore)

  ;; 在光标处而非鼠标所在位置粘贴
  (setq mouse-yank-at-point t)

  ;; 拷贝粘贴设置
  (setq select-enable-primary nil)        ; 选择文字时不拷贝
  (setq select-enable-clipboard t)        ; 拷贝时使用剪贴板

  ;; 鼠标滚动设置
  (setq scroll-step 2)
  (setq scroll-margin 2)
  (setq hscroll-step 2)
  (setq hscroll-margin 2)
  (setq scroll-conservatively 101)
  (setq scroll-up-aggressively 0.01)
  (setq scroll-down-aggressively 0.01)
  (setq scroll-preserve-screen-position 'always)

  ;; 对于高的行禁止自动垂直滚动
  (setq auto-window-vscroll nil)

  ;; 设置新分屏打开的位置的阈值
  (setq split-width-threshold (assoc-default 'width default-frame-alist))
  (setq split-height-threshold nil)

  ;; TAB键设置，在Emacs里不使用TAB键，所有的TAB默认为4个空格
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  ;; yes或no提示设置，通过下面这个函数设置当缓冲区名字匹配到预设的字符串时自动回答yes
  (setq original-y-or-n-p 'y-or-n-p)
  (defalias 'original-y-or-n-p (symbol-function 'y-or-n-p))
  (defun default-yes-sometimes (prompt)
    "automatically say y when buffer name match following string"
    (if (or
	     (string-match "has a running process" prompt)
	     (string-match "does not exist; create" prompt)
	     (string-match "modified; kill anyway" prompt)
	     (string-match "Delete buffer using" prompt)
	     (string-match "Kill buffer of" prompt)
	     (string-match "still connected.  Kill it?" prompt)
	     (string-match "Shutdown the client's kernel" prompt)
	     (string-match "kill them and exit anyway" prompt)
	     (string-match "Revert buffer from file" prompt)
	     (string-match "Kill Dired buffer of" prompt)
	     (string-match "delete buffer using" prompt)
	 (string-match "Kill all pass entry" prompt)
	 (string-match "for all cursors" prompt)
	     (string-match "Do you want edit the entry" prompt))
	    t
      (original-y-or-n-p prompt)))
  (defalias 'yes-or-no-p 'default-yes-sometimes)
  (defalias 'y-or-n-p 'default-yes-sometimes)

  ;; 设置剪贴板历史长度300，默认为60
  (setq kill-ring-max 200)

  ;; 在剪贴板里不存储重复内容
  (setq kill-do-not-save-duplicates t)

  ;; 设置位置记录长度为6，默认为16
  ;; 可以使用 `counsel-mark-ring' or `consult-mark' (C-x j) 来访问光标位置记录
  ;; 使用 C-x C-SPC 执行 `pop-global-mark' 直接跳转到上一个全局位置处
  ;; 使用 C-u C-SPC 跳转到本地位置处
  (setq mark-ring-max 6)
  (setq global-mark-ring-max 6)

  ;; 设置 emacs-lisp 的限制
  (setq max-lisp-eval-depth 10000)        ; 默认值为 800
  (setq max-specpdl-size 10000)           ; 默认值为 1600

  ;; 启用 `list-timers', `list-threads' 这两个命令
  (put 'list-timers 'disabled nil)
  (put 'list-threads 'disabled nil)

  ;; 在命令行里支持鼠标
  (xterm-mouse-mode 1)

  ;; 退出Emacs时进行确认
  ;;(setq confirm-kill-emacs 'y-or-n-p)

  ;; 在模式栏上显示当前光标的列号
  (column-number-mode t)

  ;; 配置所有的编码为UTF-8，参考：
  ;; https://thraxys.wordpress.com/2016/01/13/utf-8-in-emacs-everywhere-forever/
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-language-environment 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)
  (when (display-graphic-p) (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src
** Color
#+begin_src emacs-lisp
  (use-package rainbow-mode)
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package ef-themes
    :ensure t
    :bind ("C-c t" . ef-themes-toggle)
    :init
    ;; set two specific themes and switch between them
    (setq ef-themes-to-toggle '(ef-summer ef-winter))
    ;; set org headings and function syntax
    (setq ef-themes-headings ; read the manual's entry or the doc string
        '((0 . (variable-pitch light 1.2))
          (1 . (variable-pitch light 1.1))
          (2 . (variable-pitch regular 1.0))
          (3 . (variable-pitch regular 1.0))
          (4 . (variable-pitch regular 1.0))
          (5 . (variable-pitch 1.0)) ; absence of weight means `bold'
          (6 . (variable-pitch 1.0))
          (7 . (variable-pitch 1.0))
          (t . (variable-pitch 1.0))))
    (setq ef-themes-region '(intense no-extend neutral))
    ;; Disable all other themes to avoid awkward blending:
    (mapc #'disable-theme custom-enabled-themes)
    (ef-themes-load-random 'dark)

    :config
    ;; auto change theme, aligning with system themes.
    (defun my/apply-theme (appearance)
      "Load theme, taking current system APPEARANCE into consideration."
      (mapc #'disable-theme custom-enabled-themes)
      (pcase appearance
        ('light (if (display-graphic-p) (ef-themes-load-random 'light) (ef-themes-load-random 'dark)))
        ('dark (ef-themes-load-random 'dark))))

    (when macos? (add-hook 'ns-system-appearance-change-functions #'my/apply-theme)))
#+end_src

** Fonts
#+begin_src emacs-lisp
  (use-package fontaine
    :ensure t
    :when (display-graphic-p)
    ;; :hook (kill-emacs . fontaine-store-latest-preset)
    :config
    (setq fontaine-latest-state-file (locate-user-emacs-file "etc/fontaine-latest-state.eld"))
    (setq fontaine-presets
      '((regular
         :default-height 140
         :default-weight regular
         :fixed-pitch-height 1.0
         :variable-pitch-height 1.0)
        (large
         :default-height 180
         :default-weight normal
         :fixed-pitch-height 1.0
         :variable-pitch-height 1.05)
        (t
         :default-family "Fira Code"
         :fixed-pitch-family "Fira Code"
         :variable-pitch-family "Fira Code"
         :italic-family "Fira Code"
         :variable-pitch-weight normal
         :bold-weight normal
         :italic-slant italic
         :line-spacing 0.1)))
    ;; (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))
    (fontaine-set-preset 'regular)

    ;; set emoji font
    (set-fontset-font t
     (if (version< emacs-version "28.1") '(#x1f300 . #x1fad0) 'emoji)
     (cond
      ((member "Noto Emoji" (font-family-list)) "Noto Emoji")
      ((member "Symbola" (font-family-list)) "Symbola")
      ((member "Apple Color Emoji" (font-family-list)) "Apple Color Emoji")
      ((member "Noto Color Emoji" (font-family-list)) "Noto Color Emoji")
      ((member "Segoe UI Emoji" (font-family-list)) "Segoe UI Emoji")))

    ;; set Chinese font
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font
       (frame-parameter nil 'font)
       charset
       (font-spec :family
          (cond
           ((eq system-type 'darwin)
            (cond
             ((member "Sarasa Mono SC Nerd" (font-family-list)) "Sarasa Mono SC Nerd")
             ((member "PingFang SC" (font-family-list)) "PingFang SC")
             ((member "WenQuanYi Zen Hei" (font-family-list)) "WenQuanYi Zen Hei")
             ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")))
           ((eq system-type 'gnu/linux)
            (cond
             ((member "LXGW Wenkai Mono" (font-family-list)) "LXGW Wenkai Mono")
             ((member "WenQuanYi Micro Hei" (font-family-list)) "WenQuanYi Micro Hei")
             ((member "WenQuanYi Zen Hei" (font-family-list)) "WenQuanYi Zen Hei")
             ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")))
           (t
            (cond
             ((member "Sarasa Mono SC Nerd" (font-family-list)) "Sarasa Mono SC Nerd")
             ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")))))))

    ;; set Chinese font scale
    (setq face-font-rescale-alist `(
                    ("Symbola"             . 1.3)
                    ("Microsoft YaHei"     . 1.2)
                    ("WenQuanYi Zen Hei"   . 1.2)
                    ("Sarasa Mono SC Nerd" . 1.2)
                    ("PingFang SC"         . 1.16)
                    ("Lantinghei SC"       . 1.16)
                    ("Kaiti SC"            . 1.16)
                    ("Yuanti SC"           . 1.16)
                    ("Apple Color Emoji"   . 0.91))))
  ;; TODO
  (use-package fontify-face)
#+end_src
** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (elpaca-after-init . doom-modeline-mode)
    :custom
    (doom-modeline-irc nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-gnus nil)
    (doom-modeline-github nil)
    (doom-modeline-buffer-file-name-style 'truncate-upto-root) ; : auto
    (doom-modeline-persp-name nil)
    (doom-modeline-unicode-fallback t)
    (doom-modeline-enable-word-count nil))

  ;; [[https://github.com/tarsius/minions][minions]] 插件能让模式栏变得清爽，将次要模式隐藏起来。
  (use-package minions
    :ensure t
    :hook (elpaca-after-init . minions-mode))

  (use-package keycast
    :ensure t
    :hook (elpaca-after-init . keycast-mode)
    ;; :custom-face
    ;; (keycast-key ((t (:background "#0030b4" :weight bold))))
    ;; (keycast-command ((t (:foreground "#0030b4" :weight bold))))
    :config
    ;; set for doom-modeline support
    ;; With the latest change 72d9add, mode-line-keycast needs to be modified to keycast-mode-line.
    (define-minor-mode keycast-mode
      "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
      :global t
      (if keycast-mode
      (progn
    (add-hook 'pre-command-hook 'keycast--update t)
    (add-to-list 'global-mode-string '("" keycast-mode-line "  ")))
    (remove-hook 'pre-command-hook 'keycast--update)
    (setq global-mode-string (delete '("" keycast-mode-line "  ") global-mode-string))))

    (dolist (input '(self-insert-command org-self-insert-command))
      (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

    (dolist (event '(mouse-event-p mouse-movement-p mwheel-scroll))
      (add-to-list 'keycast-substitute-alist `(,event nil)))

    (setq keycast-log-format "%-20K%C\n")
    (setq keycast-log-frame-alist '((minibuffer . nil)))
    (setq keycast-log-newest-first t))
#+end_src
** Window
#+begin_src emacs-lisp
  (use-package ace-window :hook (elpaca-after-init . winner-mode))
#+end_src
* Org
** Misc
#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :ensure t
    :hook (org-mode . org-auto-tangle-mode)
    :config (setq org-auto-tangle-default t))
#+end_src
** org-config
#+begin_src emacs-lisp
  (setq org-directory  "~/Notes"
        org-archive-location (concat org-directory "/archive/%s::")
        org-contacts-files (list (concat org-directory "/archive/contacts.org"))
        org-agenda-files (list org-directory)
        deft-directory org-directory
        org-roam-directory org-directory
        org-brain-path org-directory
        org-roam-file-exclude-regexp ".*/bak/.*"
        org-brain-visualize-default-choices 'all
        rmh-elfeed-org-files (list (concat org-directory "/feeds.org")))

  (setq org-fontify-whole-heading-line t
        org-fontify-quote-and-verse-blocks t
        org-hide-macro-markers t
        org-startup-indented t
        org-adapt-indentation t
        org-startup-with-inline-images t
        org-startup-with-latex-preview t)

  (setq deft-recursive t
        deft-recursive-ignore-dir-regexp (rx (or "." ".." "logseq") eol))

  (setq org-agenda-archives-mode t)
  (setq org-export-select-tags '("Publish" "Public" "export")
        org-publish-project-alist
        '(("content"
           :base-directory "~/Notes/content"
           :publishing-directory "~/Notes/publish"
           ;; :publishing-function (org-org-publish-to-org org-md-publish-to-md)
           :publishing-function org-org-publish-to-org
           :select-tags ("Publish" "Public" "Export" "export" "publish" "public")
           :exclude-tags ("Private" "Secret" "noexport")
           :recursive t
           :with-broken-links t
           :with-toc nil)))

  (setq org-log-done 'time)
  ;; (setq org-priority-lowest ?E)
  (setq org-contacts-icon-use-gravatar nil)
  (setq org-superstar-headline-bullets-list '("☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷"))
  (setq org-todo-keywords
        '((sequence "NEXT(n)" "TODO(t)" "PEND(p)" "WILL(w@/!)" "|" "DONE(d)" "QUIT(q@)")
          (sequence "[-](N)" "[ ](T)" "[:](P)" "[?](W)" "|" "[X](D)" "[Q](Q)")))
  (setq org-todo-keyword-faces
        '(("TODO" :foreground "orange"       :weight bold)
          ("[ ]"  :foreground "orange"       :weight bold)
          ("NEXT" :foreground "yellow"       :weight bold)
          ("[-]"  :foreground "yellow"       :weight bold)
          ("PEND" :foreground "pink"         :weight bold)
          ("[:]"  :foreground "pink"         :weight bold)
          ("WILL" :foreground "purple"       :weight bold)
          ("[?]"  :foreground "purple"       :weight bold)
          ("DONE" :foreground "forest green" :weight bold)
          ("[X]"  :foreground "forest green" :weight bold)
          ("QUIT" :foreground "grey"         :weight bold)
          ("[Q]"  :foreground "grey"         :weight bold)))

  (use-package org-contrib)
#+end_src
** org-modern
#+begin_src emacs-lisp
  (use-package org-modern
    :ensure t
    :hook (elpaca-after-init . (lambda () (setq org-modern-hide-stars 'leading) (global-org-modern-mode t)))
    :config
    ;; 标题行型号字符
    (setq org-modern-star ["☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷"])
    ;; 额外的行间距，0.1表示10%，1表示1px
    (setq-default line-spacing 0.1)
    ;; tag边框宽度，还可以设置为 `auto' 即自动计算
    (setq org-modern-label-border 1)
    ;; 设置表格竖线宽度，默认为3
    (setq org-modern-table-vertical 2)
    ;; 设置表格横线为0，默认为0.1
    (setq org-modern-table-horizontal 0)
    ;; 复选框美化
    (setq org-modern-checkbox
          '((?X . #("▢✓" 0 2 (composition ((2)))))
            (?- . #("▢–" 0 2 (composition ((2)))))
            (?\s . #("▢" 0 1 (composition ((1)))))))
    ;; 列表符号美化
    (setq org-modern-list
          '((?- . "•")
            (?+ . "◦")
            (?* . "▹")))
    ;; 代码块左边加上一条竖边线（需要Org mode顶头，如果启用了 `visual-fill-column-mode' 会很难看）
    (setq org-modern-block-fringe t)
    ;; 代码块类型美化，我们使用了 `prettify-symbols-mode'
    (setq org-modern-block-name nil)
    ;; #+关键字美化，我们使用了 `prettify-symbols-mode'
    (setq org-modern-keyword nil))
#+end_src
** org-appear
#+begin_src emacs-lisp
  (use-package org-appear
   :ensure t
   :hook (org-mode . org-appear-mode)
   :config
   (setq org-appear-autolinks t)
   (setq org-appear-autosubmarkers t)
   (setq org-appear-autoentities t)
   (setq org-appear-autokeywords t)
   (setq org-appear-inside-latex t)) 
#+end_src

* IDE
** base
#+begin_src emacs-lisp
  (use-package rainbow-delimiters :hook (prog-mode . rainbow-delimiters-mode))

  ;;(use-package citre
  ;;  :defer t)
#+end_src
** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :general
    (emacy-definer
      "p!" 'projectile-run-shell-command-in-root
      "p%" 'projectile-replace-regexp
      "pa" 'projectile-add-known-project
      "pp" 'projectile-switch-project
      "p&" 'projectile-run-async-shell-command-in-root
      "pA" 'projectile-toggle-between-implementation-and-test
      "pbn" 'projectile-next-project-buffer
      "pbp" 'projectile-previous-project-buffer
      "pc" 'projectile-compile-project
      "pD" 'projectile-dired
      "pe" 'projectile-edit-dir-locals
      "pg" 'projectile-find-tag
      "pG" 'projectile-regenerate-tags
      "pI" 'projectile-invalidate-cache
      "pk" 'projectile-kill-buffers
      "pR" 'projectile-replace
      "ps" 'projectile-save-project-buffers
      "pT" 'projectile-test-project
      "pv" 'projectile-vc))
#+end_src
** lsp-bridge
#+begin_src emacs-lisp
  (use-package posframe)
  (use-package yasnippet :config (yas-global-mode 1))
  (use-package lsp-bridge
    :elpaca (lsp-bridge :host github :repo "manateelazycat/lsp-bridge" :files ("*" (:exclude ".git")))
    :config (global-lsp-bridge-mode)
    (evil-set-initial-state 'lsp-bridge-ref-mode 'emacs))
#+end_src
** treesit
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
          (c . ("https://github.com/tree-sitter/tree-sitter-c"))
          (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
          (css . ("https://github.com/tree-sitter/tree-sitter-css"))
          (cmake . ("https://github.com/uyha/tree-sitter-cmake"))
          (csharp     . ("https://github.com/tree-sitter/tree-sitter-c-sharp.git"))
          (dockerfile . ("https://github.com/camdencheek/tree-sitter-dockerfile"))
          (elisp . ("https://github.com/Wilfred/tree-sitter-elisp"))
          (go . ("https://github.com/tree-sitter/tree-sitter-go"))
          (gomod      . ("https://github.com/camdencheek/tree-sitter-go-mod.git"))
          (html . ("https://github.com/tree-sitter/tree-sitter-html"))
          (java       . ("https://github.com/tree-sitter/tree-sitter-java.git"))
          (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
          (json . ("https://github.com/tree-sitter/tree-sitter-json"))
          (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
          (make . ("https://github.com/alemuller/tree-sitter-make"))
          (markdown . ("https://github.com/MDeiml/tree-sitter-markdown" nil "tree-sitter-markdown/src"))
          (ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml" nil "ocaml/src"))
          (org . ("https://github.com/milisims/tree-sitter-org"))
          (python . ("https://github.com/tree-sitter/tree-sitter-python"))
          (php . ("https://github.com/tree-sitter/tree-sitter-php"))
          (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "typescript/src"))
          (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "tsx/src"))
          (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
          (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
          (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
          (vue . ("https://github.com/merico-dev/tree-sitter-vue"))
          (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))
          (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
          (zig . ("https://github.com/GrayJack/tree-sitter-zig"))))

  (setq major-mode-remap-alist
        '((c-mode          . c-ts-mode)
          (c++-mode        . c++-ts-mode)
          (cmake-mode      . cmake-ts-mode)
          (conf-toml-mode  . toml-ts-mode)
          (css-mode        . css-ts-mode)
          (js-mode         . js-ts-mode)
          (js-json-mode    . json-ts-mode)
          (python-mode     . python-ts-mode)
          (sh-mode         . bash-ts-mode)
          (typescript-mode . typescript-ts-mode)))

  (add-hook 'emacs-lisp-mode-hook #'(lambda () (treesit-parser-create 'elisp)))
  (setq treesit-extra-load-path (list (expand-file-name "var/treesit" user-emacs-directory)))

  (use-package treesit-auto
    :config
    (global-treesit-auto-mode))
#+end_src
** langs
*** web-development
#+begin_src emacs-lisp
  (use-package css-mode
    :elpaca nil
    :init (setq css-indent-offset 2))

  (use-package scss-mode :init (setq scss-compile-at-save nil))

  (unless (fboundp 'less-css-mode) (use-package less-css-mode))

  (unless (fboundp 'js-json-mode) (use-package json-mode))

  (use-package js2-mode
    :mode (("\\.js\\'" . js2-mode)
           ("\\.jsx\\'" . js2-jsx-mode))
    :interpreter (("node" . js2-mode)
                  ("node" . js2-jsx-mode))
    :hook ((js2-mode . js2-imenu-extras-mode)
           (js2-mode . js2-highlight-unused-variables-mode)))

  (use-package prettier
    :diminish
    :hook ((js-mode js2-mode css-mode sgml-mode web-mode) . prettier-mode)
    :init (setq prettier-pre-warm 'none))

  (use-package typescript-mode :mode ("\\.ts[x]\\'" . typescript-mode))

  ;; Major mode for editing web templates
  (use-package web-mode
    :mode "\\.\\(phtml\\|php\\|[gj]sp\\|as[cp]x\\|erb\\|djhtml\\|html?\\|hbs\\|ejs\\|jade\\|swig\\|tm?pl\\|vue\\)$"
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2))

  ;; Adds node_modules/.bin directory to `exec_path'
  (use-package add-node-modules-path :hook ((web-mode js-mode js2-mode) . add-node-modules-path))

  (use-package restclient
    :mode ("\\.http\\'" . restclient-mode)
    :config
    (use-package restclient-test
      :diminish
      :hook (restclient-mode . restclient-test-mode)))
#+end_src
** shell
#+begin_src emacs-lisp
  (use-package eshell
    :elpaca nil
    :ensure nil
    :functions eshell/alias
    :hook ((eshell-mode . (lambda () (term-mode-common-init) (visual-line-mode 1))))
    :config
    (defun term-mode-common-init ()
      (setq-local scroll-margin 0)
      (setq-local truncate-lines t))

    (defalias 'eshell/vi 'find-file)
    (defalias 'eshell/vim 'find-file)

    (defun eshell/bat (file)
      "cat FILE with syntax highlight."
      (with-temp-buffer
        (insert-file-contents file)
        (let ((buffer-file-name file))
          (delay-mode-hooks
            (set-auto-mode)
            (font-lock-ensure)))
        (buffer-string)))
    (defalias 'eshell/cat 'eshell/bat)

    ;; 交互式进入目录
    (defun eshell/z ()
      "cd to directory with completion."
      (let ((dir (completing-read "Directory: " (ring-elements eshell-last-dir-ring) nil t)))
        (eshell/cd dir)))

    ;; 查找文件
    (defun eshell/f (filename &optional dir)
      "Search for files matching FILENAME in either DIR or the
  current directory."
      (let ((cmd (concat
                  ;; using find
                  (executable-find "find")
                  " " (or dir ".")
                  " -not -path '*/.git*'"            ; ignore .git directory
                  " -and -not -path 'build'"         ; ignore cmake build directory
                  " -and -not -path '*/eln-cache*'"  ; ignore eln cache
                  " -and -type f -and -iname "
                  "'*" filename "*'")))
        (eshell-command-result cmd)))

    :custom
    (eshell-banner-message
     '(format "%s %s\n"
              (propertize (format " %s " (string-trim (buffer-name)))
                          'face 'mode-line-highlight)
              (propertize (current-time-string)
                          'face 'font-lock-keyword-face)))
    (eshell-scroll-to-bottom-on-input 'all)
    (eshell-scroll-to-bottom-on-output 'all)
    (eshell-kill-on-exit t)
    (eshell-kill-processes-on-exit t)
    ;; Don't record command in history if starts with whitespace
    (eshell-input-filter 'eshell-input-filter-initial-space)
    (eshell-error-if-no-glob t)
    (eshell-glob-case-insensitive t)
    ;; set scripts
    (eshell-rc-script (locate-user-emacs-file "etc/eshell/profile"))
    (eshell-login-script (locate-user-emacs-file "etc/eshell/login"))
    )


  (use-package em-hist
    :elpaca nil
    :ensure nil
    :defer t
    :custom
    (eshell-history-size 1024)
    (eshell-hist-ignoredups t)
    (eshell-save-history-on-exit t))

  (use-package em-rebind
    :elpaca nil
    :ensure nil
    :commands eshell-delchar-or-maybe-eof)

  (use-package esh-mode
    :elpaca nil
    :ensure nil
    :bind (:map eshell-mode-map
                ("C-d" . eshell-delchar-or-maybe-eof)
                ("C-r" . consult-history)
                ("C-l" . eshell/clear))
    )

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :ensure t
    :hook (eshell-mode . eshell-syntax-highlighting-global-mode)
    :custom-face
    (eshell-syntax-highlighting-shell-command-face ((t (:foreground "#7cc77f" :bold t)))))
#+end_src
*** alias
#+header: :tangle etc/eshell/aliases :mkdir t
#+begin_src text
alias ff find-file $1
alias fo find-file-other-window $1
alias d dired $1
alias ll ls -alh
alias l. ls -dh .*
alias up eshell-up $1
alias pk eshell-up-peek $1
alias less view-file $1
alias more view-file $1
#+end_src
*** vterm
#+begin_src emacs-lisp
  (use-package vterm :unless windows?)
#+end_src
** treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name "var/treemacs.org" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))
#+end_src
* Misc
** mind-wave
#+begin_src emacs-lisp
  (use-package mind-wave :elpaca (mind-wave :repo "https://github.com/manateelazycat/mind-wave" :files (:defaults "*.py")))
#+end_src
** whisper
#+begin_src emacs-lisp
  (use-package whisper :elpaca (whisper :host github :repo "natrys/whisper.el"))
#+end_src
* Footer
** early-init.el
#+header: :tangle early-init.el
#+begin_src emacs-lisp 
  (provide 'early-init)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; early-init.el ends here
#+end_src

** init.el
#+begin_src emacs-lisp :tangle init.el
  (provide 'init)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init.el ends here
#+end_src
