;-*- eval: (load-file "./lisp/init-dev.el");   -*-
#+TITLE: init.el
#+AUTHOR: lishuzhi
#+STARTUP: content
#+PROPERTY: id emacy-config
#+PROPERTY: header-args :tangle init.el :noweb yes :session init

https://remacs.cc/

* TODO Tasks
** TODO config packages
*** TODO keyfreq
[[http://blog.binchen.org/posts/how-to-be-extremely-efficient-in-emacs.html]]
* Header
** early-init.el
** init.el
#+begin_src emacs-lisp
  ;;; init.el --- The main init entry for Emacs -*- lexical-binding: t -*-
  ;;; Commentary:

  ;;; Code:
#+end_src

#+end_src
** layout
*** TODO shackle 
#+begin_src emacs-lisp
  (use-package shackle)
#+end_src
*** tabspaces
#+header: :tangle no
#+begin_src emacs-lisp
  (use-package tabspaces
    :elpaca (:type git :host github :repo "mclear-tools/tabspaces")
    :hook (elpaca-after-init . tabspaces-mode)
    :commands (tabspaces-switch-or-create-workspace tabspaces-open-or-create-project-and-workspace)
    :custom
    (tabspaces-use-filtered-buffers-as-default t)
    (tabspaces-default-tab "Default")
    (tabspaces-remove-to-default t)
    (tabspaces-include-buffers '("*scratch*"))
    ;; sessions
    (tabspaces-session t)
    (tabspaces-session-auto-restore t)
    :general
    (tyrant-def
     "TAB"    (cons "workspaces" (make-sparse-keymap))
     "TAB 1"  'tab-bar-select-tab
     "TAB 2"  'tab-bar-select-tab
     "TAB 3"  'tab-bar-select-tab
     "TAB 4"  'tab-bar-select-tab
     "TAB 5"  'tab-bar-select-tab
     "TAB 6"  'tab-bar-select-tab
     "TAB 7"  'tab-bar-select-tab
     "TAB 8"  'tab-bar-select-tab

     "TAB C"  'tabspaces-clear-buffers
     "TAB o"  'tabspaces-open-or-create-project-and-workspace
     "TAB d"  'tabspaces-close-workspace
     "TAB s"  'tabspaces-switch-or-create-workspace
     "TAB r"  'tabspaces-remove-current-buffer
     "TAB R"  'tabspaces-remove-selected-buffer
     "TAB x"  'tabspaces-switch-buffer-and-tab
     "TAB b"  'tabspaces-switch-to-buffer))
#+end_src

*** persp-mode
#+begin_src emacs-lisp
  (use-package persp-mode
    :commands (persp-new persp-switch persp-state-save)
    :general
    (tyrant-def
      "TAB" (cons "workspace" (make-sparse-keymap))
      "TAB n" #'persp-next
      "TAB p" #'persp-prev
      "TAB s" #'persp-frame-switch
      "TAB S" #'persp-window-switch
      "TAB r" #'persp-rename
      "TAB c" #'persp-copy
      "TAB C" #'persp-kill
      "TAB z" #'persp-save-and-kill
      "TAB a" #'persp-add-buffer
      "TAB b" #'persp-switch-to-buffer
      "TAB t" #'persp-temporarily-display-buffer
      "TAB i" #'persp-import-buffers
      "TAB I" #'persp-import-win-conf
      "TAB k" #'persp-remove-buffer
      "TAB K" #'persp-kill-buffer
      "TAB w" #'persp-save-state-to-file
      "TAB W" #'persp-save-to-file-by-names
      "TAB l" #'persp-load-state-from-file
      "TAB L" #'persp-load-from-file-by-names

      "TAB x" '((lambda () (interactive) (persp-kill (persp-current-name))) :wk "kill current")
      "TAB m" '(emacy/main-workspace :wk "main"))
    :init
    (defun emacy/main-workspace ()
      "Jump to the dashboard bufer"
      (interactive)
      (persp-switch "main")
      (switch-to-buffer dashboard-buffer-name)
      (dashboard-mode)
      (dashboard-insert-startupify-lists)
      (dashboard-refersh-buffer))
    (setq persp-autokill-buffer-on-remove 'kill-weak
          persp-reset-windows-on-nil-window-conf nil
          persp-nil-hidden t
          persp-remove-buffers-from-nil-persp-behaviour nil
          persp-kill-foreign-buffer-behaviour 'kill
          persp-set-last-persp-for-new-frames t
          persp-switch-to-added-buffer nil)
    :config
    (persp-mode)
    :hook
    (kill-emacs . #'persp-state-save))

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package persp-mode-projectile-bridge
    :after (projectile persp-mode)
    :config
    (persp-mode-projectile-bridge-mode 1))
#+end_src
** gcmh
#+begin_src emacs-lisp
  (use-package gcmh :demand :config (gcmh-mode 1))
#+end_src
** helpful

** env
#+header: :tangle no
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Window
#+begin_src emacs-lisp
  (use-package ace-window :hook (elpaca-after-init . winner-mode))

  (use-package transpose-frame
    :general
    (tyrant-def
      "w [" 'transpose-frame
      "w ]" 'rotate-frame))
#+end_src
** Icons
*** all-the-icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p)
    :demand)

  (use-package all-the-icons-completion
    :if (display-graphic-p)
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init (all-the-icons-completion-mode))

  (use-package treemacs-all-the-icons :after (treemacs all-the-icons))
#+end_src

*** TODO nerd-fonts
#+header: :tangle no
#+begin_src emacs-lisp
  (use-package nerd-icons :elpaca (nerd-icons :type git :host github :repo "rainstormstudio/nerd-icons"))

  (use-package treemacs-nerd-icons
    :after (treemacs nerd-icons)
    :elpaca (treemacs-nerd-icons :type git :host github :repo "rainstormstudio/treemacs-nerd-icons")
    :config
    (treemacs-load-theme "nerd-icons"))

  (use-package nerd-icons-ibuffer
    :ensure t
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

  (use-package nerd-icons-dired
    :hook
    (dired-mode . nerd-icons-dired-mode))

  (use-package nerd-icons-completion
    :config
    (nerd-icons-completion-mode))
#+end_src
** Guides
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom
    (highlight-indent-guides-method 'fill))
#+end_src
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :hook
    (elpaca-after-init . (lambda () (dashboard-open)))
    :config
    ;; FIXME
    ;;(dashboard-setup-startup-hook)
    (setq dashboard-center-content t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-projects-backend 'projectile))
#+end_src
* Org
** Misc
#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :ensure t
    :hook (org-mode . org-auto-tangle-mode)
    :config (setq org-auto-tangle-default t))
#+end_src
** org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :after org
    :init
    (setq org-roam-directory org-directory
          org-roam-v2-ack t)
    :config
    (org-roam-setup)
    (add-to-list 'display-buffer-alist
                 '(("*org-roam*"
                    (display-buffer-in-direcion)
                    (direction . right)
                    (window-width . 0.33)
                    (window-height . fit-window-to-buffer))))
    :general
    (tyrant-def
      "n" (cons "Notes" (make-sparse-keymap))
      "n b" 'org-roam-buffer-toggle
      "n f" 'org-roam-node-find
      "n g" 'org-roam-graph
      "n i" 'org-roam-node-insert
      "n c" 'org-roam-capture
      "n t" 'org-roam-tag-add
      "n r" 'org-roam-ref-add
      "n a" 'org-roam-alias-add))

  (use-package org-roam-ui)
#+end_src
** org-config
#+begin_src emacs-lisp
  (setq org-directory  "~/Notes"
        org-archive-location (concat org-directory "/archive/%s::")
        org-contacts-files (list (concat org-directory "/archive/contacts.org"))
        org-agenda-files (list org-directory)
        deft-directory org-directory
        org-roam-directory org-directory
        org-brain-path org-directory
        org-roam-file-exclude-regexp ".*/bak/.*"
        org-brain-visualize-default-choices 'all
        rmh-elfeed-org-files (list (concat org-directory "/feeds.org")))

  (setq org-fontify-whole-heading-line t
        org-fontify-quote-and-verse-blocks t
        org-hide-macro-markers t
        org-startup-indented t
        org-adapt-indentation t
        org-startup-with-inline-images t
        org-startup-with-latex-preview t)

  (setq deft-recursive t
        deft-recursive-ignore-dir-regexp (rx (or "." ".." "logseq") eol))

  (setq org-agenda-archives-mode t)
  (setq org-export-select-tags '("Publish" "Public" "export")
        org-publish-project-alist
        '(("content"
           :base-directory "~/Notes/content"
           :publishing-directory "~/Notes/publish"
           ;; :publishing-function (org-org-publish-to-org org-md-publish-to-md)
           :publishing-function org-org-publish-to-org
           :select-tags ("Publish" "Public" "Export" "export" "publish" "public")
           :exclude-tags ("Private" "Secret" "noexport")
           :recursive t
           :with-broken-links t
           :with-toc nil)))

  (setq org-log-done 'time)
  ;; (setq org-priority-lowest ?E)
  (setq org-contacts-icon-use-gravatar nil)
  (setq org-superstar-headline-bullets-list '("☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷"))
  (setq org-todo-keywords
        '((sequence "NEXT(n)" "TODO(t)" "PEND(p)" "WILL(w@/!)" "|" "DONE(d)" "QUIT(q@)")
          (sequence "[-](N)" "[ ](T)" "[:](P)" "[?](W)" "|" "[X](D)" "[Q](Q)")))
  (setq org-todo-keyword-faces
        '(("TODO" :foreground "orange"       :weight bold)
          ("[ ]"  :foreground "orange"       :weight bold)
          ("NEXT" :foreground "yellow"       :weight bold)
          ("[-]"  :foreground "yellow"       :weight bold)
          ("PEND" :foreground "pink"         :weight bold)
          ("[:]"  :foreground "pink"         :weight bold)
          ("WILL" :foreground "purple"       :weight bold)
          ("[?]"  :foreground "purple"       :weight bold)
          ("DONE" :foreground "forest green" :weight bold)
          ("[X]"  :foreground "forest green" :weight bold)
          ("QUIT" :foreground "grey"         :weight bold)
          ("[Q]"  :foreground "grey"         :weight bold)))

  (use-package org-contrib)
#+end_src
** org-modern
#+begin_src emacs-lisp
  (use-package org-modern
    :ensure t
    :hook (elpaca-after-init . (lambda () (setq org-modern-hide-stars 'leading) (global-org-modern-mode t)))
    :config
    ;; 标题行型号字符
    (setq org-modern-star ["☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷"])
    ;; 额外的行间距，0.1表示10%，1表示1px
    (setq-default line-spacing 0.1)
    ;; tag边框宽度，还可以设置为 `auto' 即自动计算
    (setq org-modern-label-border 1)
    ;; 设置表格竖线宽度，默认为3
    (setq org-modern-table-vertical 2)
    ;; 设置表格横线为0，默认为0.1
    (setq org-modern-table-horizontal 0)
    ;; 复选框美化
    (setq org-modern-checkbox
          '((?X . #("▢✓" 0 2 (composition ((2)))))
            (?- . #("▢–" 0 2 (composition ((2)))))
            (?\s . #("▢" 0 1 (composition ((1)))))))
    ;; 列表符号美化
    (setq org-modern-list
          '((?- . "•")
            (?+ . "◦")
            (?* . "▹")))
    ;; 代码块左边加上一条竖边线（需要Org mode顶头，如果启用了 `visual-fill-column-mode' 会很难看）
    (setq org-modern-block-fringe t)
    ;; 代码块类型美化，我们使用了 `prettify-symbols-mode'
    (setq org-modern-block-name nil)
    ;; #+关键字美化，我们使用了 `prettify-symbols-mode'
    (setq org-modern-keyword nil))
#+end_src
** org-appear
#+begin_src emacs-lisp
  (use-package org-appear
   :ensure t
   :hook (org-mode . org-appear-mode)
   :config
   (setq org-appear-autolinks t)
   (setq org-appear-autosubmarkers t)
   (setq org-appear-autoentities t)
   (setq org-appear-autokeywords t)
   (setq org-appear-inside-latex t)) 
#+end_src
** org-elfeed
#+begin_src emacs-lisp
  (use-package elfeed)

  (use-package elfeed-org
    :config
    (setq rmh-elfeed-org-files (list "~/Notes/feeds.org"))
    (elfeed-org))
#+end_src
** org-fragtog
#+begin_src emacs-lisp
  (use-package org-fragtog :hook (org-mode . org-fragtog-mode))
#+end_src
** latex
#+begin_src emacs-lisp
  ;; (use-package tex :elpaca nil :ensure auctex)
  (elpaca auctex (require 'tex))
#+end_src
** mpvi
#+begin_src emacs-lisp
  (use-package mpvi :elpaca (mpvi :repo "https://github.com/lorniu/mpvi")
    :general
    (tyrant-def))
#+end_src

* IDE
** base
#+begin_src emacs-lisp
  (use-package rainbow-delimiters :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** projectile
#+begin_src emacs-lisp
  (use-package projectile :config (projectile-global-mode +1))
#+end_src
** lsp-bridge
#+begin_src emacs-lisp
  (use-package posframe)
  (use-package yasnippet :config (yas-global-mode 1))
  (use-package lsp-bridge
    :elpaca (lsp-bridge :host github :repo "manateelazycat/lsp-bridge" :files ("*" (:exclude ".git")))
    :config (global-lsp-bridge-mode)
    (evil-set-initial-state 'lsp-bridge-ref-mode 'emacs))
#+end_src
** treesit
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
          (c . ("https://github.com/tree-sitter/tree-sitter-c"))
          (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
          (css . ("https://github.com/tree-sitter/tree-sitter-css"))
          (cmake . ("https://github.com/uyha/tree-sitter-cmake"))
          (csharp     . ("https://github.com/tree-sitter/tree-sitter-c-sharp.git"))
          (dockerfile . ("https://github.com/camdencheek/tree-sitter-dockerfile"))
          (elisp . ("https://github.com/Wilfred/tree-sitter-elisp"))
          (go . ("https://github.com/tree-sitter/tree-sitter-go"))
          (gomod      . ("https://github.com/camdencheek/tree-sitter-go-mod.git"))
          (html . ("https://github.com/tree-sitter/tree-sitter-html"))
          (java       . ("https://github.com/tree-sitter/tree-sitter-java.git"))
          (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
          (json . ("https://github.com/tree-sitter/tree-sitter-json"))
          (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
          (make . ("https://github.com/alemuller/tree-sitter-make"))
          (markdown . ("https://github.com/MDeiml/tree-sitter-markdown" nil "tree-sitter-markdown/src"))
          (ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml" nil "ocaml/src"))
          (org . ("https://github.com/milisims/tree-sitter-org"))
          (python . ("https://github.com/tree-sitter/tree-sitter-python"))
          (php . ("https://github.com/tree-sitter/tree-sitter-php"))
          (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "typescript/src"))
          (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "tsx/src"))
          (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
          (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
          (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
          (vue . ("https://github.com/merico-dev/tree-sitter-vue"))
          (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))
          (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
          (zig . ("https://github.com/GrayJack/tree-sitter-zig"))))

  (setq major-mode-remap-alist
        '((c-mode          . c-ts-mode)
          (c++-mode        . c++-ts-mode)
          (cmake-mode      . cmake-ts-mode)
          (conf-toml-mode  . toml-ts-mode)
          (css-mode        . css-ts-mode)
          (js-mode         . js-ts-mode)
          (js-json-mode    . json-ts-mode)
          (python-mode     . python-ts-mode)
          (sh-mode         . bash-ts-mode)
          (typescript-mode . typescript-ts-mode)))

  (add-hook 'emacs-lisp-mode-hook #'(lambda () (treesit-parser-create 'elisp)))
  (setq treesit-extra-load-path (list (expand-file-name "var/treesit" user-emacs-directory)))

  (use-package treesit-auto
    :config
    (global-treesit-auto-mode))
#+end_src
** langs
*** web
#+begin_src emacs-lisp
  (use-package css-mode :elpaca nil :init (setq css-indent-offset 2))
  (use-package scss-mode :init (setq scss-compile-at-save nil))

  (unless (fboundp 'less-css-mode) (use-package less-css-mode))
  (unless (fboundp 'js-json-mode) (use-package json-mode))

  (use-package js2-mode
    :mode (("\\.js\\'" . js2-mode)
           ("\\.jsx\\'" . js2-jsx-mode))
    :interpreter (("node" . js2-mode)
                  ("node" . js2-jsx-mode))
    :hook ((js2-mode . js2-imenu-extras-mode)
           (js2-mode . js2-highlight-unused-variables-mode)))

  (use-package prettier
    :diminish
    :hook ((js-mode js2-mode css-mode sgml-mode web-mode) . prettier-mode)
    :init (setq prettier-pre-warm 'none))

  (use-package typescript-mode :mode ("\\.ts[x]\\'" . typescript-mode))

  (use-package web-mode
    :mode "\\.\\(phtml\\|php\\|[gj]sp\\|as[cp]x\\|erb\\|djhtml\\|html?\\|hbs\\|ejs\\|jade\\|swig\\|tm?pl\\|vue\\)$"
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2))

  ;; Adds node_modules/.bin directory to `exec_path'
  (use-package add-node-modules-path :hook ((web-mode js-mode js2-mode) . add-node-modules-path))

  (use-package restclient
    :mode ("\\.http\\'" . restclient-mode)
    :config
    (use-package restclient-test
      :diminish
      :hook (restclient-mode . restclient-test-mode)))
#+end_src
** shell
#+begin_src emacs-lisp
  (use-package eshell
    :elpaca nil
    :ensure nil
    :functions eshell/alias
    :hook ((eshell-mode . (lambda () (term-mode-common-init) (visual-line-mode 1))))
    :config
    (defun term-mode-common-init ()
      (setq-local scroll-margin 0)
      (setq-local truncate-lines t))

    (defalias 'eshell/vi 'find-file)
    (defalias 'eshell/vim 'find-file)

    (defun eshell/bat (file)
      "cat FILE with syntax highlight."
      (with-temp-buffer
        (insert-file-contents file)
        (let ((buffer-file-name file))
          (delay-mode-hooks
            (set-auto-mode)
            (font-lock-ensure)))
        (buffer-string)))
    (defalias 'eshell/cat 'eshell/bat)

    ;; 交互式进入目录
    (defun eshell/z ()
      "cd to directory with completion."
      (let ((dir (completing-read "Directory: " (ring-elements eshell-last-dir-ring) nil t)))
        (eshell/cd dir)))

    ;; 查找文件
    (defun eshell/f (filename &optional dir)
      "Search for files matching FILENAME in either DIR or the
  current directory."
      (let ((cmd (concat
                  ;; using find
                  (executable-find "find")
                  " " (or dir ".")
                  " -not -path '*/.git*'"            ; ignore .git directory
                  " -and -not -path 'build'"         ; ignore cmake build directory
                  " -and -not -path '*/eln-cache*'"  ; ignore eln cache
                  " -and -type f -and -iname "
                  "'*" filename "*'")))
        (eshell-command-result cmd)))

    :custom
    (eshell-banner-message
     '(format "%s %s\n"
              (propertize (format " %s " (string-trim (buffer-name)))
                          'face 'mode-line-highlight)
              (propertize (current-time-string)
                          'face 'font-lock-keyword-face)))
    (eshell-scroll-to-bottom-on-input 'all)
    (eshell-scroll-to-bottom-on-output 'all)
    (eshell-kill-on-exit t)
    (eshell-kill-processes-on-exit t)
    ;; Don't record command in history if starts with whitespace
    (eshell-input-filter 'eshell-input-filter-initial-space)
    (eshell-error-if-no-glob t)
    (eshell-glob-case-insensitive t)
    ;; set scripts
    (eshell-rc-script (locate-user-emacs-file "etc/eshell/profile"))
    (eshell-login-script (locate-user-emacs-file "etc/eshell/login"))
    )


  (use-package em-hist
    :elpaca nil
    :ensure nil
    :defer t
    :custom
    (eshell-history-size 1024)
    (eshell-hist-ignoredups t)
    (eshell-save-history-on-exit t))

  (use-package em-rebind
    :elpaca nil
    :ensure nil
    :commands eshell-delchar-or-maybe-eof)

  (use-package esh-mode
    :elpaca nil
    :ensure nil
    :bind (:map eshell-mode-map
                ("C-d" . eshell-delchar-or-maybe-eof)
                ("C-r" . consult-history)
                ("C-l" . eshell/clear))
    )

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :ensure t
    :hook (eshell-mode . eshell-syntax-highlighting-global-mode)
    :custom-face
    (eshell-syntax-highlighting-shell-command-face ((t (:foreground "#7cc77f" :bold t)))))
#+end_src
*** vterm
#+begin_src emacs-lisp
  (use-package vterm :unless windows?)
#+end_src
** treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name "var/treemacs.org" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t) (treemacs-git-mode 'deferred))
        (`(t . _) (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil :after (treemacs evil) :ensure t)

  (use-package treemacs-projectile :after (treemacs projectile) :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit :after (treemacs magit) :ensure t)

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))
#+end_src
** debug
#+begin_src emacs-lisp
  (use-package dap-mode
    :defer t
    :config
    (setq dap-auto-configure-features '(sessions locals controls tooltip))
    (dap-mode 1)
    ;; (dap-ui-mode 1)
    ;; (dap-ui-controls-mode 1)
    ;; (dap-tooltip-mode 1)
    ;; (tooltip-mode 1)
    (require 'dap-python)
    (setq dap-python-debugger 'debugpy)
    (require 'dap-node)

    (dap-register-debug-template
      "Node::Attach"
      (list :type "node"
            :request "attach"
            :port 9229
            :name "Node::Attach")))
#+end_src
** formatter
#+begin_src emacs-lisp
  (use-package apheleia :config (apheleia-global-mode +1))
#+end_src
** editorconfig
#+begin_src emacs-lisp
  (use-package editorconfig :config (editorconfig-mode 1))
#+end_src
* Misc
** mind-wave
#+begin_src emacs-lisp
  (use-package mind-wave :elpaca (mind-wave :repo "https://github.com/manateelazycat/mind-wave" :files (:defaults "*.py")))
#+end_src
** eaf
#+begin_src emacs-lisp
  (use-package eaf :elpaca (eaf :host github :repo "emacs-eaf/emacs-application-framework" :files ("*") :post-build (shell-command "python install-eaf.py --install-core-deps")))

  (defconst eaf-apps
    '(eaf-jupyter
      eaf-browser
      eaf-airshare
      eaf-file-browser
      eaf-file-manager
      eaf-file-sender
      eaf-music-player
      eaf-system-monitor
      eaf-mindmap
      eaf-org-previewer
      eaf-terminal
      eaf-netease-cloud-music
      eaf-video-player
      eaf-image-viewer
      eaf-demo
      eaf-vue-demo
      eaf-pdf-viewer
      eaf-markdown-previewer
      eaf-camera))

  (defun +emacy/install-eaf-app-deps (app-dir)
    "Install deps from dependencies.json."
    (let* ((dep-file (expand-file-name "dependencies.json" app-dir))
           (deps-dict (with-temp-buffer
                        (if (file-exists-p dep-file)
                          (insert-file-contents dep-file)
                          (insert "{}"))
                        (json-parse-string (buffer-string))))
           (pip-deps (gethash (if IS-LINUX "linux" "darwin")
                              (or (gethash "pip" deps-dict)
                                  (make-hash-table))))
           (vue-install (gethash "vue_install" deps-dict))
           (npm-install (gethash "npm_install" deps-dict))
           (npm-rebuild (gethash "npm_rebuild" deps-dict)))
      (when pip-deps
        (dolist (pkg (append pip-deps nil))
          (message "%s" (shell-command-to-string (format "pip install %s" pkg)))))
      (when vue-install
        (let ((default-directory app-dir))
          (message "%s" (shell-command-to-string "pnpm install"))
          (message "%s" (shell-command-to-string "pnpm run build"))))
      (when npm-install
        (let ((default-directory app-dir))
          (message "%s" (shell-command-to-string "pnpm install"))))
      (when npm-rebuild
        (let ((default-directory app-dir))
          (message "%s" (shell-command-to-string "pnpm rebuild"))))))

  (defmacro add-eaf-apps (apps)
    `(progn ,@(mapcar (lambda (app) `(use-package ,app
                                       :elpaca (,app :host github
                                                     :repo ,(concat "emacs-eaf/" (symbol-name app))
                                                     :files ("*")
                                                     :post-build (+emacy/install-eaf-app-deps ,(concat elpaca-builds-directory "/" (symbol-name app))))))
                      (if (symbolp apps) (eval apps) apps))))

  (add-eaf-apps eaf-apps)

  ;; (dolist (app eaf-apps)
  ;;   )
#+end_src
** whisper
#+begin_src emacs-lisp
  (use-package whisper :elpaca (whisper :host github :repo "natrys/whisper.el")
    :after (no-littering)
    :general
    (tyrant-def
      "aw" (cons "whisper" (make-sparse-keymap))
      "awr" 'whisper-run
      "awf" 'whisper-file)
    :config
    (setq whisper-model "base"
          whisper-install-directory (no-littering-expand-var-file-name "whisper")
          whisper-language "cn"
          whisper-translate nil))
#+end_src
** rime
#+begin_src emacs-lisp
  (use-package rime
    :defer t
    :custom
    (default-input-method "rime")
    (rime-show-candidate 'posframe)
    (rime-user-data-dir "~/Dotfiles/config/rime")
    (rime-disable-predicates '(rime-predicate-after-alphabet-char-p ;; 在英文字符串之后（必须为以字母开头的英文字符串）
                               ;; rime-predicate-after-ascii-char-p ;; 任意英文字符后
                               rime-predicate-prog-in-code-p ;; 在 prog-mode 和 conf-mode 中除了注释和引号内字符串之外的区域
                               rime-predicate-in-code-string-p ;; 在代码的字符串中，不含注释的字符串。
                               rime-predicate-evil-mode-p ;; 在 evil-mode 的非编辑状态下
                               rime-predicate-hydra-p ;; 如果激活了一个 hydra keymap
                               ;; rime-predicate-ace-window-p ;; 激活 ace-window-mode
                               ;; rime-predicate-current-input-punctuation-p ;; 当要输入的是符号时
                               rime-predicate-punctuation-after-space-cc-p ;; 当要在中文字符且有空格之后输入符号时
                               rime-predicate-punctuation-after-ascii-p ;; 当要在任意英文字符之后输入符号时
                               rime-predicate-punctuation-line-begin-p ;; 在行首要输入符号时
                               rime-predicate-space-after-ascii-p ;; 在任意英文字符且有空格之后
                               rime-predicate-space-after-cc-p ;; 在中文字符且有空格之后
                               rime-predicate-current-uppercase-letter-p ;; 将要输入的为大写字母时
                               rime-predicate-tex-math-or-command-p));; 在 (La)TeX 数学环境中或者输入 (La)TeX 命令时
    :bind
    (:map rime-mode-map ("C-," . 'rime-force-enable)))
#+end_src
** beacon
#+begin_src emacs-lisp
  (use-package beacon :config (beacon-mode 1))
#+end_src
* Footer
** early-init.el
#+header: :tangle early-init.el
#+begin_src emacs-lisp 
  (provide 'early-init)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; early-init.el ends here
#+end_src

** init.el
#+begin_src emacs-lisp :tangle init.el
  (provide 'init)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init.el ends here
#+end_src
