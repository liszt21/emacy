# ;-*- eval: (load-file "./init-dev.el");   -*-
#+TITLE: My Emacs Config
#+AUTHOR: Li Shuzhi
#+STARTUP: content
#+FILETAGS: :Emacy:Config:Emacs:EmacsLisp:
#+PROPERTY: emacs config emacy
#+PROPERTY: header-args :tangle init.el :noweb yes :session init

* Inbox
** TODO Refactor
* Header
#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;; early-init.el --- emacs init file  -*- lexical-binding: t; -*-
#+END_SRC

#+BEGIN_SRC emacs-lisp
;;; init.el --- emacs init file  -*- lexical-binding: t; -*-
(require 'cl-lib)
#+END_SRC

* Constant
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defconst windows? (memq system-type '(cygwin windows-nt ms-dos)) "are we on windows")
(defconst macos? (eq system-type 'darwin) "are we on macos")
(defconst linux? (memq system-type '(gnu gnu/linux gnu/kfreebds berkeley-unix)) "are we on linux")
(defconst bsd? (memq system-type '(darwin berkeley-unix gnu/kfreebsd)) "are we on bsd")
(defconst wsl? (and linux? (string-match-p "microsoft" operating-system-release)) "are we on wsl")
#+END_SRC

* Variable
#+BEGIN_SRC emacs-lisp
(defvar elpaca-directory (expand-file-name "var" (if wsl? user-local-directory user-emacs-directory)))
(defvar elpaca-cache-directory (expand-file-name "menus" elpaca-directory))
(defvar elpaca-builds-directory (expand-file-name "builds" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "libs" user-emacs-directory))
#+END_SRC

* Default
#+BEGIN_SRC emacs-lisp
(display-time-mode)
(toggle-frame-maximized)
(global-auto-revert-mode)
(global-display-line-numbers-mode)
(toggle-word-wrap)
(global-word-wrap-whitespace-mode 1)

(tab-bar-mode -1)
#+END_SRC

* Package Manager
** [[https://github.com/progfolio/elpaca][Elpaca]]
*** introduce
#+BEGIN_SRC emacs-lisp
(defvar elpaca-installer-version 0.6)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+END_SRC
*** default
#+begin_src emacs-lisp :tangle early-init.el
(setq package-enable-at-startup nil)
#+end_src
*** config
#+BEGIN_SRC emacs-lisp
  (elpaca elpaca-use-package
    (elpaca-use-package-mode)
    (setq elpaca-use-package-by-default t
          use-package-compute-statistics t))

  (when windows? (setq elpaca-queue-limit 21))

  (defmacro use-feature (name &rest args)
    "Like `use-package' but accounting for asynchronous installation.
    NAME and ARGS are in `use-package'."
    (declare (indent defun))
    `(use-package ,name
       :elpaca nil
       :ensure nil
       ,@args))

  (elpaca-wait)
#+END_SRC

* Custom
#+begin_src emacs-lisp
(use-package no-littering
  :demand
  :config
  (setq custom-file (no-littering-expand-var-file-name "custom.el")
        whisper-install-directory (no-littering-expand-var-file-name "whisper")
        parinfer-rust-library-directory (no-littering-expand-var-file-name "parinfer-rust/"))
  (with-eval-after-load 'recentf
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)))
#+end_src
* Keybind
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :demand t
  :init
  (setq which-key-enable-extended-define-key t)
  :config
  (which-key-mode)
  :custom
  (which-key-side-window-location 'bottom)
  (which-key-sort-order 'which-key-key-order-alpha)
  (which-key-side-window-max-width 0.33)
  (which-key-idle-delay 0.12)
  :diminish which-key-mode)
#+END_SRC

** general
#+BEGIN_SRC emacs-lisp
(use-package general
  :demand t
  :config
  (general-override-mode)
  (general-auto-unbind-keys)
  (general-evil-setup)
  (general-define-key
   :states '(normal insert motion emacs)
   :keymaps 'override
   :prefix-map 'tyrant-map
   :prefix "SPC"
   :non-normal-prefix "M-SPC")
  
  (general-create-definer tyrant-def :keymaps 'tyrant-map)
  (tyrant-def "" nil)
  
  (general-create-definer despot-def
    :states '(normal insert motion emacs)
    :keymaps 'override
    :major-modes t
    :prefix "SPC m"
    :non-normal-prefix "M-SPC m")
  (despot-def "" nil)
  
  (general-def universal-argument-map "SPC u" 'universal-argument-more)
  (tyrant-def
      "SPC"     '("M-x" . execute-extended-command)
      "!"       '("shell cmd" . shell-command)
  
      "a"       (cons "applications" (make-sparse-keymap))
      "ac"      'calc-dispatch
      "ap"      'list-processes
      "aP"      'proced
  
      "ae"      (cons "elpaca" (make-sparse-keymap))
      "aeb" 'elpaca-browse
      "aer"  '((lambda () (interactive) (let ((current-prefix-arg (not current-prefix-arg))) (call-interactively #'elpaca-rebuild))) :which-key "rebuild")
      "aem" 'elpaca-manager
      "ael" 'elpaca-log
      "aei" 'elpaca-info
      "aeI" '((lambda () (interactive) (info "Elpaca")) :which-key "elpaca-info")
      "aes" 'elpaca-status
      "aet" 'elpaca-try
      "aev" 'elpaca-visit
  
      "b"       (cons "buffers" (make-sparse-keymap))
      "bb"      'switch-to-buffer
      "bc"      'consult-buffer
      "bi"      'ibuffer
      "bd"      'kill-current-buffer
      "bm"      'switch-to-messages-buffer
      "bs"      'scratch-buffer
      "bu"      'reopen-killed-buffer
      "bx"      'kill-buffer-and-window
      "b TAB"    '("last buffer" . alternate-buffer)
  
      "c"       (cons "code" (make-sparse-keymap))
      "cb"      'flymake-show-buffer-diagnostics
      "cc"      'compile
      "cd"      'lsp-bridge-find-def
      "cD"      'lsp-bridge-find-references
      "cn"      'next-error
      "cp"      'previous-error
      "cr"      'recompile
      "cx"      'kill-compilation
      "c="      'indent-region-or-buffer
  
      "f"       (cons "files" (make-sparse-keymap))
      "fC"      '("copy-file" . write-file)
      "fD"      'delete-current-buffer-file
      ;; "fe"      'find-library
      "fE"      'sudo-edit
      "ff"      'find-file
      "fj"      'dired-jump
      "fJ"      'dired-jump-other-window
      "fo"      'open-file-or-directory-in-external-app
      "fr"      'read-only-mode
      "fR"      'rename-current-buffer-file
      "fd"   '((lambda (&optional arg) (interactive "P") (let ((buffer (when arg (current-buffer)))) (diff-buffer-with-file buffer))) :which-key "diff-with-file")
  
      "fe"   (cons "emacs" (make-sparse-keymap))
      "fed"  '((lambda () (interactive) (find-file-existing literate-file) (widen)) :which-key "dotfile")
      "feR"  '((lambda () (interactive) (load-file user-init-file)) :which-key "reload-init.el")
      "fet"  '((lambda () (interactive)
                (save-restriction (widen) (check-parens) (org-babel-tangle-file literate-file))
                (load-file "~/Projects/Emacy/profiles/emacy/init.el"))
               :which-key "tangle/reload-init.el")
      "fl"   '((lambda (&optional arg) (interactive "P") (call-interactively (if arg #'find-library-other-window #'find-library))) :which-key "+find-library")
      "fp"   'find-function-at-point
      "fP"   'find-function
      "fR"   'rename-file-and-buffer
      "fs"   'save-buffer
      "fv"   'find-variable-at-point
      "fV"   'find-variable
      ;; "fv"      (cons "variables" (make-sparse-keymap))
      ;; "fvd"     'add-dir-local-variable
      ;; "fvf"     'add-file-local-variable
      ;; "fvp"     'add-file-local-variable-prop-line
  
      "F"       (cons "frame" (make-sparse-keymap))
      "Fd"      'delete-frame
      "FD"      'delete-other-frames
      "Fn"      'make-frame
      "Fo"      'other-frame
      "FD" 'delete-other-frames
      "FF" 'select-frame-by-name
      "FO" 'other-frame-prefix
      "Fc" '(:ingore t :which-key "color")
      "Fcb" 'set-background-color
      "Fcc" 'set-cursor-color
      "Fcf" 'set-foreground-color
      "Ff" 'set-frame-font
      "Fm" 'make-frame-on-monitor
      "Fn" 'next-window-any-frame
      "Fo" 'other-frame
      "Fp" 'previous-window-any-frame
      "Fr" 'set-frame-name
  
      "h"       (cons "help" (make-sparse-keymap))
      "ha"      'apropos
      "hb"      'describe-bindings
      "hc"      'describe-char
      "hf"      'describe-function
      "hF"      'describe-face
      "hi"      'info-emacs-manual
      "hI"      'info-display-manual
      "hk"      'describe-key
      "hK"      'describe-keymap
      "hm"      'describe-mode
      "hM"      'woman
      "hp"      'describe-package
      "ht"      'describe-text-properties
      "hv"      'describe-variable
      "hP"      (cons "profiler" (make-sparse-keymap))
      "hPs"     'profiler-start
      "hPk"     'profiler-stop
      "hPr"     'profiler-report
  
      "j"       (cons "jump" (make-sparse-keymap))
      "ji"      'imenu
      "jg"      'avy-goto-char-2
  
      "l"       (cons "layouts" tab-prefix-map)
      "ld"      'tab-bar-close-tab
      "lD"      'tab-bar-close-other-tabs
      "lg"      'tab-bar-change-tab-group
      "lm"      'tab-bar-move-tab-to
      "lM"      'tab-bar-move-tab-to-group
      "ll"      'tab-bar-switch-to-tab
      "lR"      'tab-bar-rename-tab
      "lt"      'other-tab-prefix
      "lu"      'tab-bar-undo-close-tab
      "l TAB"   'tab-bar-switch-to-last-tab
  
      "m"       (cons "major mode" (make-sparse-keymap))
  
      "p"       (cons "projects" project-prefix-map)
      "pt"      'project-open-in-tab
  
      "q"       (cons "quit" (make-sparse-keymap))
      "qd"      'restart-emacs-debug-init
      "qr"      'restart-emacs
      "qR"      'restart-emacs-without-desktop
      "qf"      'delete-frame
      "qq"      'save-buffers-kill-terminal
      "qQ"      'save-buffers-kill-emacs
  
      "s"       (cons "search" (make-sparse-keymap))
      ;; "sb"      'flyspell-buffer
      ;; "sn"      'flyspell-goto-next-error
      ;; "sr"      'flyspell-region
  
      "T"       (cons "toggles" (make-sparse-keymap))
      "Ta"      'auto-fill-mode
      ;;"Td"      'toggle-debug-on-error
      "Tde"     'toggle-debug-on-error
      "Tdq"     'toggle-debug-on-quit
      "Tf"      'display-fill-column-indicator-mode
      "Tl"      'toggle-truncate-lines
      "Tm"      'flymake-mode
      "Tn"      'display-line-numbers-mode
      "Ts"      'flyspell-mode
      "Tw"      'whitespace-mode
      "TW"      'toggle-word-wrap
  
      "u"       '("universal arg" . universal-argument)
  
      "w"       (cons "windows" (make-sparse-keymap))
      "w TAB"   'alternate-window
      "w+"      'window-layout-toggle
      "w?" 'split-window-vertically
      "w=" 'balance-windows
      "w/" 'split-window-horizontally
      "wO" 'delete-other-windows
      "wX" '((lambda () (interactive) (call-interactively #'other-window) (kill-buffer-and-window)) :which-key "kill-other-buffer-and-window")
      "wd" 'delete-window
      "wh" 'windmove-left
      "wj" 'windmove-down
      "wk" 'windmove-up
      "wl" 'windmove-right
      "wo" 'other-window
      "wx" 'kill-buffer-and-window
  
      "wb"      'switch-to-minibuffer-window
      "wd"      'delete-window
      "wD"      'delete-other-windows
      "wm"      'toggle-maximize-buffer
      "wf"      'follow-mode
      "wh"      'evil-window-left
      "wH"      'evil-window-move-far-left
      "wj"      'evil-window-down
      "wJ"      'evil-window-move-very-bottom
      "wk"      'evil-window-up
      "wK"      'evil-window-move-very-top
      "wl"      'evil-window-right
      "wL"      'evil-window-move-far-right
      "wr"      'rotate-windows-forward
      "wR"      'rotate-windows-backward
      "ws"      'split-window-vertically
      "wS"      'split-window-vertically-and-focus
      "wt"      'toggle-current-window-dedication
      "wu"      'winner-undo
      "wU"      'winner-redo
      "wv"      'split-window-horizontally
      "wV"      'split-window-horizontally-and-focus))
#+END_SRC

** hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :demand t
    :config
    (defun hydra-move-split-left (arg)
      "Move window split left."
      (interactive "p")
      (if (let* ((windmove-wrap-around))
            (windmove-find-other-window 'right))
          (shrink-window-horizontally arg)
        (enlarge-window-horizontally arg)))

    (defun hydra-move-split-right (arg)
      "Move window split right."
      (interactive "p")
      (if (let* ((windmove-wrap-around))
            (windmove-find-other-window 'right))
          (enlarge-window-horizontally arg)
        (shrink-window-horizontally arg)))

    (defun hydra-move-split-up (arg)
      "Move window split up."
      (interactive "p")
      (if (let* ((windmove-wrap-around))
            (windmove-find-other-window 'up))
          (enlarge-window arg)
        (shrink-window arg)))

    (defun hydra-move-split-down (arg)
      "Move window split down."
      (interactive "p")
      (if (let* ((windmove-wrap-around))
            (windmove-find-other-window 'up))
          (shrink-window arg)
        (enlarge-window arg)))

    (defhydra emacy-hydra-window ()
      "
    Movement^^   ^Split^         ^Switch^     ^Resize^
    -----------------------------------------------------
    _h_ Left     _v_ertical                   _q_ X left
    _j_ Down     _x_ horizontal  _f_ind files _w_ X Down
    _k_ Top      _z_ undo        _a_ce 1      _e_ X Top
    _l_ Right    _Z_ reset       _s_wap       _r_ X Right
    _F_ollow     _D_elete Other  _S_ave       max_i_mize
    _SPC_ cancel _o_nly this     _d_elete
    "
      ("h" windmove-left)
      ("j" windmove-down)
      ("k" windmove-up)
      ("l" windmove-right)
      ("q" hydra-move-split-left)
      ("w" hydra-move-split-down)
      ("e" hydra-move-split-up)
      ("r" hydra-move-split-right)
      ("f" counsel-find-file)
      ("F" follow-mode)
      ("a" (ace-window 1))
      ("v" (lambda () (interactive) (split-window-right) (windmove-right)))
      ("x" (lambda () (interactive) (split-window-below) (windmove-down)))
      ("s" (ace-window 4))
      ("S" save-buffer)
      ("d" delete-window)
      ("D" (ace-window 16))
      ("o" delete-other-windows)
      ("i" ace-delete-other-windows)
      ("z" (progn (winner-undo) (setq this-command 'winner-undo)))
      ("Z" winner-redo)
      ("SPC" nil))

    ;;(emacy-definer "w ." 'emacy-hydra-window/body)

    (defhydra hydra-dired (:hint nil :color pink)
      "
    _+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
    _C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
    _D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
    _R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
    _Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
    _S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
    _r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
    _z_ compress-file  _A_ find regexp
    _Z_ compress       _Q_ repl regexp

    T - tag prefix
    "
      ("\\" dired-do-ispell)
      ("(" dired-hide-details-mode)
      (")" dired-omit-mode)
      ("+" dired-create-directory)
      ("=" diredp-ediff)         ;; smart diff
      ("?" dired-summary)
      ("$" diredp-hide-subdir-nomove)
      ("A" dired-do-find-regexp)
      ("C" dired-do-copy)        ;; Copy all marked files
      ("D" dired-do-delete)
      ("E" dired-mark-extension)
      ("e" dired-ediff-files)
      ("F" dired-do-find-marked-files)
      ("G" dired-do-chgrp)
      ("g" revert-buffer)        ;; read all directories again (refresh)
      ("i" dired-maybe-insert-subdir)
      ("l" dired-do-redisplay)   ;; relist the marked or singel directory
      ("M" dired-do-chmod)
      ("m" dired-mark)
      ("O" dired-display-file)
      ("o" dired-find-file-other-window)
      ("Q" dired-do-find-regexp-and-replace)
      ("R" dired-do-rename)
      ("r" dired-do-rsynch)
      ("S" dired-do-symlink)
      ("s" dired-sort-toggle-or-edit)
      ("t" dired-toggle-marks)
      ("U" dired-unmark-all-marks)
      ("u" dired-unmark)
      ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
      ("w" dired-kill-subdir)
      ("Y" dired-do-relsymlink)
      ("z" diredp-compress-this-file)
      ("Z" dired-do-compress)
      ("q" nil)
      ("." nil :color blue))

    ;; FIXME
    (general-define-key :keymaps 'dired-mode-map "." 'hydra-dired/body))

  (use-package major-mode-hydra
    :ensure t
    :after hydra
    :bind
    ("C-M-<return>" . major-mode-hydra)
    :config
    (major-mode-hydra-define emacs-lisp-mode nil
      ("Eval"
       (("b" eval-buffer "buffer")
        ("e" eval-defun "defun")
        ("r" eval-region "region")))))

  (use-package use-package-hydra 
    :ensure t
    :after use-package hydra)

  (elpaca-wait)
#+END_SRC

** TODO evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :demand t
  :preface (setq evil-want-keybinding nil)
  :custom
  (evil-want-integration t) ;; This is optional since it's already set to t by default.
  (evil-want-C-i-jump t)
  (evil-undo-system 'undo-fu)
  (evil-shift-width 2 "same behavior for vim")
  (evil-complete-all-buffers nil)
  :config
  (defun +evil-kill-minibuffer () (interactive)
    (when (windowp (active-minibuffer-window)) (evil-ex-search-exit)))

  (add-hook 'mouse-leave-buffer-hook #'+evil-kill-minibuffer)
  (evil-mode))

(use-package evil-collection
  :after (evil)
  :config (evil-collection-init)
  :custom
  (evil-collection-elpaca-want-g-filters nil)
  (evil-collection-setup-minibuffer t "Add evil bindings to minibuffer")
  (evil-collection-company-use-tng t))

(use-package evil-nerd-commenter
  :after (general)
  :commands (evilnc-comment-operator
             evilnc-inner-comment
             evilnc-outer-commenter)
  ;; :custom (general-define-key :state '(normal visual) "gc" 'evilnc-comment-operator)
  :general
  ([remap comment-line] #'evilnc-comment-or-uncomment-lines
   :keymaps 'prog-mode-map
   :states '(normal visual) "gc" 'evilnc-comment-operator))

(use-package evil-matchit :config (global-evil-matchit-mode 1))
(use-package evil-lion :elpaca (evil-lion :host github :repo "edkolev/evil-lion" :files ("*" (:exclude ".git"))) :config (evil-lion-mode))

(use-package evil-surround :config (global-evil-surround-mode 1))
(use-package evil-embrace
  :commands embrace-add-pair embrace-add-pair-regexp
  :after evil-surround
  :init (evil-embrace-enable-evil-surround-integration)
  :config (setq evil-embrace-show-help nil)
  :hook (org-mode . embrace-org-mode-hook)
  :hook (emace-lisp-mode . embrace-emacs-lisp-mode-hook))

(use-package evil-escape
  :commands evil-escape
  :init
  (setq evil-escape-excluded-states '(normal visual multiedit emacs motion)
        evil-escape-excluded-major-modes '(treemacs-mode vterm-mode))
  (evil-define-key '(insert replace visual operator) 'global "\C-g" #'evil-escape))

(use-package evil-exchange :config (evil-exchange-install))

(use-package evil-traces :after evil :config (evil-traces-use-diff-faces) (evil-traces-mode))

(use-package evil-goggles
  :after evil
  :demand
  :init
  (setq evil-goggles-duration 0.05)
  :config
  (push '(evil-operator-eval
          :face evil-goggles-yank-face
          :switch evil-goggles-enable-yank
          :advice evil-goggles--generic-async-advice)
        evil-goggles--commands)
  (evil-goggles-mode)
  (evil-goggles-use-diff-faces))

(use-package evil-snipe
  :after evil
  :demand
  :config
  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1))

(use-package evil-iedit-state
  :elpaca (evil-iedit-state :repo "kassick/evil-iedit-state")
  :general
  (tyrant-def
    "s e" '(evil-iedit-state/iedit-mode :wk "iedit")
    "s q" '(evil-iedit-state/quit-iedit-mode :wk "quit iedit")))
#+END_SRC

* Complete
** vertico
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :demand
    ;; :hook (minibuffer-setup . vertico-repeat-save)
    :config
    (vertico-mode)
    (setq vertico-scroll-margin 0
          vertico-resize t))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (savehist-mode)

  ;; A few more useful configurations...
  (use-feature emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" "" crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq display-line-numbers-type 'relative)
    (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  ;; support Pinyin first character match for orderless, avy etc.
  (use-package pinyinlib :ensure t)

  (use-package orderless
    :ensure t
    :init
    (setq completion-styles '(orderless partial-completion basic))
    (setq orderless-component-separator "[ &]") ; & is for company because space will break completion
    (setq completion-category-defaults nil)
    (setq completion-category-overrides nil)
    :config
    (defun completion--regex-pinyin (str) (orderless-regexp (pinyinlib-build-regexp-string str)))
    (add-to-list 'orderless-matching-styles 'completion--regex-pinyin))

  ;; minibuffer helpful annotations
  (use-package marginalia
    :ensure t
    :hook (elpaca-after-init . marginalia-mode)
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))

  (use-package consult
    :ensure t
    :after org
    :bind (([remap goto-line]                     . consult-goto-line)
           ([remap isearch-forward]               . consult-line-symbol-at-point) ; my-consult-ripgrep-or-line
           ([remap switch-to-buffer]              . consult-buffer)
           ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
           ([remap switch-to-buffer-other-frame]  . consult-buffer-other-frame)
           ([remap yank-pop]                      . consult-yank-pop)
           ([remap apropos]                       . consult-apropos)
           ([remap bookmark-jump]                 . consult-bookmark)
           ([remap goto-line]                     . consult-goto-line)
           ([remap imenu]                         . consult-imenu)
           ([remap multi-occur]                   . consult-multi-occur)
           ([remap recentf-open-files]            . consult-recent-file)
           ("C-x j"                               . consult-mark)
           ("C-c g"                               . consult-ripgrep)
           ("C-c f"                               . consult-find)
           ("\e\ef"                               . consult-locate) ; need to enable locate first
           ("C-c n h"                             . my/consult-find-org-headings)
           :map org-mode-map
           ("C-c C-j"                             . consult-org-heading)
           :map minibuffer-local-map
           ("C-r"                                 . consult-history)
           :map isearch-mode-map
           ("C-;"                                 . consult-line)
           :map prog-mode-map
           ("C-c C-j"                             . consult-outline))
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; MacOS locate doesn't support `--ignore-case --existing' args.
    (setq consult-locate-args (pcase system-type
                                ('gnu/linux "locate --ignore-case --existing --regex")
                                ('darwin "mdfind -name")))
    :config
    (consult-customize
      consult-theme
      :preview-key '(:debounce 0.2 any)
      consult-ripgrep consult-git-grep consult-grep
      consult-bookmark consult-recent-file consult-xref
      consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
      :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    (autoload 'projectile-project-root "projectile")
    (setq consult-project-root-function #'projectile-project-root)

    ;; Use `consult-ripgrep' instead of `consult-line' in large buffers
    (defun consult-line-symbol-at-point ()
      "Consult line the synbol where the point is"
      (interactive)
      (consult-line (thing-at-point 'symbol))))
#+END_SRC

** embark
#+BEGIN_SRC emacs-lisp
(use-package embark
  :demand t
  :ensure t
  :general
  (:keymaps 'override
   "C-;" 'embark-dwim
   :states '(normal insert motion emacs)
   "C-." 'embark-act)

  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))


(use-package cape
  :ensure t
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-keyword)  ; programming language keyword
  (add-to-list 'completion-at-point-functions #'cape-ispell)
  (add-to-list 'completion-at-point-functions #'cape-dict)
  (add-to-list 'completion-at-point-functions #'cape-symbol)   ; elisp symbol
  (add-to-list 'completion-at-point-functions #'cape-line)

  :config
  (setq cape-dict-file (expand-file-name "etc/hunspell_dict.txt" user-emacs-directory))

  ;; for Eshell:
  ;; ===========
  ;; Silence the pcomplete capf, no errors or messages!
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

  ;; and behaves as a pure `completion-at-point-function'.
  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))
#+END_SRC

** corfu
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    (corfu-preview-current nil)    ;; Disable current candidate preview
    (corfu-preselect 'prompt)      ;; Preselect the prompt
    (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))
#+END_SRC

* UI
禁止展示菜单栏、工具栏和纵向滚动条
禁止菜单栏、工具栏、滚动条模式，禁止启动屏幕和文件对话框
禁止自动缩放窗口先
在这个阶段不编译
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

(setq frame-inhibit-implied-resize t)
(setq inhibit-splash-screen t)
(setq use-file-dialog nil)

(setq comp-deferred-compilation nil)
#+END_SRC

** default
#+BEGIN_SRC emacs-lisp
;; 禁用一些GUI特性
(setq use-dialog-box nil)               ; 鼠标操作不使用对话框
(setq inhibit-default-init t)           ; 不加载 `default' 库
(setq inhibit-startup-screen t)         ; 不加载启动画面
(setq inhibit-startup-message t)        ; 不加载启动消息
(setq inhibit-startup-buffer-menu t)    ; 不显示缓冲区列表

;; 设置自动折行宽度为80个字符，默认值为70
(setq-default fill-column 80)

;; 设置大文件阈值为100MB，默认10MB
(setq large-file-warning-threshold 100000000)

;; 以16进制显示字节数
(setq display-raw-bytes-as-hex t)
;; 有输入时禁止 `fontification' 相关的函数钩子，能让滚动更顺滑
(setq redisplay-skip-fontification-on-input t)

;; 禁止响铃
(setq ring-bell-function 'ignore)

;; 在光标处而非鼠标所在位置粘贴
(setq mouse-yank-at-point t)

;; 拷贝粘贴设置
(setq select-enable-primary nil)        ; 选择文字时不拷贝
(setq select-enable-clipboard t)        ; 拷贝时使用剪贴板

;; 鼠标滚动设置
(setq scroll-step 2)
(setq scroll-margin 2)
(setq hscroll-step 2)
(setq hscroll-margin 2)
(setq scroll-conservatively 101)
(setq scroll-up-aggressively 0.01)
(setq scroll-down-aggressively 0.01)
(setq scroll-preserve-screen-position 'always)

;; 对于高的行禁止自动垂直滚动
(setq auto-window-vscroll nil)

;; 设置新分屏打开的位置的阈值
(setq split-width-threshold (assoc-default 'width default-frame-alist))
(setq split-height-threshold nil)

;; TAB键设置，在Emacs里不使用TAB键，所有的TAB默认为4个空格
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

;; yes或no提示设置，通过下面这个函数设置当缓冲区名字匹配到预设的字符串时自动回答yes
(setq original-y-or-n-p 'y-or-n-p)
(defalias 'original-y-or-n-p (symbol-function 'y-or-n-p))
(defun default-yes-sometimes (prompt)
  "automatically say y when buffer name match following string"
  (if (or (string-match "has a running process" prompt)
          (string-match "does not exist; create" prompt)
          (string-match "modified; kill anyway" prompt)
          (string-match "Delete buffer using" prompt)
          (string-match "Kill buffer of" prompt)
          (string-match "still connected.  Kill it?" prompt)
          (string-match "Shutdown the client's kernel" prompt)
          (string-match "kill them and exit anyway" prompt)
          (string-match "Revert buffer from file" prompt)
          (string-match "Kill Dired buffer of" prompt)
          (string-match "delete buffer using" prompt)
          (string-match "Kill all pass entry" prompt)
          (string-match "for all cursors" prompt)
          (string-match "Do you want edit the entry" prompt))
      t
      (original-y-or-n-p prompt)))
(defalias 'yes-or-no-p 'default-yes-sometimes)
(defalias 'y-or-n-p 'default-yes-sometimes)

;; 设置剪贴板历史长度300，默认为60
(setq kill-ring-max 200)

;; 在剪贴板里不存储重复内容
(setq kill-do-not-save-duplicates t)

;; 设置位置记录长度为6，默认为16
;; 可以使用 `counsel-mark-ring' or `consult-mark' (C-x j) 来访问光标位置记录
;; 使用 C-x C-SPC 执行 `pop-global-mark' 直接跳转到上一个全局位置处
;; 使用 C-u C-SPC 跳转到本地位置处
(setq mark-ring-max 6)
(setq global-mark-ring-max 6)

;; 设置 emacs-lisp 的限制
(setq max-lisp-eval-depth 10000)        ; 默认值为 800
(setq max-specpdl-size 10000)           ; 默认值为 1600

;; 启用 `list-timers', `list-threads' 这两个命令
(put 'list-timers 'disabled nil)
(put 'list-threads 'disabled nil)

;; 在命令行里支持鼠标
(xterm-mouse-mode 1)

;; 退出Emacs时进行确认
(setq confirm-kill-emacs 'y-or-n-p)

;; 在模式栏上显示当前光标的列号
(column-number-mode t)

;; 配置所有的编码为UTF-8，参考：
;; https://thraxys.wordpress.com/2016/01/13/utf-8-in-emacs-everywhere-forever/
;; (setq locale-coding-system 'utf-8)
;; (set-terminal-coding-system 'utf-8)
;; (set-keyboard-coding-system 'utf-8)
;; (set-selection-coding-system 'utf-8)
;; (set-default-coding-systems 'utf-8)
;; (set-language-environment 'utf-8)
;; (set-clipboard-coding-system 'utf-8)
;; (set-file-name-coding-system 'utf-8)
;; (set-buffer-file-coding-system 'utf-8)
;; (prefer-coding-system 'utf-8)
;; (modify-coding-system-alist 'process "*" 'utf-8)
;; (when (display-graphic-p) (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC
** treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                2000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name "var/treemacs.org" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-project-follow-into-home        nil
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t) (treemacs-git-mode 'deferred))
      (`(t . _) (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil :after (treemacs evil) :ensure t)

(use-package treemacs-projectile :after (treemacs projectile) :ensure t)

(use-package treemacs-magit :after (treemacs magit) :ensure t)

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :ensure t
  :config (treemacs-set-scope-type 'Tabs))
#+END_SRC
** font
#+BEGIN_SRC emacs-lisp
(defun fonts-installed (&rest font-list) (reverse (cl-intersection font-list (font-family-list) :test #'equal)))

(use-package fontaine
  :ensure t
  :when (display-graphic-p)
  :config
  (setq fontaine-latest-state-file (locate-user-emacs-file "etc/fontaine-latest-state.eld"))
  (setq fontaine-presets
    '((regular
       :default-height 140
       :default-weight regular
       :fixed-pitch-height 1.0
       :variable-pitch-height 1.0)
      (large
       :default-height 180
       :default-weight normal
       :fixed-pitch-height 1.0
       :variable-pitch-height 1.05)
      (t
       :default-family "Fira Code"
       :fixed-pitch-family "Fira Code"
       :variable-pitch-family "Fira Code"
       :italic-family "Fira Code"
       :variable-pitch-weight normal
       :bold-weight normal
       :italic-slant italic
       :line-spacing 0.1)))
  ;; (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))
  (fontaine-set-preset 'regular)

  ;; set emoji font
  (set-fontset-font t (if (version< emacs-version "28.1") '(#x1f300 . #x1fad0) 'emoji)
    (car (fonts-installed "Noto Emoji" "Symbola" "Apple Color Emoji" "Noto Color Emoji" "Segoe UI Emoji")))
  ;; set Chinese font
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font
     (frame-parameter nil 'font)
     charset
     (font-spec :family (car (fonts-installed "LXGW Wenkai" "霞鹜文楷" "Sarasa Gothic SC" "更纱黑体 SC")))))

  ;; set Chinese font scale
  (setq face-font-rescale-alist `(
                                  ("Symbola"             . 1.3)
                                  ("Microsoft YaHei"     . 1.2)
                                  ("WenQuanYi Zen Hei"   . 1.2)
                                  ("Sarasa Mono SC Nerd" . 1.2)
                                  ("PingFang SC"         . 1.16)
                                  ("Lantinghei SC"       . 1.16)
                                  ("Kaiti SC"            . 1.16)
                                  ("Yuanti SC"           . 1.16)
                                  ("Apple Color Emoji"   . 0.91))))
;; TODO
(use-package fontify-face)
#+END_SRC

** icon
#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons
    :custom
    (nerd-icons-font-family "Symbols Nerd Font Mono"))

  (use-package nerd-icons-ibuffer
    :ensure t
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

  (use-package nerd-icons-completion
    :after marginalia
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

  (use-package nerd-icons-dired :hook (dired-mode . nerd-icons-dired-mode))
  (use-package treemacs-nerd-icons :config (treemacs-load-theme "nerd-icons"))
#+END_SRC

** dired
#+begin_src emacs-lisp
  (use-package diredfl
    :ensure t
    :hook (dired-mode . diredfl-mode))

  (when (executable-find "fd")
    (use-package fd-dired))
#+end_src
** modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (elpaca-after-init . doom-modeline-mode)
    :custom
    (doom-modeline-irc nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-gnus nil)
    (doom-modeline-github nil)
    (doom-modeline-persp-name t)
    (doom-modeline-unicode-fallback t)
    (doom-modeline-enable-word-count t)
    (doom-modeline-buffer-file-name-style 'truncate-upto-root)) ; : auto

  ;; [[https://github.com/tarsius/minions][minions]] 插件能让模式栏变得清爽，将次要模式隐藏起来。
  (use-package minions
    :ensure t
    :hook (elpaca-after-init . minions-mode))

  (use-package keycast
    :ensure t
    :hook (elpaca-after-init . keycast-mode)
    ;; :custom-face
    ;; (keycast-key ((t (:background "#0030b4" :weight bold))))
    ;; (keycast-command ((t (:foreground "#0030b4" :weight bold))))
    :config
    ;; set for doom-modeline support
    ;; With the latest change 72d9add, mode-line-keycast needs to be modified to keycast-mode-line.
    (define-minor-mode keycast-mode
      "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
      :global t
      (if keycast-mode
        (progn
          (add-hook 'pre-command-hook 'keycast--update t)
          (add-to-list 'global-mode-string '("" keycast-mode-line "  ")))
        (remove-hook 'pre-command-hook 'keycast--update)
        (setq global-mode-string (delete '("" keycast-mode-line "  ") global-mode-string))))

    (dolist (input '(self-insert-command org-self-insert-command))
      (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

    (dolist (event '(mouse-event-p mouse-movement-p mwheel-scroll))
      (add-to-list 'keycast-substitute-alist `(,event nil)))

    (setq keycast-log-format "%-20K%C\n")
    (setq keycast-log-frame-alist '((minibuffer . nil)))
    (setq keycast-log-newest-first t))

  (use-package anzu
      :config
      (global-anzu-mode +1))

  (use-package evil-anzu :after evil)
#+END_SRC

** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :hook 
    (elpaca-after-init . (lambda () (dashboard-open)))
    ;; :init  (dashboard-setup-startup-hook)
    :config
    (setq dashboard-center-content t
          dashboard-set-file-icons t
          dashboard-set-heading-icons t
          dashboard-projects-backend 'projectile))
#+END_SRC
** terminal
#+begin_src emacs-lisp
(use-package eshell
  :elpaca nil
  :ensure nil
  :functions eshell/alias
  :hook ((eshell-mode . (lambda () (term-mode-common-init) (visual-line-mode 1))))
  :config
  (defun term-mode-common-init ()
    (setq-local scroll-margin 0)
    (setq-local truncate-lines t))

  (defalias 'eshell/vi 'find-file)
  (defalias 'eshell/vim 'find-file)

  (defun eshell/bat (file)
    "cat FILE with syntax highlight."
    (with-temp-buffer
      (insert-file-contents file)
      (let ((buffer-file-name file))
        (delay-mode-hooks
          (set-auto-mode)
          (font-lock-ensure)))
      (buffer-string)))
  (defalias 'eshell/cat 'eshell/bat)

  ;; 交互式进入目录
  (defun eshell/z ()
    "cd to directory with completion."
    (let ((dir (completing-read "Directory: " (ring-elements eshell-last-dir-ring) nil t)))
      (eshell/cd dir)))

  ;; 查找文件
  (defun eshell/f (filename &optional dir)
    "Search for files matching FILENAME in either DIR or the
current directory."
    (let ((cmd (concat
                ;; using find
                (executable-find "find")
                " " (or dir ".")
                " -not -path '*/.git*'"            ; ignore .git directory
                " -and -not -path 'build'"         ; ignore cmake build directory
                " -and -not -path '*/eln-cache*'"  ; ignore eln cache
                " -and -type f -and -iname "
                "'*" filename "*'")))
      (eshell-command-result cmd)))

  :custom
  (eshell-banner-message
   '(format "%s %s\n"
            (propertize (format " %s " (string-trim (buffer-name)))
                        'face 'mode-line-highlight)
            (propertize (current-time-string)
                        'face 'font-lock-keyword-face)))
  (eshell-scroll-to-bottom-on-input 'all)
  (eshell-scroll-to-bottom-on-output 'all)
  (eshell-kill-on-exit t)
  (eshell-kill-processes-on-exit t)
  ;; Don't record command in history if starts with whitespace
  (eshell-input-filter 'eshell-input-filter-initial-space)
  (eshell-error-if-no-glob t)
  (eshell-glob-case-insensitive t)
  ;; set scripts
  (eshell-rc-script (locate-user-emacs-file "etc/eshell/profile"))
  (eshell-login-script (locate-user-emacs-file "etc/eshell/login")))
  


(use-package em-hist
  :elpaca nil
  :ensure nil
  :defer t
  :custom
  (eshell-history-size 1024)
  (eshell-hist-ignoredups t)
  (eshell-save-history-on-exit t))

(use-package em-rebind
  :elpaca nil
  :ensure nil
  :commands eshell-delchar-or-maybe-eof)

(use-package esh-mode
  :elpaca nil
  :ensure nil
  :bind (:map eshell-mode-map
              ("C-d" . eshell-delchar-or-maybe-eof)
              ("C-r" . consult-history)
              ("C-l" . eshell/clear)))
  

(use-package eshell-syntax-highlighting
  :after esh-mode
  :ensure t
  :hook (eshell-mode . eshell-syntax-highlighting-global-mode)
  :custom-face
  (eshell-syntax-highlighting-shell-command-face ((t (:foreground "#7cc77f" :bold t)))))

(use-package vterm :unless windows?)
#+end_src
** theme
*** TODO ef-themes
#+begin_src emacs-lisp :tangle no
  (use-package ef-themes
    :ensure t
    :bind ("C-c t" . ef-themes-toggle)
    :init
    ;; set two specific themes and switch between them
    (setq ef-themes-to-toggle '(ef-summer ef-winter))
    ;; set org headings and function syntax
    (setq ef-themes-headings ; read the manual's entry or the doc string
        '((0 . (variable-pitch light 1.2))
          (1 . (variable-pitch light 1.1))
          (2 . (variable-pitch regular 1.0))
          (3 . (variable-pitch regular 1.0))
          (4 . (variable-pitch regular 1.0))
          (5 . (variable-pitch 1.0)) ; absence of weight means `bold'
          (6 . (variable-pitch 1.0))
          (7 . (variable-pitch 1.0))
          (t . (variable-pitch 1.0))))
    (setq ef-themes-region '(intense no-extend neutral))
    ;; Disable all other themes to avoid awkward blending:
    (mapc #'disable-theme custom-enabled-themes)
    (ef-themes-load-random 'dark)

    :config
    ;; auto change theme, aligning with system themes.
    (defun my/apply-theme (appearance)
      "Load theme, taking current system APPEARANCE into consideration."
      (mapc #'disable-theme custom-enabled-themes)
      (pcase appearance
        ('light (if (display-graphic-p) (ef-themes-load-random 'light) (ef-themes-load-random 'dark)))
        ('dark (ef-themes-load-random 'dark))))

    (when macos? (add-hook 'ns-system-appearance-change-functions #'my/apply-theme)))

#+end_src
*** TODO doom-themes
#+begin_src emacs-lisp :tangle no
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

*** TODO zenburn
#+begin_src emacs-lisp
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t))
#+end_src

** window
#+begin_src emacs-lisp
  (use-package ace-window :hook (elpaca-after-init . winner-mode))

  (use-package transpose-frame
    :general
    (tyrant-def
      "w [" 'transpose-frame
      "w ]" 'rotate-frame))

  (use-package shackle
    :hook (elpaca-after-init . shackle-mode)
    :init
    (setq shackle-lighter "")
    (setq shackle-select-reused-windows nil) ; default nil
    (setq shackle-default-alignment 'below)  ; default below
    (setq shackle-rules
          ;; CONDITION(:regexp)            :select     :inhibit-window-quit   :size+:align|:other     :same|:popup
          '((compilation-mode              :ignore t)
            ("\\*Async Shell.*\\*" :regexp t :ignore t)
            ("\\*corfu.*\\*"       :regexp t :ignore t)
            ("*eshell*"                    :select t                          :size 0.4  :align t     :popup t)
            (helpful-mode                  :select t                          :size 0.6  :align right :popup t)
            ("*Messages*"                  :select t                          :size 0.4  :align t     :popup t)
            ("*Calendar*"                  :select t                          :size 0.3  :align t     :popup t)
            ("*info*"                      :select t                                                  :same t)
            (magit-status-mode             :select t   :inhibit-window-quit t                         :same t)
            (magit-log-mode                :select t   :inhibit-window-quit t                         :same t))))

  (use-package popper
    :ensure t
    :bind (("M-`"     . popper-toggle-latest)
           ("M-<tab>" . popper-cycle)
           ("M-\\"    . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "\\*Async Shell Command\\*"
            help-mode
            helpful-mode
            occur-mode
            pass-view-mode
            "^\\*eshell.*\\*$" eshell-mode ;; eshell as a popup
            "^\\*shell.*\\*$"  shell-mode  ;; shell as a popup
            ("\\*corfu\\*" . hide)
            (compilation-mode . hide)
            ;; derived from `fundamental-mode' and fewer than 10 lines will be considered a popup
            (lambda (buf) (with-current-buffer buf
                            (and (derived-mode-p 'fundamental-mode)
                                 (< (count-lines (point-min) (point-max))
                                    10))))))
    (popper-mode +1)
    (popper-echo-mode +1)
    :config
    ;; group by project.el, projectile, directory or perspective
    (setq popper-group-function nil)

    ;; pop in child frame or not
    (setq popper-display-function #'display-buffer-in-child-frame)

    ;; use `shackle.el' to control popup
    (setq popper-display-control nil))
#+end_src

** misc
#+begin_src emacs-lisp
  (use-package undo-fu)
#+end_src

** input
*** rime :rime:input:
#+begin_src emacs-lisp
  (use-package rime
    :defer t
    :custom
    (default-input-method "rime")
    (rime-show-candidate 'posframe)
    (rime-user-data-dir "~/Dotfiles/config/rime")
    (rime-disable-predicates '(rime-predicate-after-alphabet-char-p ;; 在英文字符串之后（必须为以字母开头的英文字符串）
                               ;; rime-predicate-after-ascii-char-p ;; 任意英文字符后
                               rime-predicate-prog-in-code-p ;; 在 prog-mode 和 conf-mode 中除了注释和引号内字符串之外的区域
                               rime-predicate-in-code-string-p ;; 在代码的字符串中，不含注释的字符串。
                               rime-predicate-evil-mode-p ;; 在 evil-mode 的非编辑状态下
                               rime-predicate-hydra-p ;; 如果激活了一个 hydra keymap
                               ;; rime-predicate-ace-window-p ;; 激活 ace-window-mode
                               ;; rime-predicate-current-input-punctuation-p ;; 当要输入的是符号时
                               rime-predicate-punctuation-after-space-cc-p ;; 当要在中文字符且有空格之后输入符号时
                               rime-predicate-punctuation-after-ascii-p ;; 当要在任意英文字符之后输入符号时
                               rime-predicate-punctuation-line-begin-p ;; 在行首要输入符号时
                               rime-predicate-space-after-ascii-p ;; 在任意英文字符且有空格之后
                               rime-predicate-space-after-cc-p ;; 在中文字符且有空格之后
                               rime-predicate-current-uppercase-letter-p ;; 将要输入的为大写字母时
                               rime-predicate-tex-math-or-command-p));; 在 (La)TeX 数学环境中或者输入 (La)TeX 命令时
    :bind
    (:map rime-mode-map ("C-," . 'rime-force-enable)))
#+end_src

* IDE
#+begin_src emacs-lisp
  ;; (use-package beacon :config (beacon-mode 1))
  (use-package lentic :config (global-lentic-mode))
  (use-package apheleia :config (apheleia-global-mode 1))
  (use-package editorconfig :config (editorconfig-mode 1))

  (use-package dap-mode
    :defer t
    :config
    (setq dap-auto-configure-features '(sessions locals controls tooltip))
    (dap-mode 1)
    (require 'dap-python)
    (setq dap-python-debugger 'debugpy)
    (require 'dap-node)

    (dap-register-debug-template
      "Node::Attach"
      (list :type "node"
            :request "attach"
            :port 9229
            :name "Node::Attach")))
#+end_src

** treesit
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
          (c . ("https://github.com/tree-sitter/tree-sitter-c"))
          (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
          (css . ("https://github.com/tree-sitter/tree-sitter-css"))
          (cmake . ("https://github.com/uyha/tree-sitter-cmake"))
          (csharp     . ("https://github.com/tree-sitter/tree-sitter-c-sharp.git"))
          (dockerfile . ("https://github.com/camdencheek/tree-sitter-dockerfile"))
          (elisp . ("https://github.com/Wilfred/tree-sitter-elisp"))
          (go . ("https://github.com/tree-sitter/tree-sitter-go"))
          (gomod      . ("https://github.com/camdencheek/tree-sitter-go-mod.git"))
          (html . ("https://github.com/tree-sitter/tree-sitter-html"))
          (java       . ("https://github.com/tree-sitter/tree-sitter-java.git"))
          (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
          (json . ("https://github.com/tree-sitter/tree-sitter-json"))
          (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
          (make . ("https://github.com/alemuller/tree-sitter-make"))
          (markdown . ("https://github.com/MDeiml/tree-sitter-markdown" nil "tree-sitter-markdown/src"))
          (ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml" nil "ocaml/src"))
          (org . ("https://github.com/milisims/tree-sitter-org"))
          (python . ("https://github.com/tree-sitter/tree-sitter-python"))
          (php . ("https://github.com/tree-sitter/tree-sitter-php"))
          (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "typescript/src"))
          (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "tsx/src"))
          (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
          (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
          (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
          (vue . ("https://github.com/merico-dev/tree-sitter-vue"))
          (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))
          (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
          (zig . ("https://github.com/GrayJack/tree-sitter-zig"))))

  (setq major-mode-remap-alist
        '((c-mode          . c-ts-mode)
          (c++-mode        . c++-ts-mode)
          (cmake-mode      . cmake-ts-mode)
          (conf-toml-mode  . toml-ts-mode)
          (css-mode        . css-ts-mode)
          (js-mode         . js-ts-mode)
          (js-json-mode    . json-ts-mode)
          (python-mode     . python-ts-mode)
          (sh-mode         . bash-ts-mode)
          (typescript-mode . typescript-ts-mode)))

  (add-hook 'emacs-lisp-mode-hook #'(lambda () (treesit-parser-create 'elisp)))
  (setq treesit-extra-load-path (list (expand-file-name "var/treesit" user-emacs-directory)))

  (use-package treesit-auto  :config (global-treesit-auto-mode))
#+end_src

** lisp
#+begin_src emacs-lisp
(use-package cider)

(use-package slime
  :general
  (:keymaps 'slime-mode-map
            "C-<return>" 'slime-eval-last-expression)
  :config
  (setq inferior-lisp-program "ros run"))

(use-package parinfer-rust-mode
  :hook '(emacs-lisp-mode lisp-mode)
  :config
  (electric-pair-mode -1))
#+end_src

** web
#+begin_src emacs-lisp
(use-package css-mode :elpaca nil :init (setq css-indent-offset 2))
;; (use-package scss-mode :init (setq scss-compile-at-save nil))
;; (use-package less-css-mode)
(use-package json-mode)

(use-package js2-mode
  :mode (("\\.js\\'" . js2-mode)
         ("\\.jsx\\'" . js2-jsx-mode))
  :interpreter (("node" . js2-mode)
                ("node" . js2-jsx-mode))
  :hook ((js2-mode . js2-imenu-extras-mode)
         (js2-mode . js2-highlight-unused-variables-mode)))

(use-package prettier
  :diminish
  :hook ((js-mode js2-mode css-mode sgml-mode web-mode) . prettier-mode)
  :init (setq prettier-pre-warm 'none))

(use-package typescript-mode :mode ("\\.ts[x]\\'" . typescript-mode))

(use-package web-mode
  :mode "\\.\\(phtml\\|php\\|[gj]sp\\|as[cp]x\\|erb\\|djhtml\\|html?\\|hbs\\|ejs\\|jade\\|swig\\|tm?pl\\|vue\\)$"
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2))

;; Adds node_modules/.bin directory to `exec_path'
(use-package add-node-modules-path :hook ((web-mode js-mode js2-mode) . add-node-modules-path))

(use-package restclient
  :mode ("\\.http\\'" . restclient-mode)
  :config
  (use-package restclient-test
    :diminish
    :hook (restclient-mode . restclient-test-mode)))
#+end_src

** misc
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode)
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-method 'fill))

(use-package rainbow-delimiters :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

* Org Mode
** default
#+begin_src emacs-lisp
  (setq org-directory  "~/Notes"
        org-archive-location (concat org-directory "/archive/%s::")
        org-contacts-files (list (concat org-directory "/archive/contacts.org"))
        org-agenda-files (list org-directory)
        deft-directory org-directory
        org-roam-directory org-directory
        org-brain-path org-directory
        org-roam-file-exclude-regexp ".*/bak/.*"
        org-brain-visualize-default-choices 'all
        rmh-elfeed-org-files (list (concat org-directory "/feeds.org")))

  (setq org-fontify-whole-heading-line t
        org-fontify-quote-and-verse-blocks t
        org-hide-macro-markers t
        org-startup-indented t
        org-adapt-indentation t
        org-startup-with-inline-images t
        org-startup-with-latex-preview t)
#+end_src

** note
#+begin_src emacs-lisp
    (use-package org-roam
    :after org
    :init
    (setq org-roam-directory org-directory
          org-roam-v2-ack t)
    :config
    (org-roam-setup)
    (add-to-list 'display-buffer-alist
                 '(("*org-roam*"
                    (display-buffer-in-direcion)
                    (direction . right)
                    (window-width . 0.33)
                    (window-height . fit-window-to-buffer))))
    :general
    (tyrant-def
      "n" (cons "Notes" (make-sparse-keymap))
      "n b" 'org-roam-buffer-toggle
      "n f" 'org-roam-node-find
      "n g" 'org-roam-graph
      "n i" 'org-roam-node-insert
      "n c" 'org-roam-capture
      "n t" 'org-roam-tag-add
      "n r" 'org-roam-ref-add
      "n a" 'org-roam-alias-add))

  (use-package org-roam-ui)


  (setq deft-recursive t
        deft-recursive-ignore-dir-regexp (rx (or "." ".." "logseq") eol))

  (setq org-agenda-archives-mode t)
  (setq org-export-select-tags '("Publish" "Public" "export")
        org-publish-project-alist
        '(("content"
           :base-directory "~/Notes/content"
           :publishing-directory "~/Notes/publish"
           ;; :publishing-function (org-org-publish-to-org org-md-publish-to-md)
           :publishing-function org-org-publish-to-org
           :select-tags ("Publish" "Public" "Export" "export" "publish" "public")
           :exclude-tags ("Private" "Secret" "noexport")
           :recursive t
           :with-broken-links t
           :with-toc nil)))

  (setq org-log-done 'time)
  ;; (setq org-priority-lowest ?E)
  (setq org-contacts-icon-use-gravatar nil)
  (setq org-superstar-headline-bullets-list '("☯", "☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷"))
  (setq org-todo-keywords
        '((sequence "NEXT(n)" "TODO(t)" "PEND(p)" "WILL(w@/!)" "|" "DONE(d)" "QUIT(q@)")
          (sequence "[-](N)" "[ ](T)" "[:](P)" "[?](W)" "|" "[X](D)" "[Q](Q)")))
  (setq org-todo-keyword-faces
        '(("TODO" :foreground "orange"       :weight bold)
          ("[ ]"  :foreground "orange"       :weight bold)
          ("NEXT" :foreground "yellow"       :weight bold)
          ("[-]"  :foreground "yellow"       :weight bold)
          ("PEND" :foreground "pink"         :weight bold)
          ("[:]"  :foreground "pink"         :weight bold)
          ("WILL" :foreground "purple"       :weight bold)
          ("[?]"  :foreground "purple"       :weight bold)
          ("DONE" :foreground "forest green" :weight bold)
          ("[X]"  :foreground "forest green" :weight bold)
          ("QUIT" :foreground "grey"         :weight bold)
          ("[Q]"  :foreground "grey"         :weight bold)))

  (use-package org-contrib)

  (use-package org-appear
   :ensure t
   :hook (org-mode . org-appear-mode)
   :config
   (setq org-appear-autolinks t)
   (setq org-appear-autosubmarkers t)
   (setq org-appear-autoentities t)
   (setq org-appear-autokeywords t)
   (setq org-appear-inside-latex t))

  (use-package org-fragtog :hook (org-mode . org-fragtog-mode))

  ;; (use-package tex :elpaca auctex)

  (use-package mpvi 
    :elpaca (mpvi :repo "https://github.com/lorniu/mpvi")
    :general
    (tyrant-def))
#+end_src

** pretty
*** TODO [[https://github.com/minad/org-modern][org-modern]]
#+begin_src emacs-lisp :tangle no
  (use-package org-modern
    :ensure t
    :config
    (setq org-modern-star '("☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷") ;; "☯"
          org-pretty-entities t
          org-modern-hide-stars nil
          org-hide-emphasis-markers t)
    (global-org-modern-mode))
#+end_src

** elfeed
#+begin_src emacs-lisp
(use-package elfeed)

(use-package elfeed-org
  :config
  (setq rmh-elfeed-org-files (list "~/Notes/feeds.org"))
  (elfeed-org))
#+end_src

* Optimize
设置垃圾回收参数
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(setq gc-cons-threshold most-positive-fixnum)
(setq gc-cons-percentage 0.6)
#+END_SRC
** override
#+BEGIN_SRC emacs-lisp
(use-package gcmh
  :demand
  :config
  (gcmh-mode 1))

(use-package helpful
  :after evil
  :init
  (setq evil-lookup-func #'helpful-at-point)
  :bind
  ([remap describe-key] . helpful-key)
  ([remap describe-command] . helpful-command)
  ([remap describe-function] . helpful-callable)
  ([remap describe-variable] . helpful-variable))

(use-package exec-path-from-shell
  :when (not windows?)
  :config
  (exec-path-from-shell-initialize))
#+END_SRC

* Other
** TODO develop
:PROPERTIES:
:HEADER-ARGS: :tangle init-dev.el
:END:
Evaluated when loading init file.
Cleaner to keep this in a separate file rather than a long single line at the top of init.org
#+BEGIN_SRC emacs-lisp
  ;;; init-dev.el --- development settings for init file  -*- lexical-binding: t; -*-
  (defcustom emacy-library-directory (concat user-emacs-directory "libs/"))

  (add-to-list 'load-path (concat emacy-library-directory "org-auto-tangle"))

  (setq-local org-confirm-babel-evaluate nil)
  (require 'org-auto-tangle)
  (org-auto-tangle-mode)
  (add-hook 'org-auto-tangle-before-tangle-hook #'check-parens)
  (add-hook 'org-auto-tangle-after-tangle-hook
            (lambda () (load-file (concat user-emacs-directory "init.el"))
              (when-let ((forms (elpaca-q<-forms (car elpaca--queues))))
                (eval `(progn ,@(apply #'append (mapcar #'cdr (reverse forms)))) t))))
  (eldoc-mode)
  (provide 'init-dev)
  ;;; init-dev.el ends here
#+END_SRC
** TODO eaf                                                         :lazycat:
#+begin_src emacs-lisp :tangle no
  (use-package eaf :elpaca (eaf :host github :repo "emacs-eaf/emacs-application-framework" :files ("*") :post-build (shell-command "python install-eaf.py --install-core-deps")))

  (defconst eaf-apps
    '(eaf-jupyter
      eaf-browser
      eaf-airshare
      eaf-file-browser
      eaf-file-manager
      eaf-file-sender
      eaf-music-player
      eaf-system-monitor
      eaf-mindmap
      eaf-org-previewer
      eaf-terminal
      eaf-netease-cloud-music
      eaf-video-player
      eaf-image-viewer
      eaf-demo
      eaf-vue-demo
      eaf-pdf-viewer
      eaf-markdown-previewer
      eaf-camera))

  (defun +emacy/install-eaf-app-deps (app-dir)
    "Install deps from dependencies.json."
    (let* ((dep-file (expand-file-name "dependencies.json" app-dir))
           (deps-dict (with-temp-buffer
                        (if (file-exists-p dep-file)
                          (insert-file-contents dep-file)
                          (insert "{}"))
                        (json-parse-string (buffer-string))))
           (pip-deps (gethash (if IS-LINUX "linux" "darwin")
                              (or (gethash "pip" deps-dict)
                                  (make-hash-table))))
           (vue-install (gethash "vue_install" deps-dict))
           (npm-install (gethash "npm_install" deps-dict))
           (npm-rebuild (gethash "npm_rebuild" deps-dict)))
      (when pip-deps
        (dolist (pkg (append pip-deps nil))
          (message "%s" (shell-command-to-string (format "pip install %s" pkg)))))
      (when vue-install
        (let ((default-directory app-dir))
          (message "%s" (shell-command-to-string "npm install"))
          (message "%s" (shell-command-to-string "npm run build"))))
      (when npm-install
        (let ((default-directory app-dir))
          (message "%s" (shell-command-to-string "npm install"))))
      (when npm-rebuild
        (let ((default-directory app-dir))
          (message "%s" (shell-command-to-string "npm rebuild"))))))

  (defmacro add-eaf-apps (apps)
    `(progn ,@(mapcar (lambda (app) `(use-package ,app
                                       :elpaca (,app :host github
                                                     :repo ,(concat "emacs-eaf/" (symbol-name app))
                                                     :files ("*")
                                                     :post-build (+emacy/install-eaf-app-deps ,(concat elpaca-builds-directory "/" (symbol-name app))))))
                      (if (symbolp apps) (eval apps) apps))))

  (add-eaf-apps eaf-apps)
#+end_src

** TODO misc
#+BEGIN_SRC emacs-lisp
  (use-package whisper :elpaca (whisper :host github :repo "natrys/whisper.el")
    :general
    (tyrant-def
      "aw" (cons "whisper" (make-sparse-keymap))
      "awr" 'whisper-run
      "awf" 'whisper-file)
    :config
    (setq whisper-model "base"
          whisper-language "cn"
          whisper-translate nil))

  (use-package yasnippet
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets)

  (use-package lsp-bridge
    :elpaca (lsp-bridge
             :host github
             :repo "manateelazycat/lsp-bridge"
             :files ("*" (:exclude ".git")))
    :config
    (global-lsp-bridge-mode)
    (evil-set-initial-state 'lsp-bridge-ref-mode 'emacs))
#+END_SRC
* Footer
#+BEGIN_SRC emacs-lisp :tangle early-init.el
  (provide 'early-init)
  ;;; early-init.el ends here
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (provide 'init)
  ;;; init.el ends here
#+END_SRC

* TODO Reference
** configs
https://remacs.cc/
https://github.com/Ethanlinyf/General-Pure-Emacs
https://github.com/HerculeWu/HubbleEmacs/blob/main/Emacs.org
https://github.com/Eason0210/.emacs.d
https://github.com/MatthewZMD/.emacs.d
https://github.com/willbchang/ward-emacs
https://github.com/redguardtoo/emacs.d
https://github.com/condy0919/.emacs.d
https://github.com/seagle0128/.emacs.d
https://github.com/nowislewis/nowisemacs/blob/master/init.org
https://github.com/purcell/emacs.d/tree/master
https://github.com/nasyxx/emacs.d

** tips
https://swsnr.de/emacs-script-pitfalls

** collections
https://github.com/lujun9972/emacs-document

** query
https://github.com/search?utf8=%E2%9C%93&q=emacs+configuration&type=repositories&p=1
