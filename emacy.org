;-*- eval: (load-file "./env/lisp/emacy-config-debug.el");   -*-
#+TITLE: Emacs Config
#+AUTHOR: Li Shuzhi
#+STARTUP: show2levels
#+STARTUP: noindent
#+FILETAGS: :emacy:config:emacs:emacs-lisp:
#+PROPERTY: header-args :tangle init.el :noweb yes :session init
#+AUTO_TANGLE: t

* Header
** early-init.el :early-init:
#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;; early-init.el --- emacs init file  -*- lexical-binding: t; -*-
#+END_SRC

** init.el
#+BEGIN_SRC emacs-lisp
  ;;; init.el --- emacs init file  -*- lexical-binding: t; -*-
  (require 'cl-lib)
#+END_SRC

* Preset
** constant :early-init:
#+BEGIN_SRC emacs-lisp :tangle early-init.el
  (defconst windows? (memq system-type '(cygwin windows-nt ms-dos)) "are we on windows")
  (defconst macos? (eq system-type 'darwin) "are we on macos")
  (defconst linux? (memq system-type '(gnu gnu/linux gnu/kfreebds berkeley-unix)) "are we on linux")
  (defconst bsd? (memq system-type '(darwin berkeley-unix gnu/kfreebsd)) "are we on bsd")
  (defconst wsl? (and linux? (string-match-p "microsoft" operating-system-release)) "are we on wsl")
#+END_SRC

** load-path
#+BEGIN_SRC emacs-lisp
(defun add-subdirs-to-load-path (search-dir)
  (interactive)
  (let* ((dir (file-name-as-directory search-dir)))
    (dolist (subdir
             ;; 过滤出不必要的目录， 提升 Emacs 启动速度
             (cl-remove-if
              #'(lambda (subdir)
                  (or
                   ;; 不是目录的都移除
                   (not (file-directory-p (concat dir subdir)))
                   ;; 目录匹配下面规则的都移除
                   (member subdir '("." ".." ;Linux 当前目录和父目录
                                    "dist" "node_modules" "__pycache__" ;语言相关的模块目录
                                    "RCS" "CVS" "rcs" "cvs" ".git" ".github")))) ;版本控制目录
              (directory-files dir)))
      (let ((subdir-path (concat dir (file-name-as-directory subdir))))
        ;; 目录下有 .el .so .dll 文件的路径才添加到 load-path 中， 提升 Emacs 启动速度
        (when (cl-some #'(lambda (subdir-file)
                           (and (file-regular-p (concat subdir-path subdir-file))
                                ;; .so .dll 文件指非 Elisp 语言编写的 Emacs 动态库
                                (member (file-name-extension subdir-file) '("el" "so" "dll"))))
                       (directory-files subdir-path))
          
          ;; 注意： add-to-list 函数的第三个参数必须为 t ， 表示加到列表末尾
          ;; 这样 Emacs 会从父目录到子目录的顺序搜索 Elisp 插件， 顺序反过来会导致 Emacs 无法正常启动
          (add-to-list 'load-path subdir-path t))

        ;; 继续递归搜索子目录
        (add-subdirs-to-load-path subdir-path)))))

(add-subdirs-to-load-path "~/.emacs.d/lib")
#+END_SRC

** exec-path
#+BEGIN_SRC emacs-lisp

#+END_SRC

** configs
#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :demand
    :config
    (setq custom-file (no-littering-expand-var-file-name "custom.el")
          whisper-install-directory (no-littering-expand-var-file-name "whisper")
          parinfer-rust-library-directory (no-littering-expand-var-file-name "parinfer-rust/"))
    (with-eval-after-load 'recentf
      (add-to-list 'recentf-exclude no-littering-var-directory)
      (add-to-list 'recentf-exclude no-littering-etc-directory)))
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :demand t
    :init
    (setq which-key-enable-extended-define-key t)
    :config
    (which-key-mode)
    :custom
    (which-key-side-window-location 'bottom)
    (which-key-sort-order 'which-key-key-order-alpha)
    (which-key-side-window-max-width 0.33)
    (which-key-idle-delay 0.12)
    :diminish which-key-mode)
#+END_SRC

* Theme
** default
  禁止展示菜单栏、工具栏和纵向滚动条
  禁止菜单栏、工具栏、滚动条模式，禁止启动屏幕和文件对话框
  禁止自动缩放窗口先
  在这个阶段不编译
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

(setq frame-inhibit-implied-resize t)
(setq inhibit-splash-screen t)
(setq use-file-dialog nil)

(setq comp-deferred-compilation nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; 禁用一些GUI特性
  (setq use-dialog-box nil)               ; 鼠标操作不使用对话框
  (setq inhibit-default-init t)           ; 不加载 `default' 库
  (setq inhibit-startup-screen t)         ; 不加载启动画面
  (setq inhibit-startup-message t)        ; 不加载启动消息
  (setq inhibit-startup-buffer-menu t)    ; 不显示缓冲区列表

  ;; 设置自动折行宽度为80个字符，默认值为70
  (setq-default fill-column 80)

  ;; 设置大文件阈值为100MB，默认10MB
  (setq large-file-warning-threshold 100000000)

  ;; 以16进制显示字节数
  (setq display-raw-bytes-as-hex t)
  ;; 有输入时禁止 `fontification' 相关的函数钩子，能让滚动更顺滑
  (setq redisplay-skip-fontification-on-input t)

  ;; 禁止响铃
  (setq ring-bell-function 'ignore)

  ;; 在光标处而非鼠标所在位置粘贴
  (setq mouse-yank-at-point t)

  ;; 拷贝粘贴设置
  (setq select-enable-primary nil)        ; 选择文字时不拷贝
  (setq select-enable-clipboard t)        ; 拷贝时使用剪贴板

  ;; 鼠标滚动设置
  (setq scroll-step 2)
  (setq scroll-margin 2)
  (setq hscroll-step 2)
  (setq hscroll-margin 2)
  (setq scroll-conservatively 101)
  (setq scroll-up-aggressively 0.01)
  (setq scroll-down-aggressively 0.01)
  (setq scroll-preserve-screen-position 'always)

  ;; 对于高的行禁止自动垂直滚动
  (setq auto-window-vscroll nil)

  ;; 设置新分屏打开的位置的阈值
  (setq split-width-threshold (assoc-default 'width default-frame-alist))
  (setq split-height-threshold nil)

  ;; TAB键设置，在Emacs里不使用TAB键，所有的TAB默认为4个空格
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  ;; yes或no提示设置，通过下面这个函数设置当缓冲区名字匹配到预设的字符串时自动回答yes
  (setq original-y-or-n-p 'y-or-n-p)
  (defalias 'original-y-or-n-p (symbol-function 'y-or-n-p))
  (defun default-yes-sometimes (prompt)
    "automatically say y when buffer name match following string"
    (if (or (string-match "has a running process" prompt)
            (string-match "does not exist; create" prompt)
            (string-match "modified; kill anyway" prompt)
            (string-match "Delete buffer using" prompt)
            (string-match "Kill buffer of" prompt)
            (string-match "still connected.  Kill it?" prompt)
            (string-match "Shutdown the client's kernel" prompt)
            (string-match "kill them and exit anyway" prompt)
            (string-match "Revert buffer from file" prompt)
            (string-match "Kill Dired buffer of" prompt)
            (string-match "delete buffer using" prompt)
            (string-match "Kill all pass entry" prompt)
            (string-match "for all cursors" prompt)
            (string-match "Do you want edit the entry" prompt))
        t
        (original-y-or-n-p prompt)))
  (defalias 'yes-or-no-p 'default-yes-sometimes)
  (defalias 'y-or-n-p 'default-yes-sometimes)

  ;; 设置剪贴板历史长度300，默认为60
  (setq kill-ring-max 200)

  ;; 在剪贴板里不存储重复内容
  (setq kill-do-not-save-duplicates t)

  ;; 设置位置记录长度为6，默认为16
  ;; 可以使用 `counsel-mark-ring' or `consult-mark' (C-x j) 来访问光标位置记录
  ;; 使用 C-x C-SPC 执行 `pop-global-mark' 直接跳转到上一个全局位置处
  ;; 使用 C-u C-SPC 跳转到本地位置处
  (setq mark-ring-max 6)
  (setq global-mark-ring-max 6)

  ;; 设置 emacs-lisp 的限制
  (setq max-lisp-eval-depth 10000)        ; 默认值为 800
  (setq max-specpdl-size 10000)           ; 默认值为 1600

  ;; 启用 `list-timers', `list-threads' 这两个命令
  (put 'list-timers 'disabled nil)
  (put 'list-threads 'disabled nil)

  ;; 在命令行里支持鼠标
  (xterm-mouse-mode 1)

  ;; 退出Emacs时进行确认
  (setq confirm-kill-emacs 'y-or-n-p)

  ;; 在模式栏上显示当前光标的列号
  (column-number-mode t)

  ;; 配置所有的编码为UTF-8，参考：
  ;; https://thraxys.wordpress.com/2016/01/13/utf-8-in-emacs-everywhere-forever/
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-language-environment 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)
  (when (display-graphic-p) (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

** modes
#+BEGIN_SRC emacs-lisp
  (display-time-mode)
  (toggle-frame-maximized)
  (global-auto-revert-mode)
  (global-display-line-numbers-mode)
  (toggle-word-wrap)
  (global-word-wrap-whitespace-mode 1)

  (tab-bar-mode -1)
#+END_SRC

* Complete
** vertico

* Footer
#+BEGIN_SRC emacs-lisp :tangle early-init.el
  (provide 'early-init)
  ;;; early-init.el ends here
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (provide 'init)
  ;;; init.el ends here
#+END_SRC