;-*- eval: (load-file "./lib/emacy/emacy-config-develop.el");   -*-
#+TITLE: Emacs Config
#+AUTHOR: Li Shuzhi
#+STARTUP: show2levels
#+STARTUP: noindent
#+FILETAGS: :emacy:config:emacs:emacs-lisp:
#+PROPERTY: header-args :tangle init.el :noweb yes :session init
#+AUTO_TANGLE: t

* Header
** early-init.el :early-init:
#+BEGIN_SRC emacs-lisp :tangle early-init.el
  ;;; early-init.el --- emacs init file  -*- lexical-binding: t; -*-
#+END_SRC

** init.el
#+BEGIN_SRC emacs-lisp
  ;;; init.el --- emacs init file  -*- lexical-binding: t; -*-
  (require 'cl-lib)
#+END_SRC

* Preset
** constant :early-init:
#+BEGIN_SRC emacs-lisp :tangle early-init.el
  (defconst windows? (memq system-type '(cygwin windows-nt ms-dos)) "are we on windows")
  (defconst macos? (eq system-type 'darwin) "are we on macos")
  (defconst linux? (memq system-type '(gnu gnu/linux gnu/kfreebds berkeley-unix)) "are we on linux")
  (defconst bsd? (memq system-type '(darwin berkeley-unix gnu/kfreebsd)) "are we on bsd")
  (defconst wsl? (and linux? (string-match-p "microsoft" operating-system-release)) "are we on wsl")
#+END_SRC

** load-path
#+BEGIN_SRC emacs-lisp
  (defun add-subdirs-to-load-path (search-dir)
    (interactive)
    (let* ((dir (file-name-as-directory search-dir)))
      (dolist (subdir
               ;; 过滤出不必要的目录， 提升 Emacs 启动速度
               (cl-remove-if
                #'(lambda (subdir)
                    (or
                     ;; 不是目录的都移除
                     (not (file-directory-p (concat dir subdir)))
                     ;; 目录匹配下面规则的都移除
                     (member subdir '("." ".." ;Linux 当前目录和父目录
                                      "dist" "node_modules" "__pycache__" ;语言相关的模块目录
                                      "RCS" "CVS" "rcs" "cvs" ".git" ".github")))) ;版本控制目录
                (directory-files dir)))
        (let ((subdir-path (concat dir (file-name-as-directory subdir))))
          ;; 目录下有 .el .so .dll 文件的路径才添加到 load-path 中， 提升 Emacs 启动速度
          (when (cl-some #'(lambda (subdir-file)
                             (and (file-regular-p (concat subdir-path subdir-file))
                                  ;; .so .dll 文件指非 Elisp 语言编写的 Emacs 动态库
                                  (member (file-name-extension subdir-file) '("el" "so" "dll"))))
                         (directory-files subdir-path))
          
            ;; 注意： add-to-list 函数的第三个参数必须为 t ， 表示加到列表末尾
            ;; 这样 Emacs 会从父目录到子目录的顺序搜索 Elisp 插件， 顺序反过来会导致 Emacs 无法正常启动
            (add-to-list 'load-path subdir-path t))

          ;; 继续递归搜索子目录
          (add-subdirs-to-load-path subdir-path)))))

  (add-subdirs-to-load-path "~/.emacs.d/lib")

  ;; autoloads
  (require 'autoloads)
#+END_SRC

** exec-path
#+BEGIN_SRC emacs-lisp

#+END_SRC

** configs
#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :demand
    :config
    (setq custom-file (no-littering-expand-var-file-name "custom.el")
          whisper-install-directory (no-littering-expand-var-file-name "whisper")
          parinfer-rust-library-directory (no-littering-expand-var-file-name "parinfer-rust/")))
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :demand t
    :init
    (setq which-key-enable-extended-define-key t)
    :config
    (which-key-mode)
    :custom
    (which-key-side-window-location 'bottom)
    (which-key-sort-order 'which-key-key-order-alpha)
    (which-key-side-window-max-width 0.33)
    (which-key-idle-delay 0.12)
    :diminish which-key-mode)
#+END_SRC

** functions
#+BEGIN_SRC emacs-lisp
  (defmacro use-feature (name &rest args)
    "Like `use-package' but accounting for asynchronous installation.
    NAME and ARGS are in `use-package'."
    (declare (indent defun))
    `(use-package ,name :ensure nil ,@args))
#+END_SRC

** helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    ;;:after evil
    :init
    (setq evil-lookup-func #'helpful-at-point)
    :bind
    ([remap describe-key] . helpful-key)
    ([remap describe-command] . helpful-command)
    ([remap describe-function] . helpful-callable)
    ([remap describe-variable] . helpful-variable))
#+END_SRC

** encoding
#+BEGIN_SRC emacs-lisp
  ;; 配置所有的编码为UTF-8，参考：
  ;; https://thraxys.wordpress.com/2016/01/13/utf-8-in-emacs-everywhere-forever/
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-language-environment 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)
  (when (display-graphic-p) (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

** modes
#+BEGIN_SRC emacs-lisp
  (display-time-mode)
  (toggle-frame-maximized)
  (global-auto-revert-mode)
  (global-display-line-numbers-mode)
  (toggle-word-wrap)
  (global-word-wrap-whitespace-mode 1)

  (tab-bar-mode -1)
#+END_SRC

** garbage collect
#+BEGIN_SRC emacs-lisp :tangle early-init.el
  (setq gc-cons-threshold most-positive-fixnum)
  (setq gc-cons-percentage 0.6)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package gcmh :demand t :config (gcmh-mode 1))
#+END_SRC

* Binding :binding:
** general
#+BEGIN_SRC emacs-lisp
  (use-package general
    :demand t
    :config
    (general-override-mode)
    (general-auto-unbind-keys)
    (general-evil-setup)
    (general-define-key
     :states '(normal insert motion emacs)
     :keymaps 'override
     :prefix-map 'tyrant-map
     :prefix "SPC"
     :non-normal-prefix "M-SPC")

    (general-create-definer tyrant-def :keymaps 'tyrant-map)

    (tyrant-def "" nil)

    (general-create-definer despot-def
      :states '(normal insert motion emacs)
      :keymaps 'override
      :major-modes t
      :prefix "SPC m"
      :non-normal-prefix "M-SPC m")

    (despot-def "" nil)

    (general-def universal-argument-map "SPC u" 'universal-argument-more)

    (tyrant-def
        "SPC"     '("M-x" . execute-extended-command)
        "!"       '("shell cmd" . shell-command)
        "m"       (cons "files" (make-sparse-keymap))
        "m"       (cons "major mode" (make-sparse-keymap))
        "s"       (cons "search" (make-sparse-keymap))
        "u"       '("universal arg" . universal-argument)))
#+END_SRC

** evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :demand t
    :preface (setq evil-want-keybinding nil)
    :custom
    (evil-want-integration t) ;; This is optional since it's already set to t by default.
    (evil-want-C-i-jump t)
    (evil-undo-system 'undo-redo)
    (evil-shift-width 2 "same behavior for vim")
    (evil-complete-all-buffers nil)
    :config
    (defun +evil-kill-minibuffer () (interactive)
      (when (windowp (active-minibuffer-window)) (evil-ex-search-exit)))

    (add-hook 'mouse-leave-buffer-hook #'+evil-kill-minibuffer)
    (evil-mode))

  (use-package evil-collection
    :after (evil)
    :config (evil-collection-init)
    :custom
    (evil-collection-elpaca-want-g-filters nil)
    (evil-collection-setup-minibuffer t "Add evil bindings to minibuffer")
    (evil-collection-company-use-tng t))

  (use-package evil-nerd-commenter
    :after (general)
    :commands (evilnc-comment-operator
               evilnc-inner-comment
               evilnc-outer-commenter)
    ;; :custom (general-define-key :state '(normal visual) "gc" 'evilnc-comment-operator)
    :general
    ([remap comment-line] #'evilnc-comment-or-uncomment-lines
     :keymaps 'prog-mode-map
     :states '(normal visual) "gc" 'evilnc-comment-operator))

  (use-package evil-matchit :config (global-evil-matchit-mode 1))

  ;; TODO:
  ;; (use-package evil-lion :ensure (evil-lion :host github :repo "edkolev/evil-lion" :files ("*" (:exclude ".git"))) :config (evil-lion-mode))

  (use-package evil-surround :config (global-evil-surround-mode 1))

  (use-package evil-embrace
    :commands embrace-add-pair embrace-add-pair-regexp
    :after evil-surround
    :init (evil-embrace-enable-evil-surround-integration)
    :config (setq evil-embrace-show-help nil)
    :hook (org-mode . embrace-org-mode-hook)
    :hook (emace-lisp-mode . embrace-emacs-lisp-mode-hook))

  (use-package evil-escape
    :commands evil-escape
    :init
    (setq evil-escape-excluded-states '(normal visual multiedit emacs motion)
          evil-escape-excluded-major-modes '(treemacs-mode vterm-mode))
    (evil-define-key '(insert replace visual operator) 'global "\C-g" #'evil-escape))

  (use-package evil-exchange :config (evil-exchange-install))

  (use-package evil-traces :after evil :config (evil-traces-use-diff-faces) (evil-traces-mode))

  (use-package evil-snipe
    :after evil
    :demand
    :config
    (evil-snipe-mode +1)
    (evil-snipe-override-mode +1))

  (use-package evil-iedit-state
    :general
    (tyrant-def
      "s e" '(evil-iedit-state/iedit-mode :wk "iedit")
      "s q" '(evil-iedit-state/quit-iedit-mode :wk "quit iedit")))

  (use-package evil-goggles
    :config
    (evil-goggles-mode)
    (evil-goggles-use-diff-faces))
#+END_SRC

** [[https://github.com/abo-abo/hydra][hydra]]
#+begin_src emacs-lisp
  (use-package hydra
    :demand t)
#+end_src

** bindings
*** buffer                                                           :buffer:
#+begin_src emacs-lisp
  (tyrant-def
    "b"       (cons "buffers" (make-sparse-keymap))
    "bb"      'switch-to-buffer
    "bc"      'consult-buffer
    "bi"      'ibuffer
    "bd"      'kill-current-buffer
    "bm"      'switch-to-messages-buffer
    "bs"      'scratch-buffer
    "bu"      'reopen-killed-buffer
    "bx"      'kill-buffer-and-window
    "b TAB"    '("last buffer" . alternate-buffer))
#+end_src

*** major-mode-hydra
#+begin_src emacs-lisp
  (use-package major-mode-hydra
    :after hydra
    :bind ("C-M-<return>" . major-mode-hydra)
    :config
    (major-mode-hydra-define emacs-lisp-mode nil
        ("Eval"
         (("b" eval-buffer "buffer")
          ("e" eval-defun "defun")
          ("r" eval-region "region")
          ("q" nil)))))

  (use-package pretty-hydra
    :init
    (cl-defun pretty-hydra-title (title &optional icon-type icon-name
                                        &key face height v-adjust)
      "Add an icon in the hydra title."
      (let ((face (or face `(:inherit highlight :reverse-video t)))
            (height (or height 1.2))
            (v-adjust (or v-adjust 0.0)))
        (concat
         (when (and (icons-displayable-p) icon-type icon-name)
           (let ((f (intern (format "nerd-icons-%s" icon-type))))
             (when (fboundp f)
               (concat
                (apply f (list icon-name :face face :height height :v-adjust v-adjust))
                " "))))
         (propertize title 'face face))))
    ) 

  (use-package use-package-hydra :after hydra)
#+end_src
*** help                                                               :help:
#+begin_src emacs-lisp
  (tyrant-def
    "h"       (cons "help" (make-sparse-keymap))
    "ha"      'apropos
    "hb"      'describe-bindings
    "hc"      'describe-char
    "hf"      'describe-function
    "hF"      'describe-face
    "hi"      'info-emacs-manual
    "hI"      'info-display-manual
    "hk"      'describe-key
    "hK"      'describe-keymap
    "hm"      'describe-mode
    "hM"      'woman
    "hp"      'describe-package
    "ht"      'describe-text-properties
    "hv"      'describe-variable
    "hP"      (cons "profiler" (make-sparse-keymap))
    "hPs"     'profiler-start
    "hPk"     'profiler-stop
    "hPr"     'profiler-report)
#+end_src
*** jump                                                               :jump:
#+begin_src emacs-lisp
  (tyrant-def
    "j"       (cons "jump" (make-sparse-keymap))
    "ji"      'imenu
    "jc"      'avy-goto-char
    "jg"      'avy-goto-char-2)
#+end_src
*** file                                                               :file:
#+begin_src emacs-lisp
  (tyrant-def
    "f"       (cons "files" (make-sparse-keymap))
    "fC"      '("copy-file" . write-file)
    "fD"      'delete-current-buffer-file
    "fE"      'sudo-edit
    "ff"      'find-file
    "fj"      'dired-jump
    "fJ"      'dired-jump-other-window
    "fo"      'open-file-or-directory-in-external-app
    "fr"      'read-only-mode
    "fR"      'rename-current-buffer-file
    "fd"   '((lambda (&optional arg) (interactive "P") (let ((buffer (when arg (current-buffer)))) (diff-buffer-with-file buffer))) :which-key "diff-with-file")

    "fe"   (cons "emacs" (make-sparse-keymap))
    ;; TODO:
    "fed"  '((lambda () (interactive) (find-file-existing literate-file) (widen)) :which-key "dotfile")
    "feR"  '((lambda () (interactive) (load-file user-init-file)) :which-key "reload-init.el")
    "fet"  '((lambda () (interactive)
              (save-restriction (widen) (check-parens) (org-babel-tangle-file literate-file))
              (load-file "~/Projects/Emacy/profiles/emacy/init.el")
              :which-key "tangle/reload-init.el"))
    "fp"   'find-function-at-point
    "fP"   'find-function
    "fR"   'rename-file-and-buffer
    "fs"   'save-buffer
    "fv"   'find-variable-at-point
    "fV"   'find-variable)
#+end_src
*** frame :frame:
#+begin_src emacs-lisp
  (tyrant-def
    "F"       (cons "frame" (make-sparse-keymap))
    "Fd"      'delete-frame
    "FD"      'delete-other-frames
    "Fn"      'make-frame
    "Fo"      'other-frame
    "FD" 'delete-other-frames
    "FF" 'select-frame-by-name
    "FO" 'other-frame-prefix
    "Fc" '(:ingore t :which-key "color")
    "Fcb" 'set-background-color
    "Fcc" 'set-cursor-color
    "Fcf" 'set-foreground-color
    "Ff" 'set-frame-font
    "Fm" 'make-frame-on-monitor
    "Fn" 'next-window-any-frame
    "Fo" 'other-frame
    "Fp" 'previous-window-any-frame
    "Fr" 'set-frame-name)
#+end_src
*** window
#+begin_src emacs-lisp
  (tyrant-def
    "w"       (cons "windows" (make-sparse-keymap))
    "w TAB"   'alternate-window
    "w+"      'window-layout-toggle
    "w?" 'split-window-vertically
    "w=" 'balance-windows
    "w/" 'split-window-horizontally
    "wO" 'delete-other-windows
    "wX" '((lambda () (interactive) (call-interactively #'other-window) (kill-buffer-and-window)) :which-key "kill-other-buffer-and-window")
    "wd" 'delete-window
    "wh" 'windmove-left
    "wj" 'windmove-down
    "wk" 'windmove-up
    "wl" 'windmove-right
    "wo" 'other-window
    "wx" 'kill-buffer-and-window

    "wb"      'switch-to-minibuffer-window
    "wd"      'delete-window
    "wD"      'delete-other-windows
    "wm"      'toggle-maximize-buffer
    "wf"      'follow-mode
    "wh"      'evil-window-left
    "wH"      'evil-window-move-far-left
    "wj"      'evil-window-down
    "wJ"      'evil-window-move-very-bottom
    "wk"      'evil-window-up
    "wK"      'evil-window-move-very-top
    "wl"      'evil-window-right
    "wL"      'evil-window-move-far-right
    "wr"      'rotate-windows-forward
    "wR"      'rotate-windows-backward
    "ws"      'split-window-vertically
    "wS"      'split-window-vertically-and-focus
    "wt"      'toggle-current-window-dedication
    "wu"      'winner-undo
    "wU"      'winner-redo
    "wv"      'split-window-horizontally
    "wV"      'split-window-horizontally-and-focus)
#+end_src
*** project :project:
#+begin_src emacs-lisp
  (tyrant-def
    "p"       (cons "projects" project-prefix-map)
    "pt"      'project-open-in-tab)
#+end_src
*** toggle :toggle:
#+begin_src emacs-lisp
  (tyrant-def
    "T"       (cons "toggles" (make-sparse-keymap))
    "Ta"      'auto-fill-mode
    ;;"Td"      'toggle-debug-on-error
    "Tde"     'toggle-debug-on-error
    "Tdq"     'toggle-debug-on-quit
    "Tf"      'display-fill-column-indicator-mode
    "Tl"      'toggle-truncate-lines
    "Tm"      'flymake-mode
    "Tn"      'display-line-numbers-mode
    "Ts"      'flyspell-mode
    "Tw"      'whitespace-mode
    "TW"      'toggle-word-wrap)
#+end_src
*** layout :layout:
#+begin_src emacs-lisp
  (tyrant-def
    "l"       (cons "layouts" tab-prefix-map)
    "ld"      'tab-bar-close-tab
    "lD"      'tab-bar-close-other-tabs
    "lg"      'tab-bar-change-tab-group
    "lm"      'tab-bar-move-tab-to
    "lM"      'tab-bar-move-tab-to-group
    "ll"      'tab-bar-switch-to-tab
    "lR"      'tab-bar-rename-tab
    "lt"      'other-tab-prefix
    "lu"      'tab-bar-undo-close-tab
    "l TAB"   'tab-bar-switch-to-last-tab)
#+end_src
*** quit :quit:
#+begin_src emacs-lisp
  (tyrant-def
    "q"       (cons "quit" (make-sparse-keymap))
    "qd"      'restart-emacs-debug-init
    "qr"      'restart-emacs
    "qR"      'restart-emacs-without-desktop
    "qf"      'delete-frame
    "qq"      'save-buffers-kill-terminal
    "qQ"      'save-buffers-kill-emacs)
#+end_src

* User Interface
** default
  禁止展示菜单栏、工具栏和纵向滚动条
  禁止菜单栏、工具栏、滚动条模式，禁止启动屏幕和文件对话框
  禁止自动缩放窗口先
  在这个阶段不编译
#+BEGIN_SRC emacs-lisp :tangle early-init.el
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

  (setq frame-inhibit-implied-resize t)
  (setq inhibit-splash-screen t)
  (setq use-file-dialog nil)

  (setq comp-deferred-compilation nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; 禁用一些GUI特性
  (setq use-dialog-box nil)               ; 鼠标操作不使用对话框
  (setq inhibit-default-init t)           ; 不加载 `default' 库
  (setq inhibit-startup-screen t)         ; 不加载启动画面
  (setq inhibit-startup-message t)        ; 不加载启动消息
  (setq inhibit-startup-buffer-menu t)    ; 不显示缓冲区列表

  ;; 设置自动折行宽度为80个字符，默认值为70
  (setq-default fill-column 80)

  ;; 设置大文件阈值为100MB，默认10MB
  (setq large-file-warning-threshold 100000000)

  ;; 以16进制显示字节数
  (setq display-raw-bytes-as-hex t)
  ;; 有输入时禁止 `fontification' 相关的函数钩子，能让滚动更顺滑
  (setq redisplay-skip-fontification-on-input t)

  ;; 禁止响铃
  (setq ring-bell-function 'ignore)

  ;; 在光标处而非鼠标所在位置粘贴
  (setq mouse-yank-at-point t)

  ;; 拷贝粘贴设置
  (setq select-enable-primary nil)        ; 选择文字时不拷贝
  (setq select-enable-clipboard t)        ; 拷贝时使用剪贴板

  ;; 鼠标滚动设置
  (setq scroll-step 2)
  (setq scroll-margin 2)
  (setq hscroll-step 2)
  (setq hscroll-margin 2)
  (setq scroll-conservatively 101)
  (setq scroll-up-aggressively 0.01)
  (setq scroll-down-aggressively 0.01)
  (setq scroll-preserve-screen-position 'always)

  ;; 对于高的行禁止自动垂直滚动
  (setq auto-window-vscroll nil)

  ;; 设置新分屏打开的位置的阈值
  (setq split-width-threshold (assoc-default 'width default-frame-alist))
  (setq split-height-threshold nil)

  ;; TAB键设置，在Emacs里不使用TAB键，所有的TAB默认为4个空格
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  ;; yes或no提示设置，通过下面这个函数设置当缓冲区名字匹配到预设的字符串时自动回答yes
  (setq original-y-or-n-p 'y-or-n-p)
  (defalias 'original-y-or-n-p (symbol-function 'y-or-n-p))
  (defun default-yes-sometimes (prompt)
    "automatically say y when buffer name match following string"
    (if (or (string-match "has a running process" prompt)
            (string-match "does not exist; create" prompt)
            (string-match "modified; kill anyway" prompt)
            (string-match "Delete buffer using" prompt)
            (string-match "Kill buffer of" prompt)
            (string-match "still connected.  Kill it?" prompt)
            (string-match "Shutdown the client's kernel" prompt)
            (string-match "kill them and exit anyway" prompt)
            (string-match "Revert buffer from file" prompt)
            (string-match "Kill Dired buffer of" prompt)
            (string-match "delete buffer using" prompt)
            (string-match "Kill all pass entry" prompt)
            (string-match "for all cursors" prompt)
            (string-match "Do you want edit the entry" prompt))
        t
        (original-y-or-n-p prompt)))
  (defalias 'yes-or-no-p 'default-yes-sometimes)
  (defalias 'y-or-n-p 'default-yes-sometimes)

  ;; 设置剪贴板历史长度300，默认为60
  (setq kill-ring-max 200)

  ;; 在剪贴板里不存储重复内容
  (setq kill-do-not-save-duplicates t)

  ;; 设置位置记录长度为6，默认为16
  ;; 可以使用 `counsel-mark-ring' or `consult-mark' (C-x j) 来访问光标位置记录
  ;; 使用 C-x C-SPC 执行 `pop-global-mark' 直接跳转到上一个全局位置处
  ;; 使用 C-u C-SPC 跳转到本地位置处
  (setq mark-ring-max 6)
  (setq global-mark-ring-max 6)

  ;; 设置 emacs-lisp 的限制
  (setq max-lisp-eval-depth 10000)        ; 默认值为 800
  (setq max-specpdl-size 10000)           ; 默认值为 1600

  ;; 启用 `list-timers', `list-threads' 这两个命令
  (put 'list-timers 'disabled nil)
  (put 'list-threads 'disabled nil)

  ;; 在命令行里支持鼠标
  (xterm-mouse-mode 1)

  ;; 退出Emacs时进行确认
  ;; (setq confirm-kill-emacs 'y-or-n-p)

  ;; 在模式栏上显示当前光标的列号
  (column-number-mode t)
#+END_SRC

** fonts
*** utils
#+begin_src emacs-lisp
  (defun fonts-installed (&rest font-list) (reverse (cl-intersection font-list (font-family-list) :test #'equal)))
#+end_src
*** fontaine
#+BEGIN_SRC emacs-lisp
  (use-package fontaine
    :when (display-graphic-p)
    :config
    (setq fontaine-latest-state-file (locate-user-emacs-file "etc/fontaine-latest-state.eld"))
    (setq fontaine-presets
      '((regular
         :default-height 140
         :default-weight regular
         :fixed-pitch-height 1.0
         :variable-pitch-height 1.0)
        (large
         :default-height 180
         :default-weight normal
         :fixed-pitch-height 1.0
         :variable-pitch-height 1.05)
        (t
         :default-family "Fira Code"
         :fixed-pitch-family "Fira Code"
         :variable-pitch-family "Fira Code"
         :italic-family "Fira Code"
         :variable-pitch-weight normal
         :bold-weight normal
         :italic-slant italic
         :line-spacing 0.1)))
    ;; (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))
    (fontaine-set-preset 'regular)

    ;; set emoji font
    (set-fontset-font t (if (version< emacs-version "28.1") '(#x1f300 . #x1fad0) 'emoji)
      (car (fonts-installed "Noto Emoji" "Symbola" "Apple Color Emoji" "Noto Color Emoji" "Segoe UI Emoji")))
    ;; set Chinese font
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font
       (frame-parameter nil 'font)
       charset
       (font-spec :family (car (fonts-installed "LXGW Wenkai" "霞鹜文楷" "Sarasa Gothic SC" "更纱黑体 SC")))))

    ;; set Chinese font scale
    (setq face-font-rescale-alist `(
                                    ("Symbola"             . 1.3)
                                    ("Microsoft YaHei"     . 1.2)
                                    ("WenQuanYi Zen Hei"   . 1.2)
                                    ("Sarasa Mono SC Nerd" . 1.2)
                                    ("PingFang SC"         . 1.16)
                                    ("Lantinghei SC"       . 1.16)
                                    ("Kaiti SC"            . 1.16)
                                    ("Yuanti SC"           . 1.16)
                                    ("Apple Color Emoji"   . 0.91))))

  (use-package fontify-face)
#+END_SRC

** window
*** transpose-frame
#+begin_src emacs-lisp
  (use-package transpose-frame
    :general
    (tyrant-def
      "w [" 'transpose-frame
      "w ]" 'rotate-frame))
#+end_src
*** ace-window
#+begin_src emacs-lisp
  (use-package ace-window)
#+end_src
*** [[https://depp.brause.cc/shackle/][shackle]]
#+BEGIN_SRC emacs-lisp
  (use-package shackle
    :hook (after-init . shackle-mode)
    :init
    (setq shackle-lighter "")
    (setq shackle-select-reused-windows nil) ; default nil
    (setq shackle-default-alignment 'below)  ; default below
    (setq shackle-default-size 0.4)          ; default 0.5
    (setq shackle-rules
          ;; CONDITION(:regexp)            :select     :inhibit-window-quit   :size+:align|:other     :same|:popup
          '((compilation-mode              :ignore t)
            ("\\*Async Shell.*\\*" :regexp t :ignore t)
            ("\\*corfu.*\\*"       :regexp t :ignore t)
            ("*eshell*"                    :select t                          :size 0.4  :align t     :popup t)
            (helpful-mode                  :select t                          :size 0.6  :align right :popup t)
            ("*Messages*"                  :select t                          :size 0.4  :align t     :popup t)
            ("*Calendar*"                  :select t                          :size 0.3  :align t     :popup t)
            ("*info*"                      :select t                                                  :same t)
            (magit-status-mode             :select t   :inhibit-window-quit t                         :same t)
            (magit-log-mode                :select t   :inhibit-window-quit t                         :same t)
            )))
#+END_SRC

*** [[https://github.com/karthink/popper][popper]]
#+BEGIN_SRC emacs-lisp
  (use-package popper
    :demand
    :bind (("M-`"     . popper-toggle-latest)
           ("M-<tab>" . popper-cycle)
           ("M-\\"    . popper-toggle-type))
    :hook (after-init . popper-mode)
    ;;:hook (after-init . popper-echo-mode)
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "\\*Async Shell Command\\*"
            help-mode
            helpful-mode
            occur-mode
            pass-view-mode
            "^\\*eshell.*\\*$" eshell-mode ;; eshell as a popup
            "^\\*shell.*\\*$"  shell-mode  ;; shell as a popup
            ("\\*corfu\\*" . hide)
            (compilation-mode . hide)
            ;; derived from `fundamental-mode' and fewer than 10 lines will be considered a popup
            (lambda (buf) (with-current-buffer buf
                            (and (derived-mode-p 'fundamental-mode)
                                 (< (count-lines (point-min) (point-max))
                                    10))))))
    :config
    ;; group by project.el, projectile, directory or perspective
    (setq popper-group-function nil)

    ;; pop in child frame or not
    (setq popper-display-function #'display-buffer-in-child-frame)

    ;; use `shackle.el' to control popup
    (setq popper-display-control nil))
#+END_SRC

*** winner
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :hook (after-init . winner-mode)
    :commands (winner-undo winner-redo)
    :config
    (setq winner-boring-buffers
          '("*Completions*"
            "*Compile-Log*"
            "*inferior-lisp*"
            "*Fuzzy Completions*"
            "*Apropos*"
            "*Help*"
            "*cvs*"
            "*Buffer List*"
            "*Ibuffer*"
            "*esh command on file*")))
#+END_SRC

** history
#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :hook (after-init . savehist-mode)
    :config
    ;; Allow commands in minibuffers, will affect `dired-do-dired-do-find-regexp-and-replace' command:
    (setq enable-recursive-minibuffers t)
    (setq history-length 1000)
    (setq savehist-additional-variables '(mark-ring
                                          global-mark-ring
                                          search-ring
                                          regexp-search-ring
                                          extended-command-history))
    (setq savehist-autosave-interval 300))

  (use-package saveplace :hook (after-init . save-place-mode))

  (use-package recentf
    :defines no-littering-etc-directory no-littering-var-directory
    :hook (after-init . recentf-mode)
    :custom
    (recentf-max-saved-items 300)
    (recentf-auto-cleanup 'never)
    ;; `recentf-add-file' will apply handlers first, then call `string-prefix-p'
    ;; to check if it can be pushed to recentf list.
    (recentf-filename-handlers '(abbreviate-file-name))
    (recentf-exclude `(,@(cl-loop for f in `(,package-user-dir
                                             ,no-littering-var-directory
                                             ,no-littering-etc-directory)
                                  collect (abbreviate-file-name f))
                       ;; Folders on MacOS start
                       "^/private/tmp/"
                       "^/var/folders/"
                       ;; Folders on MacOS end
                       ".cache"
                       ".cask"
                       ".elfeed"
                       "elfeed"
                       "bookmarks"
                       "cache"
                       "ido.*"
                       "persp-confs"
                       "recentf"
                       "undo-tree-hist"
                       "url"
                       "^/tmp/"
                       "/ssh\\(x\\)?:"
                       "/su\\(do\\)?:"
                       "^/usr/include/"
                       "/TAGS\\'"
                       "COMMIT_EDITMSG\\'")))
#+END_SRC

** undo-redo
*** vundo
#+BEGIN_SRC emacs-lisp
  (use-package vundo)
#+END_SRC

** modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom
    (doom-modeline-irc nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-gnus nil)
    (doom-modeline-github nil)
    (doom-modeline-buffer-file-name-style 'truncate-upto-root) ; : auto
    (doom-modeline-persp-name nil)
    (doom-modeline-unicode-fallback t)
    (doom-modeline-enable-word-count nil))

  (use-package minions :hook (after-init . minions-mode))

  (use-package keycast
    :hook (after-init . keycast-mode)
    :config
    ;; set for doom-modeline support
    ;; With the latest change 72d9add, mode-line-keycast needs to be modified to keycast-mode-line.
    (define-minor-mode keycast-mode
      "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
      :global t
      (if keycast-mode
          (progn
            (add-hook 'pre-command-hook 'keycast--update t)
            (add-to-list 'global-mode-string '("" keycast-mode-line "  ")))
        (remove-hook 'pre-command-hook 'keycast--update)
        (setq global-mode-string (delete '("" keycast-mode-line "  ") global-mode-string))
        ))

    (dolist (input '(self-insert-command
                    org-self-insert-command))
      (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

    (dolist (event '(mouse-event-p
                    mouse-movement-p
                    mwheel-scroll))
      (add-to-list 'keycast-substitute-alist `(,event nil)))

    (setq keycast-log-format "%-20K%C\n")
    (setq keycast-log-frame-alist
          '((minibuffer . nil)))
    (setq keycast-log-newest-first t))
#+END_SRC

** edit
*** autorevert
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :hook (after-init . global-auto-revert-mode)
    :bind ("s-u" . revert-buffer)
    :custom
    (auto-revert-interval 10)
    (auto-revert-avoid-polling t)
    (auto-revert-verbose nil)
    (auto-revert-remote-files t)
    (auto-revert-check-vc-info t)
    (global-auto-revert-non-file-buffers t))
#+END_SRC

** theme
#+begin_src emacs-lisp
  (use-package zenburn-theme :config (load-theme 'zenburn t))
#+end_src

** dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :demand t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-center-content t
          dashboard-items '((recents . 5)
                            (bookmarks . 6)
                            (projects . 3)
                            (agenda . 6))
          dashboard-set-file-icons t
          dashboard-set-heading-icons t))
#+end_src
*** page-break-lines
#+begin_src emacs-lisp
  (use-package page-break-lines-mode :hook (dashboard-mode . page-break-lines-mode))
#+end_src
** icons :icon:
*** TODO [[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons]]
#+begin_src emacs-lisp
  (use-package nerd-icons
    :custom
    (nerd-icons-font-family "Symbols Nerd Font Mono"))
#+end_src
**** ibuffer
#+begin_src emacs-lisp
  (use-package nerd-icons-ibuffer :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src
** file
*** dired
[[https://github.com/Fuco1/dired-hacks][dired-hacks]]
**** nerd-icons-dired :icon:nerd-icons:
#+begin_src emacs-lisp :tangle no
  (use-package nerd-icons-dired :hook (dired-mode . nerd-icons-dired-mode))
#+end_src
**** diredfl
#+begin_src emacs-lisp
  (use-package diredfl
    :hook
    ((dired-mode . diredfl-mode)
     ;; highlight parent and directory preview as well
     (dirvish-directory-view-mode . diredfl-mode))
    :config
    (set-face-attribute 'diredfl-dir-name nil :bold t))
#+end_src
*** [[https://github.com/alexluigit/dirvish/][dirvish]]
#+begin_src emacs-lisp
  (use-package dirvish
    :init
    (dirvish-override-dired-mode)
    :custom
    (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
     '(("h" "~/"                          "Home")
       ("e" "~/.emacs.d"                  "Emacs")
       ("p" "~/Projects/"                 "Projects")
       ("d" "~/Downloads/"                "Downloads")
       ("t" "~/.local/share/Trash/files/" "Trash")))
    :config
    (setq dirvish-mode-line-format '(:left (sort symlink) :right (omit yank index)))
    (setq dirvish-mode-line-height 10)
    (setq dirvish-attributes '(nerd-icons file-time file-size collapse subtree-state vc-state git-msg))
    (setq dirvish-subtree-state-style 'nerd)
    (setq delete-by-moving-to-trash t)
    (setq dirvish-path-separators (list
                                   (format "  %s " (nerd-icons-codicon "nf-cod-home"))
                                   (format "  %s " (nerd-icons-codicon "nf-cod-root_folder"))
                                   (format " %s " (nerd-icons-faicon "nf-fa-angle_right"))))
    (setq dired-listing-switches "-l --almost-all --human-readable --group-directories-first --no-group")
    (dirvish-peek-mode)
    (dirvish-side-follow-mode))
#+end_src
** workspace
*** perspective
#+begin_src emacs-lisp
  (use-package perspective
    :custom (persp-mode-prefix-key (kbd "C-c TAB"))
    :init (persp-mode)
    :general (tyrant-def "TAB"     (cons "layouts" perspective-map)))
#+end_src
** template
*** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet :config (yas-global-mode 1))
#+end_src
*** [[https://github.com/emacs-straight/tempel/][tempel]]
#+begin_src emacs-lisp
  (use-package tempel)

  (use-package tempel-collection
    :after tempel)
#+end_src
** navigate
*** avy
[[https://karthinks.com/software/avy-can-do-anything/][avy-can-do-anything]]
#+begin_src emacs-lisp
  (use-package avy
    :bind (("C-:" . avy-goto-char)
           ("M-g l" . avy-goto-line)
           ("M-g w" . avy-goto-word))
    :hook (after-init . avy-setup-default)
    :config (setq avy-all-windows nil
                  avy-all-windows-alt t
                  avy-background t
                  avy-style 'pre))
#+end_src
*** dumb-jump
#+begin_src emacs-lisp
  (use-package dumb-jump
    :bind (("M-g j" . dumb-jump-hydra/body))
    :config
    (defhydra dumb-jump-hydra (:color blue :columns 3)
        "Dumb Jump"
        ("j" dumb-jump-go "Go")
        ("o" dumb-jump-go-other-window "Other window")
        ("e" dumb-jump-go-prefer-external "Go external")
        ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
        ("i" dumb-jump-go-prompt "Prompt")
        ("l" dumb-jump-quick-look "Quick look")
        ("b" dumb-jump-back "Back"))
    )
#+end_src
** highlight
#+begin_src emacs-lisp
  (use-package hl-todo :config (global-hl-todo-mode))
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom (highlight-indent-guides-method 'fill))
  (use-package rainbow-delimiters :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
* Complete
** vertico
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :demand
    :config
    (vertico-mode)
    (setq vertico-scroll-margin 0
          vertico-resize t
          vertico-cycle t))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Support opening new minibuffers from inside existing minibuffers.
    (setq enable-recursive-minibuffers t)

    ;; Emacs 28 and newer: Hide commands in M-x which do not work in the current
    ;; mode.  Vertico commands are hidden in normal buffers. This setting is
    ;; useful beyond Vertico.
    (setq read-extended-command-predicate #'command-completion-default-include-p))
#+END_SRC
** pinyinlib
#+begin_src emacs-lisp
  (use-package pinyinlib)
#+end_src
** orderless
#+begin_src emacs-lisp
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless partial-completion basic))
    (setq orderless-component-separator "[ &]") ; & is for company because space will break completion
    (setq completion-category-defaults nil)
    (setq completion-category-overrides '((file (styles partial-completion))))
    :config
    (defun completion--regex-pinyin (str) (orderless-regexp (pinyinlib-build-regexp-string str)))
    (add-to-list 'orderless-matching-styles 'completion--regex-pinyin))
#+end_src
** marginalia
插件给迷你缓冲区的补全候选条目添加一些提示。
#+begin_src emacs-lisp
  ;; minibuffer helpful annotations
  (use-package marginalia
    :hook (after-init . marginalia-mode)
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+end_src
** consult
[[https://github.com/minad/consult/wiki][Wiki]]
#+begin_src emacs-lisp
  (use-package consult
    :after org
    :bind (([remap goto-line]                     . consult-goto-line)
           ([remap isearch-forward]               . consult-line-symbol-at-point) ; my-consult-ripgrep-or-line
           ([remap switch-to-buffer]              . consult-buffer)
           ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
           ([remap switch-to-buffer-other-frame]  . consult-buffer-other-frame)
           ([remap yank-pop]                      . consult-yank-pop)
           ([remap apropos]                       . consult-apropos)
           ([remap bookmark-jump]                 . consult-bookmark)
           ([remap goto-line]                     . consult-goto-line)
           ([remap imenu]                         . consult-imenu)
           ([remap multi-occur]                   . consult-multi-occur)
           ([remap recentf-open-files]            . consult-recent-file)
           ("C-x j"                               . consult-mark)
           ("C-c g"                               . consult-ripgrep)
           ("C-c f"                               . consult-find)
           ("\e\ef"                               . consult-locate) ; need to enable locate first
           ("C-c n h"                             . my/consult-find-org-headings)
           :map org-mode-map
           ("C-c C-j"                             . consult-org-heading)
           :map minibuffer-local-map
           ("C-r"                                 . consult-history)
           :map isearch-mode-map
           ("C-;"                                 . consult-line)
           :map prog-mode-map
           ("C-c C-j"                             . consult-outline)
           )
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; MacOS locate doesn't support `--ignore-case --existing' args.
    (setq consult-locate-args (pcase system-type
                                ('gnu/linux "locate --ignore-case --existing --regex")
                                ('darwin "mdfind -name")))
    :config
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    (autoload 'projectile-project-root "projectile")
    (setq consult-project-root-function #'projectile-project-root)

    ;; search all org file headings under a directory, see:
    ;; https://emacs-china.org/t/org-files-heading-entry/20830/4
    (defun my/consult-find-org-headings (&optional match)
      "find headngs in all org files."
      (interactive)
      (consult-org-heading match (directory-files org-directory t "^[0-9]\\{8\\}.+\\.org$")))

    ;; Use `consult-ripgrep' instead of `consult-line' in large buffers
    (defun consult-line-symbol-at-point ()
      "Consult line the synbol where the point is"
      (interactive)
      (consult-line (thing-at-point 'symbol))))
#+end_src
*** consult-todo
#+begin_src emacs-lisp
  (use-package consult-todo)
#+end_src
** embark
#+begin_src emacs-lisp
  (use-package embark
    :demand t
    :general
    (:keymaps 'override
     "C-;" 'embark-dwim
     :states '(normal insert motion emacs)
     "C-." 'embark-act)

    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
#+end_src
*** embark-consult
#+begin_src emacs-lisp
  (use-package embark-consult :hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** TODO cape
** TODO corfu
** nerd-icon-completion :icon:
#+begin_src emacs-lisp
  (use-package nerd-icons-completion
    :after marginalia
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src
* TODO Org Mode
* Program
** treesit
#+begin_src emacs-lisp
  (use-package treesit
    :config (setq treesit-font-lock-level 4)
    :init
    (setq treesit-language-source-alist
          '((nu . ("https://github.com/nushell/tree-sitter-nu/"))
            (bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
            (c . ("https://github.com/tree-sitter/tree-sitter-c"))
            (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
            (css . ("https://github.com/tree-sitter/tree-sitter-css"))
            (cmake . ("https://github.com/uyha/tree-sitter-cmake"))
            (csharp     . ("https://github.com/tree-sitter/tree-sitter-c-sharp.git"))
            (dockerfile . ("https://github.com/camdencheek/tree-sitter-dockerfile"))
            (elisp . ("https://github.com/Wilfred/tree-sitter-elisp"))
            (go . ("https://github.com/tree-sitter/tree-sitter-go"))
            (gomod      . ("https://github.com/camdencheek/tree-sitter-go-mod.git"))
            (html . ("https://github.com/tree-sitter/tree-sitter-html"))
            (java       . ("https://github.com/tree-sitter/tree-sitter-java.git"))
            (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
            (json . ("https://github.com/tree-sitter/tree-sitter-json"))
            (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
            (make . ("https://github.com/alemuller/tree-sitter-make"))
            (markdown . ("https://github.com/MDeiml/tree-sitter-markdown" nil "tree-sitter-markdown/src"))
            (ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml" nil "ocaml/src"))
            (org . ("https://github.com/milisims/tree-sitter-org"))
            (python . ("https://github.com/tree-sitter/tree-sitter-python"))
            (php . ("https://github.com/tree-sitter/tree-sitter-php"))
            (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "typescript/src"))
            (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "tsx/src"))
            (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
            (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
            (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
            (vue . ("https://github.com/merico-dev/tree-sitter-vue"))
            (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))
            (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
            (zig . ("https://github.com/GrayJack/tree-sitter-zig"))
            ))

    (setq major-mode-remap-alist
          '((c-mode          . c-ts-mode)
            (c++-mode        . c++-ts-mode)
            (cmake-mode      . cmake-ts-mode)
            (conf-toml-mode  . toml-ts-mode)
            (css-mode        . css-ts-mode)
            (js-mode         . js-ts-mode)
            (js-json-mode    . json-ts-mode)
            (python-mode     . python-ts-mode)
            (sh-mode         . bash-ts-mode)
            (typescript-mode . typescript-ts-mode)))
    (add-hook 'emacs-lisp-mode-hook #'(lambda () (treesit-parser-create 'elisp)))
    (setq treesit-extra-load-path (list (expand-file-name "var/treesit" user-emacs-directory))))
#+end_src
*** treesit-auto
#+begin_src emacs-lisp
  (use-package treesit-auto
    :config
    (global-treesit-auto-mode))
#+end_src
** [[https://github.com/herbertjones/nushell-ts-mode][nushell-ts-mode]]
#+begin_src emacs-lisp
  (use-package nushell-ts-babel
    :after org-contrib
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((nushell . t))))

  (use-package nushell-ts-mode
    :hook (nushell-ts-mode-hook . (lambda ()
                                    (corfu-mode 1)
                                    (highlight-parentheses-mode 1)
                                    (electric-pair-local-mode 1)
                                    (electic-indent-local-mode 1))))

#+end_src
** format
*** TODO apheleia
#+begin_src emacs-lisp
  (use-package apheleia :config (apheleia-global-mode 1))
#+end_src
** magit
#+begin_src emacs-lisp
  (use-package magit
   :general
   (tyrant-def "g g" 'magit))

  (use-package git-timemachine)
#+end_src
** misc
#+begin_src 
  (use-package editorconfig :config (editorconfig-mode 1))
  (use-package lentic :config (global-lentic-mode))
#+end_src
** lsp
*** lsp-bridge
#+begin_src emacs-lisp
  (use-package markdown-mode)
  (use-package lsp-bridge
    :config
    (global-lsp-bridge-mode)
    (evil-set-initial-state 'lsp-bridge-ref-mode 'emacs))
#+end_src
* Tool
** keyfreq
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :hook 
    (after-init . keyfreq-mode )
    (after-init . keyfreq-autosave-mode)
    :init
    (setq keyfreq-excluded-commands 
          '(self-insert-command
            abort-recursive-edit
            forward-char
            backward-char
            previous-line
            next-line)))
#+END_SRC
** TODO rime
#+begin_src emacs-lisp
  (use-package rime
    :defer t
    :custom
    (default-input-method "rime")
    (rime-show-candidate 'posframe)
    (rime-user-data-dir "~/Dotfiles/config/rime")
    (rime-disable-predicates '(rime-predicate-after-alphabet-char-p ;; 在英文字符串之后（必须为以字母开头的英文字符串）
                               ;; rime-predicate-after-ascii-char-p ;; 任意英文字符后
                               rime-predicate-prog-in-code-p ;; 在 prog-mode 和 conf-mode 中除了注释和引号内字符串之外的区域
                               rime-predicate-in-code-string-p ;; 在代码的字符串中，不含注释的字符串。
                               rime-predicate-evil-mode-p ;; 在 evil-mode 的非编辑状态下
                               rime-predicate-hydra-p ;; 如果激活了一个 hydra keymap
                               ;; rime-predicate-ace-window-p ;; 激活 ace-window-mode
                               ;; rime-predicate-current-input-punctuation-p ;; 当要输入的是符号时
                               rime-predicate-punctuation-after-space-cc-p ;; 当要在中文字符且有空格之后输入符号时
                               rime-predicate-punctuation-after-ascii-p ;; 当要在任意英文字符之后输入符号时
                               rime-predicate-punctuation-line-begin-p ;; 在行首要输入符号时
                               rime-predicate-space-after-ascii-p ;; 在任意英文字符且有空格之后
                               rime-predicate-space-after-cc-p ;; 在中文字符且有空格之后
                               rime-predicate-current-uppercase-letter-p ;; 将要输入的为大写字母时
                               rime-predicate-tex-math-or-command-p));; 在 (La)TeX 数学环境中或者输入 (La)TeX 命令时
    :bind
    (:map rime-mode-map ("C-," . 'rime-force-enable)))
#+end_src
* Footer
#+BEGIN_SRC emacs-lisp :tangle early-init.el
  (provide 'early-init)
  ;;; early-init.el ends here
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (provide 'init)
  ;;; init.el ends here
#+END_SRC
* Reference
** cheat-sheets
- [[https://github.com/alycklama/evil-mode-cheat-sheet][evil-cheat-sheet]]

** configs
- [[https://github.com/redguardtoo/emacs.d][redguardtoo]]
https://remacs.fun/
https://github.com/Ethanlinyf/General-Pure-Emacs
https://github.com/HerculeWu/HubbleEmacs/blob/main/Emacs.org
https://github.com/Eason0210/.emacs.d
https://github.com/MatthewZMD/.emacs.d
https://github.com/willbchang/ward-emacs
https://github.com/condy0919/.emacs.d
https://github.com/seagle0128/.emacs.d
https://github.com/nowislewis/nowisemacs/blob/master/init.org
https://github.com/purcell/emacs.d/tree/master
https://github.com/nasyxx/emacs.d

** tips
https://swsnr.de/emacs-script-pitfalls

** collections
https://github.com/lujun9972/emacs-document
https://github.com/caisah/emacs.dz

** query
https://github.com/search?utf8=%E2%9C%93&q=emacs+configuration&type=repositories&p=1
